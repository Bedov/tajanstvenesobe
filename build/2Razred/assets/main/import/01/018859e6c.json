[1,["1brw/JvvpFnIvdrxpFCgMZ","20g1ukYUVPvKWKBRznAKo+@f9941","a9fjdzfxhPa5p3fC/jx6b1","2b1ECFuYBJvYTPyguldOsw","12Y9dMgWdJKJGmTiZyQR9H@a804a","e41xQldy1D25Kf7mdtYO7m","d9+RVBkDtDT48I8sFz5AdX","74n+z9iN5EL6V75lvfpN+a","61Q2vTUDpFjL74BqO1gxVc","a8C7TOQmZLTIq80gwWSRRN","d3x4IMKphEKYvHuEU7yaxB","e9qLRuBtxCg5Eh2OdyQ8mF","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","591Zlfa7BJT4FOVXicFePM","33QFMDf81N/4/seYLLbkqI","93+vbhbAFMEaxUZb0Gsy5h","11vcSwZKhOt6Knn7niM+l3@f9941","e9b+4MaZ5AL74+KTqmnWQb","ef4Jndfj1Lrr4qTyBUREis","92eHeStapAKIHLs5d8zDeP","99fhXGJ8FPq6pj4Fnfo57Q","dfBdYsbA9OpZcUOGMt5Xca","42zjCofcJLIqukNaZ3Y3s7","04bVuk9jpGWIbc28kwHx2f","bbNcM94/9BoZdE1ToTrg9Y@114d0","ffCq7yFRlOqrM9wh+S01rT","8fSDEpC1BCZJERWldZK0GL@a7318","24GmTXeqRNrJvpZhXmWfqM","40R7/I2HhJgKJvINwQXuFK","e6sB2cmzBA9pTVkSzPLj5a","d3gG4LkTJMeK6hdE0ZN+F3","12N07A3HhJE5FMITht/ecr","3cXBuAOgdBlqQOpOs5nnAo","2ctFosZixDO7xFeWrYMZsb@158c8","730bzBf7VDSa3Si59fGEKO","15jn5SMiBM15aUcT4OboJ4@f9941","d3UQXFzyNJZ7GF7EZ6RGe5","28wRrdFf5DI5E0CCbodsOg","72CvClvuBOhq2R0D3nQ+I6","85eTCt2nxKBaLQIAcs8L7B","92vZJrzgFNvbgmjPYuYdUy@73b7f","56AVPkbDlO/7zUeKvpAChJ","00FJClAm9CBqdMF3G+GHug","a9gdHofxZFtZqDoY5KH1gC","84iLYJUixBZ49KXIHwOnQk@5454f","84iLYJUixBZ49KXIHwOnQk@4150d","84iLYJUixBZ49KXIHwOnQk@d4a54","7flY6652lAh4L1Q3Y4JroV","a0sjfPlvhDxIIhx8nHnYMt","73I8v/Ia5Huotv2PoxkCLI","5aZz+dbmlIGJkzjt2scDwd","4eQnN8V5ZKJYuK5DfAknJM","c5lOXb/q5L4r0Ef19sURmj","a5SPVul2VMK7HeAdwSMIp/","8dzIv5FKNPrbiNq8Jqx8P4","272nntETNGpLCxLcBKwbVs","b6IQqI7QxAYpa1DanFppjJ","55ehlQt4tNWpgfu1xrJrqT","975KQMmiVPBZlCMO2VkvWB","65yRfBRxJJKaOefZsXPGBF","baXMQgiq1K85YYUnpD6nFw","53KXpTQPdLHq/jquTuTPHs","0fdJ+0iPpOn4ViK/G4BOQh","4a2PAuFQBLK5PS5a2BVKpq","92vZJrzgFNvbgmjPYuYdUy@6f07a","1eprp9FKtExZcpNIX40tIM","2dSdWRXK1H9L6FErItEaz/","bdG8q6vX1KcbFDmXyII4Pk@f9941","c5CS2nbitCGaP8qrHHyZnM@f9941","96B+k92MVPQoy4WKZmtBBV","8fSDEpC1BCZJERWldZK0GL@da657","954OOjPAJKu402zHupXX7z","2eYkMXEBBPNJ0xadEtHgjb@272bf","c6QiAXvI9I05MjAiqmXBxY","8fSDEpC1BCZJERWldZK0GL@76ced","3f9hjZillApaUiZpRJelkc","8fSDEpC1BCZJERWldZK0GL@6496d","ec97dX+Q9EbLDit6qyWNVg","8fSDEpC1BCZJERWldZK0GL@f163d","f0yzEMFv5Mto9nd5SeGOZ4","a45TwvosNODrwNinpzGDq4","8fSDEpC1BCZJERWldZK0GL@0608f","8fSDEpC1BCZJERWldZK0GL@4f74f","8fSDEpC1BCZJERWldZK0GL@fc9ab","8fSDEpC1BCZJERWldZK0GL@6761a","8fSDEpC1BCZJERWldZK0GL@24074","8fSDEpC1BCZJERWldZK0GL@297c6","8fSDEpC1BCZJERWldZK0GL@18f21","8fSDEpC1BCZJERWldZK0GL@f52e1","8fSDEpC1BCZJERWldZK0GL@6a00c","8fSDEpC1BCZJERWldZK0GL@ea8e0","8fSDEpC1BCZJERWldZK0GL@689fe","8fSDEpC1BCZJERWldZK0GL@ec7fe","8fSDEpC1BCZJERWldZK0GL@e1d53","8fSDEpC1BCZJERWldZK0GL@ef52d","8fSDEpC1BCZJERWldZK0GL@362d1","ccqfyPHWRJf7ftQ1CJdCEG","b25RS7agZNM6gyv01Irtfj","35jJTMcCZFibNNlw3bzOoX","51+NRnB/FBG7XFl5842jrj","6cCjfdBClNKp78Jj78n4vN","02PQtwQmJK8KNv59u+6d3C","58/+YdXFhH6a24CmROeGA3@91ac0","02Z7Ydc5lKh6UqwkyaNMol","f7Pa/EefZPW7N7bTTXNNES","58/+YdXFhH6a24CmROeGA3@73b7f","84iLYJUixBZ49KXIHwOnQk@d8e4c","762u07aotGYpew+LkOQwFr@994f1","45KLcLBc9MYIdWXpdcNFQ8","762u07aotGYpew+LkOQwFr@1de10","90rSos+65A9ZmaNC7QLtCM@1cf01","90rSos+65A9ZmaNC7QLtCM@a4f55","90rSos+65A9ZmaNC7QLtCM@994f1","1cvO/IB01J7455ED/WWxT3@cc586","03on4Me09GLZRYNyVk7JdD","2ffjDRYbBG66pEGdnzzq2N","84iLYJUixBZ49KXIHwOnQk@18140","3d8hCC/PxFlInby1+Sk4fI","84iLYJUixBZ49KXIHwOnQk@8eed0","74IcIhzSlENYthvk1dXIGI","c4YVCe17VE8YffRHIoTgcm","84iLYJUixBZ49KXIHwOnQk@497ab","84iLYJUixBZ49KXIHwOnQk@f95d0","84iLYJUixBZ49KXIHwOnQk@e8508","84iLYJUixBZ49KXIHwOnQk@8a113","84iLYJUixBZ49KXIHwOnQk@13637","f0a3KMQoVPNqqCYSvGJFUp@68896","84iLYJUixBZ49KXIHwOnQk@d6191","84iLYJUixBZ49KXIHwOnQk@981dc","84iLYJUixBZ49KXIHwOnQk@5f1ce","84iLYJUixBZ49KXIHwOnQk@8877b","84iLYJUixBZ49KXIHwOnQk@14886","84iLYJUixBZ49KXIHwOnQk@7406f","84iLYJUixBZ49KXIHwOnQk@62f64","84iLYJUixBZ49KXIHwOnQk@cd1a7","84iLYJUixBZ49KXIHwOnQk@fe812","c7gkrcfxBC1Y/OghrJZyn5","fcVtTt94dE/5qMZVfBJIKk","37vxwA73dEobjCWskmbGTF","6dbmUrlDxHpof2ZWbveK07","c2DhkS9eFL26aAZsy3E6ed","b7LI9kcsdMk5QqmJEA095y","bbNcM94/9BoZdE1ToTrg9Y@73b7f","61NHJaRA9Ipbs42OMOkCUk","84iLYJUixBZ49KXIHwOnQk@5189c","bcmovVeLBEXYcZCQKO0Xpz@312ba","bcmovVeLBEXYcZCQKO0Xpz@9a420","bbNcM94/9BoZdE1ToTrg9Y@a745c","11vcSwZKhOt6Knn7niM+l3@6c48a","bcmovVeLBEXYcZCQKO0Xpz@5189c","15jn5SMiBM15aUcT4OboJ4@6c48a","bcmovVeLBEXYcZCQKO0Xpz@6b754","84iLYJUixBZ49KXIHwOnQk@91dcf","bcmovVeLBEXYcZCQKO0Xpz@386a4","84iLYJUixBZ49KXIHwOnQk@b5419","bcmovVeLBEXYcZCQKO0Xpz@91dcf","84iLYJUixBZ49KXIHwOnQk@a562b","bcmovVeLBEXYcZCQKO0Xpz@583b7","f7gZaDdWJA3LPqK+Q6y5NW@ba121","84iLYJUixBZ49KXIHwOnQk@957bc","bbNcM94/9BoZdE1ToTrg9Y@d20e9","58/+YdXFhH6a24CmROeGA3@a745c","58/+YdXFhH6a24CmROeGA3@80f19","84iLYJUixBZ49KXIHwOnQk@05a41","bcmovVeLBEXYcZCQKO0Xpz@e873a","84iLYJUixBZ49KXIHwOnQk@e873a","58/+YdXFhH6a24CmROeGA3@d20e9","84iLYJUixBZ49KXIHwOnQk@d20e9","bdG8q6vX1KcbFDmXyII4Pk@6c48a","bcmovVeLBEXYcZCQKO0Xpz@a39a5","bcmovVeLBEXYcZCQKO0Xpz@957bc","bbNcM94/9BoZdE1ToTrg9Y@80f19","84iLYJUixBZ49KXIHwOnQk@4f17a","31mD0zVIxDGbMtgOPxbQ4D","aeiU1az6hM7p0HP2QMIRuL","58/+YdXFhH6a24CmROeGA3@0226e","58/+YdXFhH6a24CmROeGA3@2f13c","2cFR59RK1NIohvboQGBFF0","bbNcM94/9BoZdE1ToTrg9Y@5678b","58/+YdXFhH6a24CmROeGA3@90ad7","81Ye9iQjFD4bHvZDRRa4j0","58/+YdXFhH6a24CmROeGA3@037e8","bcmovVeLBEXYcZCQKO0Xpz@7637f","bcmovVeLBEXYcZCQKO0Xpz@fbb74","bcmovVeLBEXYcZCQKO0Xpz@0af1a","bcmovVeLBEXYcZCQKO0Xpz@e3df4","bcmovVeLBEXYcZCQKO0Xpz@d2d78","bcmovVeLBEXYcZCQKO0Xpz@58984","bcmovVeLBEXYcZCQKO0Xpz@90ad7","32t6WU34pEH50o9iENR+yP","bcmovVeLBEXYcZCQKO0Xpz@037e8","adMIsNNh5HMKOcE+aQptiO","bcmovVeLBEXYcZCQKO0Xpz@95b10","f3bgRZuoREp4fr/mZh/JxH","bcmovVeLBEXYcZCQKO0Xpz@e0238","15MP4ea9lH36vsS0uohODc","bcmovVeLBEXYcZCQKO0Xpz@25172","ceKlKcAE5DF5AZdEuFO8lQ","bcmovVeLBEXYcZCQKO0Xpz@5825a","1crYycRLlPq7PkZHsAWBrO","bcmovVeLBEXYcZCQKO0Xpz@45003","c7EjUxbQVGs5NwKocErePd","bcmovVeLBEXYcZCQKO0Xpz@44265","33pbZBnHBI3p2bCmZ9FzBi","bcmovVeLBEXYcZCQKO0Xpz@ed735","0aopJFbWNJo4WKvp9k3OPx","bcmovVeLBEXYcZCQKO0Xpz@aeb5b","3d+6Srp0lDL4KR26Ziu7Fp","bcmovVeLBEXYcZCQKO0Xpz@664d7","61zB7EMa1PnoqmvEM46S20","bcmovVeLBEXYcZCQKO0Xpz@12ebe","0dblOBpkhKrpBlqmS83hRD","bcmovVeLBEXYcZCQKO0Xpz@0894e","58/+YdXFhH6a24CmROeGA3@bdaa5","58/+YdXFhH6a24CmROeGA3@04024","58/+YdXFhH6a24CmROeGA3@1075d","58/+YdXFhH6a24CmROeGA3@1c542","58/+YdXFhH6a24CmROeGA3@1ebd0","58/+YdXFhH6a24CmROeGA3@8cc3a","58/+YdXFhH6a24CmROeGA3@75ee4","58/+YdXFhH6a24CmROeGA3@58f1f","58/+YdXFhH6a24CmROeGA3@a72ab","58/+YdXFhH6a24CmROeGA3@68a05","58/+YdXFhH6a24CmROeGA3@2224c","58/+YdXFhH6a24CmROeGA3@0f374","58/+YdXFhH6a24CmROeGA3@62756","58/+YdXFhH6a24CmROeGA3@0be11","58/+YdXFhH6a24CmROeGA3@7d08b","2aSFFoR0BA6qu5v6B2D6V9","b2Kl2ep1ZBe609d95pthza","bbNcM94/9BoZdE1ToTrg9Y@7c4de","28l31a7MNCD7n1ryj1jrxl","e0NaAbYPhHlqVmYWuiwCQA","bbNcM94/9BoZdE1ToTrg9Y@b5f95","4c+uewqG1OqIMUUBldDHcI@f9941","b87Tk4yHlEXYtMj0gD3xzz@f9941","45ZvLxnfRM4KAtrMSD/Csn","38xNfINXNGFJI5HPPNrgEQ","c1Fv2ajzBAs7LAJ+WrJwZi","d3FS7fQQ1HvbANJl4nZCbf","e8zHZLnkdF1oUqS8pzl2Nh","c2tgM9yp1EmbLNSV8QyuSa","9c5J5JqhJAH7TnNqbDdZ9a","8abq3ykBZJ0ouP4ihcnpi6","a3tfaybRdINIIEnud35BkU","8cG7/0I/RLuo62XViJtpgl","92MgMo20VNK5/cc40QoKU6@f9941","19dC6i151FkYuKgjo6aGmY@f9941","00smFPpk9F66vdqjVJMGy7@f9941","502BbTOO1BHZoEENQqdYIv","e8N7TArsNKjYTYiJWxOlMW","8fSDEpC1BCZJERWldZK0GL@fe8e4","2bB3IU4mtGRL6jCg9zRr4K","2eYkMXEBBPNJ0xadEtHgjb@8d883","2eYkMXEBBPNJ0xadEtHgjb@1cf01","2eYkMXEBBPNJ0xadEtHgjb@2c5e4","ed0A3nHZNGBbB44sIf2XCq","ecFTwIE2hHmJK2QSGOvw/D","8fSDEpC1BCZJERWldZK0GL@11d3a","73CTD1jn9O35ewfJ7t1BNm","63+2IfB19J653/6cewwsI6","edEMUydn5CD5BecGx6e1oE","d8Ym0TElFNU6NyE3+CIkSi","8fSDEpC1BCZJERWldZK0GL@f95d0","8fSDEpC1BCZJERWldZK0GL@13637","8fSDEpC1BCZJERWldZK0GL@e8508","8fSDEpC1BCZJERWldZK0GL@8a113","8fSDEpC1BCZJERWldZK0GL@8dce5","84Y8plqglFg6AaG3cF6RiW","8fSDEpC1BCZJERWldZK0GL@eba4d","c3Lpa83ORPN4Ls135CrA7S","3ePY5Tc6pCLZqAaogQKleX","8fSDEpC1BCZJERWldZK0GL@c4f73","a5hO9GKSBPG6TBUbyT8OAu","8fSDEpC1BCZJERWldZK0GL@68d9b","2ctFosZixDO7xFeWrYMZsb@c7a87","2ctFosZixDO7xFeWrYMZsb@aa33b","2ctFosZixDO7xFeWrYMZsb@59fe8","2ctFosZixDO7xFeWrYMZsb@08040","2ctFosZixDO7xFeWrYMZsb@5a489","2ctFosZixDO7xFeWrYMZsb@c6cb1","2ctFosZixDO7xFeWrYMZsb@49029","2ctFosZixDO7xFeWrYMZsb@3ee51","58/+YdXFhH6a24CmROeGA3@3f2f2","58/+YdXFhH6a24CmROeGA3@ecaca","58/+YdXFhH6a24CmROeGA3@fdb55","58/+YdXFhH6a24CmROeGA3@d5b79","58/+YdXFhH6a24CmROeGA3@2d5df","58/+YdXFhH6a24CmROeGA3@3eea1","58/+YdXFhH6a24CmROeGA3@8feb8","58/+YdXFhH6a24CmROeGA3@f7cdb","58/+YdXFhH6a24CmROeGA3@ad32d","58/+YdXFhH6a24CmROeGA3@9d036","58/+YdXFhH6a24CmROeGA3@df8aa","58/+YdXFhH6a24CmROeGA3@28ab6","58/+YdXFhH6a24CmROeGA3@2bf59","cc2D4hLbBAXYCaErLWtJ6K","58/+YdXFhH6a24CmROeGA3@a6e8b","eajuYmGK5OMqU+ERTopLaZ","97pQRpoolM5bRJGoulNdsi","58/+YdXFhH6a24CmROeGA3@d34e6","cb9SGlDg9PI5B9V9PYq6hq","71Q3X01/NCz41nD59rWe7j","58/+YdXFhH6a24CmROeGA3@44a91","58/+YdXFhH6a24CmROeGA3@0274b","58/+YdXFhH6a24CmROeGA3@10657","58/+YdXFhH6a24CmROeGA3@e575c","dfpPug8tZDB54OY96DJBe/","58/+YdXFhH6a24CmROeGA3@1d5d9","58/+YdXFhH6a24CmROeGA3@1309b","58/+YdXFhH6a24CmROeGA3@2f001","58/+YdXFhH6a24CmROeGA3@e81d8","2aF8ToZCZMw7OiqN0XVHIS","c47tYZYtBD7bG+WNtII9q6","58/+YdXFhH6a24CmROeGA3@7bd53","1cL0vtMHNCCa433HzzYdLk","58/+YdXFhH6a24CmROeGA3@da12c","58/+YdXFhH6a24CmROeGA3@4636f","58/+YdXFhH6a24CmROeGA3@2d1cb","58/+YdXFhH6a24CmROeGA3@712ab","58/+YdXFhH6a24CmROeGA3@ca268","58/+YdXFhH6a24CmROeGA3@4fa40","58/+YdXFhH6a24CmROeGA3@7a994","58/+YdXFhH6a24CmROeGA3@bd554","58/+YdXFhH6a24CmROeGA3@e2ff1","58/+YdXFhH6a24CmROeGA3@5103c","9cR3NCR0RHqIVo6yqDOuvs","58/+YdXFhH6a24CmROeGA3@19c3f","58/+YdXFhH6a24CmROeGA3@c921e","58/+YdXFhH6a24CmROeGA3@cfe97","79RQVVOqRLPYP8iD46njrv","58/+YdXFhH6a24CmROeGA3@69a8c","58/+YdXFhH6a24CmROeGA3@30e78","58/+YdXFhH6a24CmROeGA3@44a3f","1fcX1QZVJFV4D3ssN76xCk","58/+YdXFhH6a24CmROeGA3@311f0","58/+YdXFhH6a24CmROeGA3@8c575","58/+YdXFhH6a24CmROeGA3@df300","978Rrqw45LVblAW5j9WKvf","58/+YdXFhH6a24CmROeGA3@d4658","6604wUbChLrqHhBmiTosQ9","58/+YdXFhH6a24CmROeGA3@dc50d","58/+YdXFhH6a24CmROeGA3@7b07b","58/+YdXFhH6a24CmROeGA3@c3dbf","58/+YdXFhH6a24CmROeGA3@7afd5","58/+YdXFhH6a24CmROeGA3@b3c74","58/+YdXFhH6a24CmROeGA3@41fd2","58/+YdXFhH6a24CmROeGA3@bb666","58/+YdXFhH6a24CmROeGA3@18f8d","58/+YdXFhH6a24CmROeGA3@7b447","e0qgHIouZEI5VnIz0q8/LH","58/+YdXFhH6a24CmROeGA3@d6df3","58/+YdXFhH6a24CmROeGA3@79aa0","15BNS5tCNLiJ/Co9Jw9nop","58/+YdXFhH6a24CmROeGA3@f6d55","58/+YdXFhH6a24CmROeGA3@762d1","58/+YdXFhH6a24CmROeGA3@cc20d","58/+YdXFhH6a24CmROeGA3@a3b5b","58/+YdXFhH6a24CmROeGA3@2719c","cbfc2XB6RFOoeOyyASQoKo","58/+YdXFhH6a24CmROeGA3@54729","5624Es4ulDcK1sfXy1tlTC","58/+YdXFhH6a24CmROeGA3@3b442","58/+YdXFhH6a24CmROeGA3@36e7e","bbNcM94/9BoZdE1ToTrg9Y@84459","bbNcM94/9BoZdE1ToTrg9Y@158cf","d23gRo7r1NLK4/lshTBjnP","032thx6ixKcLbHz3xHiAN0","f7gZaDdWJA3LPqK+Q6y5NW@d3a9c","86HNZZM5FMSL2FE4IBU6dC","f7gZaDdWJA3LPqK+Q6y5NW@8a449","762u07aotGYpew+LkOQwFr@1cf01","90rSos+65A9ZmaNC7QLtCM@2c5e4","e2S6F+7qhBIroAFh+65qOH","9c8ZZqtUVFsJD6nIEea3mb","4cdDT+tyVDc6cpZ5MYx9Zb","84iLYJUixBZ49KXIHwOnQk@51573","f0a3KMQoVPNqqCYSvGJFUp@1cf01","f0a3KMQoVPNqqCYSvGJFUp@2c5e4","8aRYQgPJNMjKzX0dpXlqEx","25TpJr/nFAKJsJZzbnlIVl","00CX9BsL5DJrURzQvkZNmJ","eei1uQIoRKQofxDDZO+/v4","55bLX5Zy9GvpKrczco/gE6","aez1QyY8VO07JDdAq9+g1e","baJ1OWFOpA6IeTo38xVzpI","84iLYJUixBZ49KXIHwOnQk@eb311","84iLYJUixBZ49KXIHwOnQk@8ae4d","84iLYJUixBZ49KXIHwOnQk@8ef4c","84iLYJUixBZ49KXIHwOnQk@8acb7","84iLYJUixBZ49KXIHwOnQk@10097","379eSeaDdG45hqt+rsd6gg","efkJpFIUZK65Xh2qP81k4r","84iLYJUixBZ49KXIHwOnQk@cc2b1","bbN872DeJNkoL25DpIuyg3","84iLYJUixBZ49KXIHwOnQk@fc2e8","12Y9dMgWdJKJGmTiZyQR9H@17020","bbNcM94/9BoZdE1ToTrg9Y@7637f","bbNcM94/9BoZdE1ToTrg9Y@30732","bbNcM94/9BoZdE1ToTrg9Y@e3df4","bbNcM94/9BoZdE1ToTrg9Y@f1394","bbNcM94/9BoZdE1ToTrg9Y@09c6d","bbNcM94/9BoZdE1ToTrg9Y@75ee4","bbNcM94/9BoZdE1ToTrg9Y@e0758","bbNcM94/9BoZdE1ToTrg9Y@a72ab","bbNcM94/9BoZdE1ToTrg9Y@aa83f","bbNcM94/9BoZdE1ToTrg9Y@2224c","bbNcM94/9BoZdE1ToTrg9Y@09706","bbNcM94/9BoZdE1ToTrg9Y@62756","bbNcM94/9BoZdE1ToTrg9Y@9675e","bbNcM94/9BoZdE1ToTrg9Y@7d08b","4cxXf6f7hJMZM1cFDUl+o0","bbNcM94/9BoZdE1ToTrg9Y@6d20c","bbNcM94/9BoZdE1ToTrg9Y@b5902","b48hJJZ7FJV5/1K1XaFrtO","bbNcM94/9BoZdE1ToTrg9Y@65f3c","bbNcM94/9BoZdE1ToTrg9Y@d47f8","bbNcM94/9BoZdE1ToTrg9Y@cdc42","bbNcM94/9BoZdE1ToTrg9Y@07d50","bbNcM94/9BoZdE1ToTrg9Y@2d5df","bbNcM94/9BoZdE1ToTrg9Y@a5b81","bbNcM94/9BoZdE1ToTrg9Y@8feb8","bbNcM94/9BoZdE1ToTrg9Y@e5326","bbNcM94/9BoZdE1ToTrg9Y@ad32d","bbNcM94/9BoZdE1ToTrg9Y@35b4d","bbNcM94/9BoZdE1ToTrg9Y@df8aa","bbNcM94/9BoZdE1ToTrg9Y@56f0d","bbNcM94/9BoZdE1ToTrg9Y@2bf59","bbNcM94/9BoZdE1ToTrg9Y@34047","bbNcM94/9BoZdE1ToTrg9Y@f96cf","bbNcM94/9BoZdE1ToTrg9Y@3706a","c5hGVWdUtFi6oHeNoMnMi5","bbNcM94/9BoZdE1ToTrg9Y@d0d2b","bbNcM94/9BoZdE1ToTrg9Y@032c0","bbNcM94/9BoZdE1ToTrg9Y@8e9aa","bbNcM94/9BoZdE1ToTrg9Y@54608","65tYHdLX5GgYu4+o3cvIBJ","a3LkjdqB1MJL+GtJGr4djq","bbNcM94/9BoZdE1ToTrg9Y@47b02","bbNcM94/9BoZdE1ToTrg9Y@fbb74","bbNcM94/9BoZdE1ToTrg9Y@0af1a","bbNcM94/9BoZdE1ToTrg9Y@d2d78","bbNcM94/9BoZdE1ToTrg9Y@58984","bbNcM94/9BoZdE1ToTrg9Y@90ad7","e7wWtV6q9Gc6KM86mErd1S","bbNcM94/9BoZdE1ToTrg9Y@037e8","bbNcM94/9BoZdE1ToTrg9Y@2f13c","bbNcM94/9BoZdE1ToTrg9Y@53d82","bbNcM94/9BoZdE1ToTrg9Y@3144d","bbNcM94/9BoZdE1ToTrg9Y@d4c13","bbNcM94/9BoZdE1ToTrg9Y@4a229","bbNcM94/9BoZdE1ToTrg9Y@53c70","bbNcM94/9BoZdE1ToTrg9Y@94391","bbNcM94/9BoZdE1ToTrg9Y@00ebb","e8NfDmz8dJ5bQ8kp3iIiqB","bbNcM94/9BoZdE1ToTrg9Y@60a53","bbNcM94/9BoZdE1ToTrg9Y@c7807","cfHgFi5YRBip1D5u1AFjwg","bbNcM94/9BoZdE1ToTrg9Y@20e1a","bbNcM94/9BoZdE1ToTrg9Y@1abf0","bbNcM94/9BoZdE1ToTrg9Y@351f1","86ErP73jBHcJSk8R3HW7NL","bbNcM94/9BoZdE1ToTrg9Y@89d42","bbNcM94/9BoZdE1ToTrg9Y@ee028","bbNcM94/9BoZdE1ToTrg9Y@2bc93","81kAaFMIRPl5eW0d+Iv1da","bbNcM94/9BoZdE1ToTrg9Y@c27fa","bbNcM94/9BoZdE1ToTrg9Y@d0ff4","bbNcM94/9BoZdE1ToTrg9Y@e0255","11a4JpSOpFV6EFvlGlblXk","bbNcM94/9BoZdE1ToTrg9Y@9cba8","7f3J+n/BRCFqgPQkJi+Cin","bbNcM94/9BoZdE1ToTrg9Y@4adc4","bbNcM94/9BoZdE1ToTrg9Y@f7d40","bbNcM94/9BoZdE1ToTrg9Y@739bd","bbNcM94/9BoZdE1ToTrg9Y@34201","bbNcM94/9BoZdE1ToTrg9Y@cb490","bbNcM94/9BoZdE1ToTrg9Y@0a72c","bbNcM94/9BoZdE1ToTrg9Y@53646","bbNcM94/9BoZdE1ToTrg9Y@5f586","bbNcM94/9BoZdE1ToTrg9Y@950fd","de+OM7o7xIH6XP1UgrHEL6","bbNcM94/9BoZdE1ToTrg9Y@4d507","bbNcM94/9BoZdE1ToTrg9Y@9da70","25AWbCSr5HV6jFLqNcTkOT","bbNcM94/9BoZdE1ToTrg9Y@03d47","bbNcM94/9BoZdE1ToTrg9Y@23895","bbNcM94/9BoZdE1ToTrg9Y@3f36a","bbNcM94/9BoZdE1ToTrg9Y@02679","bbNcM94/9BoZdE1ToTrg9Y@ac279","1c70+Nd3lK0peCosUUYOXd","bbNcM94/9BoZdE1ToTrg9Y@91414","62IL0bNg1Dw4cUF9LNhfJc","bbNcM94/9BoZdE1ToTrg9Y@ea0d3","bbNcM94/9BoZdE1ToTrg9Y@1bd9c","852jIsm7pCGoxIZWxhHpHv","bbNcM94/9BoZdE1ToTrg9Y@76d67","bbNcM94/9BoZdE1ToTrg9Y@29e5c","bbNcM94/9BoZdE1ToTrg9Y@ffbf1","bbNcM94/9BoZdE1ToTrg9Y@d2469","bbNcM94/9BoZdE1ToTrg9Y@75adc","b4W29ncGlE36C8b33OijM7","7c4WR2QU9AT5+JIka0x+pE","75Q7Mac5dILZg8zwkRPwRr","81LxP9acVL9KyDHgpcHMTt","12Y9dMgWdJKJGmTiZyQR9H@801ec","76XMcgzkZB0o0j3z0sUHa5","74WlibvuFIwYYQCo7uqRZ6","cbJxgyiYpOx6JXqbmslb5R","12Y9dMgWdJKJGmTiZyQR9H@2e76e","8bLtFddgBEILVSulZqjQBE","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","8fSDEpC1BCZJERWldZK0GL@94acd","8fSDEpC1BCZJERWldZK0GL@312ba","84iLYJUixBZ49KXIHwOnQk@583b7","bcmovVeLBEXYcZCQKO0Xpz@a562b"],["node","_mesh","_effectAsset","_parent","_defaultClip","mainTexture","_spriteFrame","target","_skeleton","_normalSprite","_target","root","_hoverSprite","_pressedSprite","_disabledSprite","asset","_material","targetInfo","_checkMark","_textureSource","source","value","lockedMaterial","unlockedMaterial","finishedMaterial","_cameraComponent","loadingPercentLable","loadingPanel","polugaTutorial","genericUIinput","genericUIABC","genericUIimage","genericUI","myTask","goldberg","_placeholderLabel","_textLabel","Joystick_Ball","task","scene","_backgroundImage","winSound","positiveSound","negativeSound","clickSound","_clip","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_id","_active","_layer","_objFlags","__editorExtras__","_parent","_components","_lpos","_lscale","_lrot","_euler","_children","_prefab"],-3,1,9,5,5,5,5,12,4],["cc.Node",["_name","_active","_layer","_id","_children","_parent","_lpos","_components","_lscale","_lrot","_euler"],-1,2,1,5,9,5,5,5],"cc.ImageAsset",["cc.RigidBody",["_mass","_group","_type","_linearDamping","_angularDamping","_useGravity","_allowSleep","node","_linearFactor","_angularFactor"],-4,1,5,5],["cc.Node",["_name","_layer","_active","_id","_components","_parent","_lpos","_lscale","_children","_lrot","_euler"],-1,12,1,5,5,2,5,5],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color"],1,1,6,5],["cc.Widget",["_alignFlags","_right","_bottom","_left","_top","_originalWidth","_originalHeight","node"],-4,1],["cc.MeshCollider",["_convex","_isTrigger","node","_mesh","_material"],1,1,6,6],["cc.Node",["_name","_parent","_lpos","_children","_lscale","_components","_lrot","_euler"],2,1,5,9,5,2,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_lineHeight","_horizontalAlign","node","_color"],-4,1,5],"cc.SpriteFrame",["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.PhysicsMaterial",["_friction","_restitution","_rollingFriction","_spinningFriction"],-1],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.MeshRenderer",["_name","_enabled","node","_materials","lightmapSettings","_mesh"],1,1,3,4,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],1,9,9],["cc.BoxCollider",["node","_size","_center"],3,1,5,5],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.AudioSource",["_loop","_playOnAwake","node","_clip"],1,1,6],["cc.Camera",["_visibility","_orthoHeight","_clearFlags","_near","_projection","_priority","_far","_fov","node","_color"],-5,1,5],"cc.TextureCube",["cc.SkeletalAnimation.Socket",["path","target"],2,1],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],2,9,2,1,4,6],["39cafqCRjhLgY4Ri2Nc42rg",["node","myTask"],3,1,1],["cc.Button",["_transition","node","clickEvents","_normalSprite","_normalColor","_target","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,6,5,1,6,6,6],["e1c9aDlWYxIXJgfYPO13PQz",["checkpointLock","remoteName","node","consequencesToResolve","dependencies"],1,1,2,2],["cc.Material",["_props","_states","_defines"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.SceneAsset",["_name"],2],["cc.SkeletalAnimation",["playOnLoad","node","_clips","_sockets","_defaultClip"],2,1,3,9,6],["a66f8v69b1JzKZyFYaNNW8n",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["ff492Jb5VJF54WfhLbZ2yTn",["node","loadingPanel","loadingPercentLable"],3,1,1,1],["585d7rn/aRJ5IMROkx8Nf4v",["node"],3,1],["cc.Scene",["_name","autoReleaseAssets","_children","_prefab","_globals"],1,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_shadowDistance","_invisibleOcclusionRange","_shadowColor"],1,5],["cc.SkyboxInfo",["_enabled","_useHDR","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["b0931iPk5tNabc56afJQZ2c",["node"],3,1],["cc.CylinderCollider",["_radius","node","_center","_material"],2,1,5,6],["934004W0apF6p4lgxoYjh2m",["globalManagerReference","node"],2,1],["b96f4IE44FO/LUog8WQxGyg",["moveSpeed","rotateSpeed","maxAngleUp","maxAngleDown","node"],-1,1],["1e229k9y7lBwLuZk3zWCzjS",["moveSpeed","forceStrenght","heightFromGround","node"],0,1],["607d3l7/nxF4rx1ouG/jHi3",["node"],3,1],["c6dcclgG8JJ/Z49xlaBATci",["node"],3,1],["cc.UIOpacity",["_opacity","node"],2,1],["914bcR7h0NPXr7ghsWVqehB",["node","polugaTutorial","lockedMaterial","unlockedMaterial","finishedMaterial"],3,1,1,6,6,6],["914bcR7h0NPXr7ghsWVqehB",["polugaTutorial","node","lockedMaterial","unlockedMaterial","finishedMaterial"],2,1,6,6,6],["cc.ModelLightmapSettings",[],3],["9606fdFb8VE8JJFItYrtveI",["node","genericUI","genericUIimage","genericUIABC","genericUIinput","canvas"],3,1,1,1,1,1,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["45709czMUVApIFxQEjL8hfE",["node"],3,1],["8697eP9WbhNqp3vpgyvYsAn",["node","goldberg"],3,1,1],["cc.EditBox",["_inputMode","_maxLength","node","_textLabel","_placeholderLabel","_backgroundImage"],1,1,1,1,6],["523caEBgsFEWJ4UlrBYMTEF",["node"],3,1],["e9ae6+GlNxJTJyq0CO9y9cL",["justTutorialLock","node"],2,1],["d8a78k8+pxJtobQg/pF6+uw",["Joystick_Vector","Joystick_Max","node","Joystick_Ball"],1,1,1],["6bd08DFT3NLwK/5NRfs8Gf2",["node","objectsToAnimate"],3,1,2],["8ff7bNHqqJImI+O/ATsQCXV",["node"],3,1],["37bcfOsZGlNz6jGQQBQgChf",["node"],3,1],["cc.Toggle",["node","clickEvents","_normalColor","_target","_checkMark","_normalSprite"],3,1,9,5,1,1,6],["688cbJkASVLcZYh6gn++ERZ",["node"],3,1],["c1a91TDAYxGxoE8SUSQ4ovd",["node","loadingPanel"],3,1,1],["69fcft23j9BQb5GQtrenmFo",["elevatorScript","LevelName","LanguageName","node","Canvas","TaskManager","Player"],0,1,1,1,1],["b39e4qV2apC2o3l+1LsJrju",["node","task"],3,1,1],["19759LlDspPQJncZEoq4rsO",["levelName","node"],2,1],["2a475arXmRLkavstJUxxDE3",["checkpointLock","remoteName","node","dependencies","consequencesToResolve"],1,1,2,2],["cc272q5tPBEf5n90qI3h1up",["turnOffNode","node"],2,1],["cc272q5tPBEf5n90qI3h1up",["node","turnOffNode"],3,1,1],["cc.Layout",["_layoutType","_paddingBottom","_spacingY","_verticalDirection","_isAlign","node"],-2,1],["a2826+uvW5GJ7MGGyYcQK2x",["node","animatedObjects","parentObjects","triggersToRestart"],3,1,2,2,2],["cc.SphereCollider",["node","_center"],3,1,5],["b73808StSRJNbd0es5AR9IN",["projectNumber","LanguageName","node"],1,1],["f030bDzGrBCKK8+syQwvBgi",["music","node","winSound","positiveSound","negativeSound","clickSound"],2,1,6,6,6,6],["256a2DLHJFMX4OCVjWvg9kx",["uvodniTask","checkpointLock","remoteName","elevatorScript","node","consequencesToResolve"],-1,1,2],["cc.MountedComponentsInfo",["components","targetInfo"],2,4],["cc.PlaneCollider",["node"],3,1],["cc.SphereLight",["_colorTemperature","_size","_luminanceHDR","_luminanceLDR","_range","node","_staticSettings"],-2,1,4],["cc.StaticLightSettings",[],3],["cc.SkinnedMeshRenderer",["node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,3,4,1,6,6],["72037swBQFP+I/bBAPFw7A4",["remoteName","node","consequencesToResolve"],2,1,2],["eedb2g3xVZEWIqZb6Z83o1q",["node","objectsToAnimate"],3,1,2],["cc.DirectionalLight",["_illuminanceLDR","node","_staticSettings"],2,1,4],["7a069foXapGS45UrAZzI+gH",["node"],3,1]],[[57,1],[28,0,1,2,3],[15,2,3,4,5,1],[11,2,0,1,4,4],[0,0,6,7,8,10,9,11,2],[0,0,6,7,8,9,2],[40,0,2],[13,0,1,1],[0,0,6,7,2],[60,0,1,2,2],[7,2,3,1],[3,2,7,2],[0,0,6,8,10,11,2],[11,0,1,4,3],[0,0,6,8,2],[1,0,5,4,6,9,8,10,2],[14,1,2,3,1],[29,0,1,2,3,4],[93,0,1,2,3,4,5,1],[59,0,1,2,3],[0,0,2,6,7,8,9,3],[22,0,1,2],[1,0,1,2,5,4,7,6,4],[7,0,2,3,2],[0,0,6,2],[5,1,0,2,3,3],[0,4,5,6,13,3],[0,0,4,3,6,7,4],[23,0,3,4,5,2],[25,0,1,2,4,5,3,6,7,8,2],[9,0,1,2,3,4,7,8,6],[24,0,1],[18,0,1,2,3,4],[79,0,1,2],[1,0,5,4,7,2],[15,0,1,2,3,4,5,3],[7,0,2,4,3,2],[16,0,1,2,3],[0,0,6,7,8,2],[4,0,5,4,6,7,2],[7,1,0,2,3,3],[95,0,1,1],[13,0,1],[0,0,6,7,8,10,11,2],[1,0,5,4,2],[3,1,2,5,7,4],[3,1,0,3,7,8,9,4],[3,0,3,4,7,8,4],[5,2,1],[18,0,1,3],[31,0,1,2,4],[4,0,1,5,4,3],[3,7,1],[14,0,1,2,3,2],[5,0,2,3,2],[5,2,3,1],[5,0,2,2],[73,0,1],[74,0,1,2,3,4,5,1],[92,1],[0,0,1,6,7,3],[0,0,7,8,9,2],[0,0,2,6,7,8,3],[0,0,2,1,6,7,8,4],[1,0,1,5,4,6,8,3],[1,0,5,4,6,2],[34,0,1],[3,1,2,7,3],[3,1,7,2],[62,0,1,2,3],[26,0,1,2,3,3],[91,0,1,2,3,4,5,6,6],[11,3,0,1,4,4],[0,0,2,6,7,3],[0,0,2,6,7,8,10,9,11,3],[1,0,5,4,6,8,2],[15,0,2,3,4,5,2],[61,0,1,2,2],[81,0,1,2],[82,0,1,1],[12,0,1,3],[30,0,1,2,4],[0,0,6,8,10,9,11,2],[0,0,2,6,7,8,10,11,3],[0,0,6,7,10,9,11,2],[0,0,3,6,7,8,3],[1,0,5,4,7,6,2],[4,0,2,3,5,8,4,6,9,7,10,4],[8,0,1,3,2,6,4,7,2],[8,0,1,3,2,4,2],[33,0,1,2,3,4,2],[22,0,2],[13,0,1,2,1],[6,0,1,2,7,4],[39,0,1,2,3,4,2],[3,0,7,2],[65,0,1],[19,1,2,2],[26,0,1,2,4,3],[84,0,1,2,3,1],[27,0,1,2,4],[12,0,2],[12,0,2,3,1,5],[32,0,2],[0,0,2,1,12,7,9,4],[0,0,6,8,9,2],[0,0,1,12,7,9,3],[0,0,3,7,8,9,3],[0,0,3,6,7,8,9,3],[0,0,3,6,7,3],[0,0,1,6,7,8,10,9,11,3],[0,0,2,1,6,7,8,9,4],[0,0,2,1,6,7,9,4],[0,0,1,6,7,9,3],[0,0,1,6,7,8,9,3],[0,0,6,7,9,2],[0,0,1,6,7,10,11,3],[0,0,1,6,7,8,3],[1,0,2,3,4,7,6,4],[1,0,4,7,2],[1,0,4,2],[1,0,4,7,6,9,8,10,2],[1,0,3,5,4,7,6,3],[1,0,2,5,4,7,3],[1,0,5,4,7,6,9,8,10,2],[1,0,3,5,4,7,3],[1,0,1,5,4,7,6,3],[1,0,2,4,7,3],[1,0,2,5,4,7,6,3],[1,0,4,7,6,8,2],[1,0,1,5,4,6,9,8,10,3],[1,0,3,5,4,7,6,9,8,10,3],[1,0,1,3,5,4,7,6,9,8,10,4],[1,0,1,5,4,6,3],[4,0,4,6,7,2],[4,0,1,5,4,6,7,3],[4,0,2,5,4,6,7,3],[4,0,2,1,5,4,6,4],[4,0,1,5,4,6,3],[8,0,1,5,2,2],[8,0,1,3,2],[35,0,1,1],[6,0,3,1,4,2,7,6],[6,0,5,6,7,4],[6,0,3,2,7,4],[6,0,1,7,3],[36,0,1,2,1],[37,0,1],[38,0,1,2,3,4,3],[23,0,1,2,2],[41,0,1,2,3,4,1],[42,0,1,2,3,4,5,3],[43,0,1,2,3],[44,0,1,2,3,3],[45,1],[46,1],[47,0,1],[3,0,3,4,5,7,9,5],[3,1,7,8,2],[3,2,0,6,4,5,7,6],[48,0,1,2,3,2],[49,0,1,2],[50,0,1,2,3,4,5],[51,0,1,2,3,4],[14,1,2,1],[52,0,1],[53,0,1],[54,0,1,2],[55,0,1,2,3,4,1],[56,0,1,2,3,4,2],[7,2,4,3,1],[58,0,1,2,3,4,5,1],[16,0,2,2],[16,0,3,2,2],[63,0,1,2,2],[64,0,1,2,2],[24,0,1,1],[66,0,1,1],[17,0,2,1,1],[17,0,1],[17,0,1,1],[5,0,2,4,3,2],[67,0,1,2,3,4,5,3],[25,0,1,2,3,2],[18,0,1,3,3],[68,0,1],[69,0,1,2],[70,0,1,2,3,3],[71,0,1,1],[72,0,1],[75,0,1],[76,0,1,1],[77,0,1,2,3,4,5,6,4],[78,0,1,1],[19,0,2,3,2],[19,2,1],[80,0,1,2,3,4,3],[83,0,1,2,3,4,5,6],[85,0,1,1],[86,0,1,2,3],[87,0,1,2,3,4,5,2],[9,0,1,2,5,7,5],[9,0,6,1,2,3,4,7,7],[9,0,6,1,2,5,3,4,7,8,8],[88,0,1,2,3,4,5,5],[89,0,1,2],[90,0,1],[94,0,1,2,2],[20,4,5,1,6,2,0,8,9,7],[20,3,0,8,3],[20,7,1,3,2,0,8,9,6],[96,0,1,2,2],[97,0,1]],[[[[3,"domino_6",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[145,0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjige_marker",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:staklo1",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7529411911964417,0.7529411911964417,0.7529411911964417]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:lambert10",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"loptica",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0,0.07804670184850693,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"staklo",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7529411911964417,0.7529411911964417,0.7529411911964417]]],11]]],0,0,[0],[2],[0]],[[[3,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0.419},"rimLightColor",8,[4,4280942336],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[146,8]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4279566080],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[147,8]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{},{},{},{}],[[[{},"rimLightColor",8,[4,4291624879],"albedoScale",8,[1,0,0.22880001366138458,0]],{},{},{}],11,0,0,0]]],0,0,[0],[2],[61]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Metal_High",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[148,0]],[[{"name":"default_toggle_normal","rect":{"x":0,"y":0,"width":28,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[10],0,[0],[19],[149]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:SE_Egg_01_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.37264150381088257,0.8510019183158875,1]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",3429205708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":28560,"count":7140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[1,".bin",2864929873,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":73976,"length":24576,"count":6144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":73976,"count":1321,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]],-1],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0,0]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4287823711],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[150,8]],[[{"name":"default_toggle_checkmark","rect":{"x":4,"y":5,"width":20,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[10],0,[0],[19],[151]],[[[3,"Zidovi_lifta",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.18200400471687317,0.3030860126018524,0.41840001940727234]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4278910720],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[152,8]],[[[1,".bin",1034287022,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8064,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8064,"count":168,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.02103389985859394,0.0711883082985878,-0.06027847155928612],"maxPosition",8,[1,0.02103305421769619,0.10282240062952042,-0.01821151003241539]]],-1],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.5,0.5,0.5]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_sraf",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6068595051765442},"albedoScale",8,[1,0.5160305500030518,0.5160305500030518,0.5160305500030518]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:plastika_za_vetrenjacu",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"SE_Egg_01_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.37264150381088257,0.8510019183158875,1]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0,0]]],11]]],0,0,[0],[2],[0]],[[[3,"domino_4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[153,0]],[[[3,"knjige_stranice",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.7260504364967346,0.7260504364967346,0.7260504364967346]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{},{},{},{}],[[[{"roughness":0.41,"metallic":0,"SpecularIntensity":0.462},"rimLightColor",8,[4,4278255401],"albedoScale",8,[1,0.85,0.4,0]],{},{},{}],11,0,0,0]]],0,0,[0],[2],[61]],[[[3,"metalni_deo_kod_creva",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"crveni_metal",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.5024000406265259,0.028636792674660683,0.028636792674660683]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:puma",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.1282442808151245,0.1282442808151245,0.1282442808151245]]],11]]],0,0,[0],[2],[0]],[[[72,"1",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.49053239822387695,"metallic":0.4000000059604645},"mainColor",8,[4,654311423],"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.877,"metallic":0.024},"albedoScale",8,[1,0.85,0.4,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.796,"metallic":0,"SpecularIntensity":0.509},"emissive",8,[4,4290690750]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[1,".bin",413421540,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11822979152202606,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,-0.05599062889814377,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[3,"phong7",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.058520007878541946,0.5320000052452087,0.058520007878541946]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",37109630,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11822979152202606,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,0.15216873586177826,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[1,".bin",3004859745,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11822979152202606,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,0.09984894096851349,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[1,".bin",357036703,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29856,"length":1152,"count":288,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":35616,"length":1296,"count":324,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":22560,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31008,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.028446707874536514,0.01924782805144787,-0.0703175961971283],"maxPosition",8,[1,0.026997899636626244,0.027435321360826492,-0.06729377806186676]]],-1],0,0,[],[],[]],[[[1,".bin",2551863116,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11822979152202606,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,-0.012402496300637722,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[3,"metal_za_sraf",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6068595051765442},"albedoScale",8,[1,0.5160305500030518,0.5160305500030518,0.5160305500030518]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",1885509673,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11822979152202606,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,0.04351000860333443,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[3,"staklo",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.25648853182792664,0.25648853182792664,0.25648853182792664]]],11]]],0,0,[0],[2],[0]],[[[3,"postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",2655732290,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24960,"length":4320,"count":1080,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":35136,"length":1440,"count":360,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":41184,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":64992,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24960,"count":520,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":29280,"length":5856,"count":122,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":36576,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":41760,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0096078896895051,-0.0394027903676033,-0.039402808994054794],"maxPosition",8,[1,0.0096078896895051,0.0394027903676033,0.039402808994054794]]],-1],0,0,[],[],[]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[101,0.1]],0,0,[],[],[]],[[[3,"svetlo",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929]]],11]]],0,0,[0],[2],[0]],[[[72,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.49053239822387695,"metallic":0.4000000059604645},"rimLightColor",8,[4,4278387459]],{},{}],11,0,0]]],0,0,[0],[2],[8]],[[[3,"zupcanik",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.32476919889450073},"albedoScale",8,[1,0.36079999804496765,0.36079999804496765,0.36079999804496765]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4278255380],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[154,8]],[[[3,"dugme_zuta",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{},"albedoScale",8,[1,0,0.22880001366138458,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"SE_Basket_01_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[155,0]],[[[3,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4281597696],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[156,8]],[[[3,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.5,0.5,0.5]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:SE_Egg_01_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.37264150381088257,0.8510019183158875,1]]],11]]],0,0,[0],[2],[0]],[[[3,"crveno_dugme",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]],[[[3,"SE_Egg_01_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.37264150381088257,0.8510019183158875,1]]],11]]],0,0,[0],[2],[0]],[[[3,"phong7",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.058520007878541946,0.5320000052452087,0.058520007878541946]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Zidovi_lifta",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.18200400471687317,0.3030860126018524,0.41840001940727234]]],11]]],0,0,[0],[2],[0]],[[[3,"dugme_zelena",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0.22880001366138458,0]]],11]]],0,0,[0],[2],[0]],[[[3,"puma",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.1282442808151245,0.1282442808151245,0.1282442808151245]]],11]]],0,0,[0],[2],[0]],[[[3,"blinn4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[157,0]],[[[3,"Metalna_kutija",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.10381679981946945,0.10381679981946945,0.10381679981946945]]],11]]],0,0,[0],[2],[0]],[[[3,"staklo",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.25648853182792664,0.25648853182792664,0.25648853182792664]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:crveno_dugme1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",2695955300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":50688,"length":16992,"count":4248,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":140256,"length":20448,"count":5112,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":196992,"length":15408,"count":3852,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":50688,"count":1056,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":67680,"length":72576,"count":1512,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":160704,"length":36288,"count":756,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009826974011957645,0.09677993506193161,-0.04951607808470726],"maxPosition",8,[1,0.009818719699978828,0.10182275623083115,0.0517851822078228]]],-1],0,0,[],[],[]],[[[1,".bin",447800881,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7680,"length":2256,"count":564,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":22032,"length":2880,"count":720,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43776,"length":3204,"count":801,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":49860,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7680,"count":160,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":9936,"length":12096,"count":252,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":24912,"length":18864,"count":393,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":46980,"length":2880,"count":60,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.01684812270104885,0.07744946330785751,-0.07742544263601303],"maxPosition",8,[1,0.044405899941921234,0.08744946122169495,-0.06582675129175186]]],-1],0,0,[],[],[]],[[[1,".bin",1522811731,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19968,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19968,"count":416,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-1.19209286886246e-9,-0.04088421165943146],"maxPosition",8,[1,-0.33381152153015137,0.017390582710504532,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",940233259,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27072,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27072,"count":376,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",867194477,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19104,"length":7080,"count":1770,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":30792,"length":1296,"count":324,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":36120,"length":960,"count":240,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":44376,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":91296,"length":10560,"count":2640,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":109152,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[6],"indexView":{"offset":118824,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[7],"indexView":{"offset":128496,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19104,"count":398,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":26184,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":32088,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":37080,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":46752,"length":44544,"count":928,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":101856,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":111528,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":121200,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008035371080040932,0.06943991035223007,-0.07473127543926239],"maxPosition",8,[1,0.005797766614705324,0.09624075144529343,-0.06431648135185242]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",848646038,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":113232,"length":28128,"count":7032,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":181680,"length":9600,"count":2400,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":192528,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":113232,"count":2359,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":141360,"length":40320,"count":840,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":191280,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.047646235674619675,0.004330044146627188,-0.0702376589179039],"maxPosition",8,[1,0.051877956837415695,0.08366546034812927,0.044055305421352386]]],-1],0,0,[],[],[]],[[[1,".bin",2513163551,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2112,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2112,"count":44,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.005000002216547728,-0.005000152625143528],"maxPosition",8,[1,0.004999999888241291,0.005000004544854164,0.06719166040420532]]],-1],0,0,[],[],[]],[[[1,".bin",3461409944,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14736,"length":5064,"count":1266,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14736,"count":307,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8881951570510864,0,-0.9139286875724792],"maxPosition",8,[1,1.8881951570510864,2.4960052967071533,0.9139286875724792]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",3209450487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43776,"length":11136,"count":2784,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":57216,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43776,"count":912,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":2304,"count":48,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04930315166711807,0.015927443280816078,-0.020154567435383797],"maxPosition",8,[1,-0.048407360911369324,0.08738693594932556,0.018618788570165634]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[17,"Skin-4",336663740,["joint8"],[[[7,0.3768555223941803,-0.023973900824785233,0,0,2.1820399003810627e-19,3.4300375860297503e-18,0.05612999573349953,0,-0.023973900824785233,-0.3768555223941803,2.3122391420931596e-17,0,0.00005556241740123369,-0.00005724591392208822,0.0001854064903454855,1]],8]]],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[17,"Skin-12",2123793140,["joint24"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[17,"Skin-8",1705161651,["joint20"],[[[7,2.3165734857848762e-18,0.03783251345157623,0.011905244551599026,0,-0.03966149315237999,2.42856608930389e-18,0,0,-7.289859503380695e-19,-0.011905244551599026,0.03783251345157623,0,-0.00015861252904869616,-0.000005298071755532874,-6.858879020299469e-10,1]],8]]],0,0,[],[],[]],[[[1,".bin",3425544211,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42240,"length":15792,"count":3948,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":64080,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42240,"count":880,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":58032,"length":6048,"count":126,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.039092496037483215,0.04413904249668121,0.03049764595925808],"maxPosition",8,[1,0.044274430721998215,0.05741973966360092,0.04375213757157326]]],-1],0,0,[],[],[]],[[[1,".bin",2194983785,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":55680,"length":13200,"count":3300,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":72720,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":95184,"length":5568,"count":1392,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":55680,"count":1160,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":68880,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":73296,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.04652732238173485,0.03561759367585182,-0.008000795729458332],"maxPosition",8,[1,0.04906817898154259,0.07617735117673874,0.008000795729458332]]],-1],0,0,[],[],[]],[[[1,".bin",1284067199,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9168,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9168,"count":191,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.001238237600773573,-0.0630907267332077,0.19373634457588196],"maxPosition",8,[1,0.03702419251203537,-0.012800196185708046,0.4128434658050537]]],-1],0,0,[],[],[]],[[[1,".bin",2570812089,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24960,"length":4320,"count":1080,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":35136,"length":1440,"count":360,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":41184,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":64992,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24960,"count":520,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":29280,"length":5856,"count":122,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":36576,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":41760,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.010531365871429443,0.07580400258302689,0.24036946892738342],"maxPosition",8,[1,0.029747145250439644,0.1546095907688141,0.3191750943660736]]],-1],0,0,[],[],[]],[[[1,".bin",947340331,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":98,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005000001285225153,-0.0050000762566924095,-0.003572094487026334],"maxPosition",8,[1,0.004999998025596142,0.004999999888241291,0.008315730839967728]]],-1],0,0,[],[],[]],[[[1,".bin",2934879122,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0029561445116996765,-0.0025366605259478092,-0.00006148934335215017],"maxPosition",8,[1,0.002956144278869033,0.0033756487537175417,0.004579644184559584]]],-1],0,0,[],[],[]],[[[1,".bin",1860205393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2304,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2304,"count":32,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0037253517657518387,-0.015206340700387955,-0.0005692094564437866],"maxPosition",8,[1,0.0037253517657518387,0.0058279321528971195,0.0005692094564437866]]],-1],0,0,[],[],[]],[[[1,".bin",982312996,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011010807938873768,-0.002918424317613244,-0.004999999888241291],"maxPosition",8,[1,0.0011010807938873768,0.0029184240847826004,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",1930282392,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00889818649739027,-0.0017392910085618496,-0.06286062300205231],"maxPosition",8,[1,0.00889818649739027,0.0016906464006751776,0.06218751519918442]]],-1],0,0,[],[],[]],[[[1,".bin",558705894,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":2256,"count":564,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27312,"length":2112,"count":528,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":55440,"length":5616,"count":1404,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8880,"length":18432,"count":384,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":29424,"length":26016,"count":542,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.049747370183467865,0.03323953226208687,0.035968028008937836],"maxPosition",8,[1,-0.0444096215069294,0.06047781556844711,0.05311594903469086]]],-1],0,0,[],[],[]],[[[1,".bin",2074073087,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0011010807938873768,-0.0029295748099684715,-0.004999999888241291],"maxPosition",8,[1,0.0011010807938873768,0.0029295748099684715,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",3285920611,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27504,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27504,"count":573,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.020886095240712166,-0.014030230231583118,-0.07859727740287781],"maxPosition",8,[1,0.020890560001134872,0.004655405413359404,0.06333084404468536]]],-1],0,0,[],[],[]],[[[1,".bin",3824252781,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":31296,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43008,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":11136,"count":232,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.005477966275066137,-0.17190580070018768,0.15668903291225433],"maxPosition",8,[1,0.03166261315345764,-0.14331090450286865,0.16731639206409454]]],-1],0,0,[],[],[]],[[[1,".bin",1817788306,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32832,"length":3120,"count":780,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32832,"count":456,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01320675015449524,-0.009999999776482582,-0.013173694722354412],"maxPosition",8,[1,0.013200982473790646,0.03518011048436165,0.013206329196691513]]],-1],0,0,[],[],[]],[[[17,"Skin-5",4044314396,["joint5"],[[[7,0.46528735756874084,-0.029599547386169434,0,0,2.6940711618999224e-19,4.234920304400492e-18,0.0693012997508049,0,-0.029599547386169434,-0.46528735756874084,2.854822640069153e-17,0,0.000072562150307931,-0.00011456094216555357,0.00014089021715335548,1]],8]]],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[17,"Skin-2",3959551527,["joint2"],[[[7,0.2785625457763672,0,0,0,0,2.5354012217036358e-18,0.04140624403953552,0,0,-0.2785625457763672,1.7057036639827317e-17,0,0.00004501585499383509,-0.00006198466144269332,0.0000795903179096058,1]],8]]],0,0,[],[],[]],[[[1,".bin",3444255404,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.0076829916797578335],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.005962627474218607]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",4288629793,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23232,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29232,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":28080,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0024176014121621847,-0.19041553139686584,0.275831401348114],"maxPosition",8,[1,0.03775383159518242,-0.1664370596408844,0.32367464900016785]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",2664777892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20544,"length":6168,"count":1542,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":48888,"length":10296,"count":2574,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":73008,"length":1728,"count":432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20544,"count":428,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":26712,"length":22176,"count":462,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":59184,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.004547799937427044,0.08162157237529755,-0.06974466890096664],"maxPosition",8,[1,0.017898792400956154,0.08817935734987259,-0.06814474612474442]]],-1],0,0,[],[],[]],[[[17,"Skin-6",3081330987,["joint3"],[[[7,0.3768555223941803,-0.023973900824785233,0,0,2.1820399003810627e-19,3.4300375860297503e-18,0.05612999573349953,0,-0.023973900824785233,-0.3768555223941803,2.3122391420931596e-17,0,0.00005556375253945589,-0.00008772704313741997,0.00010788707004394382,1]],8]]],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[17,"Skin-9",919080684,["joint21"],[[[7,0.06463772803544998,0,0,0,0,0.06463772803544998,0,0,0,0,0.06463772803544998,0,0.000015045813597680535,0.0004075795004609972,-0.000013117181879351847,1]],8]]],0,0,[],[],[]],[[[1,".bin",587994011,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16608,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16608,"count":346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24709157645702362,-0.004124799743294716,-0.019672952592372894],"maxPosition",8,[1,-0.14022308588027954,0.015984997153282166,0.062080807983875275]]],-1],0,0,[],[],[]],[[[1,".bin",1219366093,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":696,"count":174,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3864,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":10416,"length":1104,"count":276,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":11712,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":13752,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3672,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3888,"length":6528,"count":136,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":11520,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":11736,"length":2016,"count":42,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.06027548015117645,0.016097497195005417,-0.004443194717168808],"maxPosition",8,[1,-0.04904108867049217,0.09183453768491745,0.03308345004916191]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",1143968702,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":48,"count":12,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3600,"length":528,"count":132,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":4800,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":336,"length":3264,"count":68,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4128,"length":672,"count":14,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999422580004,-0.004999998956918716,-0.004999999888241291],"maxPosition",8,[1,0.004999999422580004,0.004999998956918716,0.005218058824539185]]],-1],0,0,[],[],[]],[[[17,"Skin-3",1744098051,["joint1"],[[[7,0.3620643615722656,0.10725777596235275,0,0,-9.762314245023e-19,3.29541228697552e-18,0.05612999573349953,0,0.10725777596235275,-0.3620643615722656,2.3122391420931596e-17,0,0.00004752405948238447,-0.000015963767509674653,-0.00018733373144641519,1]],8]]],0,0,[],[],[]],[[[17,"Skin-10",3412566426,["joint22"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0.000006258487701416016,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[1,".bin",3510959865,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0071638887748122215,-0.04844585433602333,-0.004932573065161705],"maxPosition",8,[1,0.0071638887748122215,0.048626355826854706,0.004932570271193981]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",2711776039,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8832,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8832,"count":184,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.037294793874025345,0.061728283762931824,-0.06827620416879654],"maxPosition",8,[1,-0.01945732906460762,0.07023659348487854,-0.06721130013465881]]],-1],0,0,[],[],[]],[[[1,".bin",862727803,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":528,"count":132,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27024,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":35904,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":68,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3792,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01810009405016899,0.14261959493160248,0.3184216618537903],"maxPosition",8,[1,0.0567425936460495,0.21483957767486572,0.41185319423675537]]],-1],0,0,[],[],[]],[[[1,".bin",1448732428,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5952,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5952,"count":124,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0028906166553497314,0.11360707134008408,0.15679633617401123],"maxPosition",8,[1,0.03867657110095024,0.11710509657859802,0.2839258313179016]]],-1],0,0,[],[],[]],[[[1,".bin",614776939,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35040,"length":9504,"count":2376,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":48576,"length":960,"count":240,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":53568,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35040,"count":730,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":44544,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":49536,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0014491606270894408,-0.0014413261087611318,-0.005827374290674925],"maxPosition",8,[1,0.0014491606270894408,0.021129202097654343,0.005827374290674925]]],-1],0,0,[],[],[]],[[[1,".bin",1711152632,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":151536,"length":26328,"count":6582,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":151536,"count":3157,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7617925405502319,-0.0007172699552029371,-1.5433697700500488],"maxPosition",8,[1,0.7617925405502319,1.650444746017456,1.5585029125213623]]],-1],0,0,[],[],[]],[[[1,".bin",3507945259,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7056,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7056,"count":98,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.007804504595696926,-0.034394241869449615],"maxPosition",8,[1,0.10667912662029266,0.0027525329496711493,0.009510612115263939]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3277897326,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11015155911445618,0.0003752934862859547,0.07499369233846664],"maxPosition",8,[1,0.10817761719226837,0.13786427676677704,0.07674504816532135]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[17,"Skin-11",3412566426,["joint23"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0.000006258487701416016,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[1,".bin",3427705462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29856,"length":1152,"count":288,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":35616,"length":1296,"count":324,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":22560,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31008,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.028446707874536514,0.01924782805144787,-0.0703175961971283],"maxPosition",8,[1,0.026997899636626244,0.027435321360826492,-0.06729377806186676]]],-1],0,0,[],[],[]],[[[1,".bin",1688731812,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13248,"length":3072,"count":768,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":63120,"length":16272,"count":4068,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":103584,"length":5760,"count":1440,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13248,"count":276,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":16320,"length":46800,"count":975,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":79392,"length":24192,"count":504,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05222122743725777,0.06955025345087051,-0.07088495045900345],"maxPosition",8,[1,-0.040352713316679,0.097151018679142,0.006382145918905735]]],-1],0,0,[],[],[]],[[[1,".bin",4105770502,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":38976,"length":2880,"count":720,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":63840,"length":6240,"count":1560,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":92064,"length":6240,"count":1560,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":120240,"length":10800,"count":2700,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":164448,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":11520,"count":240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":41856,"length":21984,"count":458,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":70080,"length":21984,"count":458,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":98304,"length":21936,"count":457,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":131040,"length":33408,"count":696,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.04424136504530907,0.07586792856454849,-0.07000668346881866],"maxPosition",8,[1,0.04907628521323204,0.08745512366294861,0.0034854880068451166]]],-1],0,0,[],[],[]],[[[1,".bin",3084585289,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1248,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.03492877632379532,0.07143770158290863,0.03191671520471573],"maxPosition",8,[1,0.03492877632379532,0.0823136493563652,0.04271335527300835]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[1,".bin",727553163,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":672,"count":168,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3936,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3744,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.004999999888241291]]],-1],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_tastere1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjige_stranice",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.7260504364967346,0.7260504364967346,0.7260504364967346]]],11]]],0,0,[0],[2],[0]],[[[81,"../Effect/TestEffect4",[{"hash":1925803294,"name":"../Effect/TestEffect4|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"rimColor","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"fogParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_view_normal","type":15,"count":1,"stageFlags":17,"location":7,"defines":[]},{"name":"v_view_position","type":15,"count":1,"stageFlags":17,"location":8,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":10,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":11,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\nlayout(location = 7) out vec3 v_view_normal;\nlayout(location = 8) out vec3 v_view_position;\n#if USE_NORMAL_MAP\n  layout(location = 9) out vec3 v_tangent;\n  layout(location = 10) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 11) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 11) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 8) in vec3 v_view_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\nlayout(location = 7) in vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 9) in vec3 v_tangent;\n  layout(location = 10) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (0.4);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec3 v_view_normal;\nout vec3 v_view_position;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec3 v_view_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\nin vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (0.4);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_view_normal;\nvarying vec3 v_view_position;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 rimColor;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 miscParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec3 v_view_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\nvarying vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (0.4);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":225,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":68}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":2061923972,"name":"../Effect/TestEffect4|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"rimColor","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"fogParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":186,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":68}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"../Effect/TestEffect4|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"deferred","propertyIndex":0,"program":"../Effect/TestEffect4|standard-vs|standard-fs","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Effect/TestEffect4|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Effect/TestEffect4|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"../Effect/TestEffect4|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Effect/TestEffect4|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Effect/TestEffect4|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4279566080],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[158,8]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:crveno_dugme1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]],[[[3,"knjiga_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0,0.42480000853538513]]],11]]],0,0,[0],[2],[0]],[[[3,"crveni_metal",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.5024000406265259,0.028636792674660683,0.028636792674660683]]],11]]],0,0,[0],[2],[0]],[[[3,"Metalna_kutija",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.10381679981946945,0.10381679981946945,0.10381679981946945]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.36399999260902405]]],11]]],0,0,[0],[2],[0]],[[[3,"dugme_plava",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0,0.800000011920929]]],11]]],0,0,[0],[2],[0]],[[[3,"dugme_plava",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0,0.800000011920929]]],11]]],0,0,[0],[2],[0]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[21],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"dugme_zuta",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0]]],11]]],0,0,[0],[2],[0]],[[[3,"knjiga_3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0.1679999977350235,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjige_marker",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[3,"metalni_deo_kod_creva",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[80,0.3,0.3]],0,0,[],[],[]],[[[3,"postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[50,"Game Fail Sound",".mp3",0.7047],-1],0,0,[],[],[]],[[[3,"postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",471307461,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16704,"length":2544,"count":636,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16704,"count":348,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.018350599333643913,0.03279144689440727,-0.11744363605976105],"maxPosition",8,[1,0.018041443079710007,0.05689271539449692,0.08607485890388489]]],-1],0,0,[],[],[]],[[[1,".bin",2299253969,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10944,"length":1824,"count":456,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10944,"count":228,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010368469171226025,0.03042711690068245,-0.049359358847141266],"maxPosition",8,[1,0.010075997561216354,0.06460106372833252,0.06652068346738815]]],-1],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0.1679999977350235,0]]],11]]],0,0,[0],[2],[0]],[[[50,"Positive Game Sound",".mp3",2.51095],-1],0,0,[],[],[]],[[[3,"staklo",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.25648853182792664,0.25648853182792664,0.25648853182792664]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_4",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.36399999260902405]]],11]]],0,0,[0],[2],[0]],[[[50,"Tap Hit 02",".mp3",1.253875],-1],0,0,[],[],[]],[[[3,"blinn1",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0,0.1679999977350235,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:plastika_za_vetrenjacu",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"staklo",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7529411911964417,0.7529411911964417,0.7529411911964417]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",830648367,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.00357209425419569],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.007912141270935535]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3112759130,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34160,"length":5700,"count":1425,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":124476,"length":15648,"count":3912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34160,"count":610,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":39860,"length":84616,"count":1511,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.0165786743164062,-0.0006734488997608423,-0.9997460246086121],"maxPosition",8,[1,1.0018131732940674,2.0643837451934814,1.0476346015930176]]],-1],0,0,[],[],[]],[[[1,".bin",3695778230,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21072,"length":9120,"count":2280,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21072,"count":439,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000002570450306,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",529685519,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12096,"length":2880,"count":720,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12096,"count":252,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.015072440728545189,-0.1475001722574234,0.0852043628692627],"maxPosition",8,[1,0.04714599624276161,-0.11558933556079865,0.090562604367733]]],-1],0,0,[],[],[]],[[[1,".bin",872712294,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26208,"length":10560,"count":2640,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26208,"count":546,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013201858848333359,-0.0032025098334997892,-0.00001588732993695885],"maxPosition",8,[1,0.000015884748790995218,0.0032025089021772146,0.013201857917010784]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3625439110,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.00357209425419569],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.006982333492487669]]],-1],0,0,[],[],[]],[[[1,".bin",743016937,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00648842379450798,-0.004999999888241291,-0.00357209425419569],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.007779540028423071]]],-1],0,0,[],[],[]],[[[1,".bin",717046483,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15504,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15504,"count":323,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",1314131722,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3120636424,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":31296,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43008,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":11136,"count":232,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.026018952950835228,-0.15754064917564392,-0.11890943348407745],"maxPosition",8,[1,0.052203599363565445,-0.12894576787948608,-0.10828205943107605]]],-1],0,0,[],[],[]],[[[1,".bin",3665129527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.0026887364219874144,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",2623209351,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27456,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27456,"count":572,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010270417667925358,-0.00795883871614933,-0.0544593520462513],"maxPosition",8,[1,0.010270417667925358,0.0016906464006751776,0.0544593520462513]]],-1],0,0,[],[],[]],[[[1,".bin",2145105055,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23232,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":36720,"length":1704,"count":426,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":28080,"length":8640,"count":180,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.017892977222800255,0.03308374062180519,-0.1170274168252945],"maxPosition",8,[1,0.017892977222800255,0.05731842666864395,0.08572984486818314]]],-1],0,0,[],[],[]],[[[1,".bin",4022452340,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0071638887748122215,-0.04844585433602333,-0.004932573065161705],"maxPosition",8,[1,0.0071638887748122215,0.048626355826854706,0.004932570271193981]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",2209370492,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":2448,"count":612,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0024176014121621847,-0.19125699996948242,0.06404713541269302],"maxPosition",8,[1,0.03775383159518242,-0.13420438766479492,0.11189040541648865]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3628079390,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0029561445116996765,-0.0025366605259478092,-0.00006148934335215017],"maxPosition",8,[1,0.002956144278869033,0.0033756487537175417,0.004579644184559584]]],-1],0,0,[],[],[]],[[[1,".bin",3680725671,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":49056,"length":4320,"count":1080,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":49056,"count":1022,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1880390644073486,-3.0517577442878974e-7,-1.175478458404541],"maxPosition",8,[1,1.199184536933899,1.3212045431137085,1.1754778623580933]]],-1],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Srebrni_plafon",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6433210968971252},"albedoScale",8,[1,0.6412214040756226,0.6412214040756226,0.6412214040756226]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0.1679999977350235,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Books_5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[159,0]],[[[3,"domino_7",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[160,0]],[[[50,"Lift",".mp3",30.040816],-1],0,0,[],[],[]],[[[3,"knjige_marker",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",1436202317,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",1079360467,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14736,"length":5064,"count":1266,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14736,"count":307,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8881951570510864,0,-0.9139286875724792],"maxPosition",8,[1,1.8881951570510864,2.4960052967071533,0.9139286875724792]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",196897980,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5952,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5952,"count":124,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0028906166553497314,0.11360707134008408,0.15679633617401123],"maxPosition",8,[1,0.03867657110095024,0.11710509657859802,0.2839258313179016]]],-1],0,0,[],[],[]],[[[1,".bin",3212422043,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.001238237600773573,-0.0630907267332077,0.19373634457588196],"maxPosition",8,[1,0.03702419251203537,-0.012800196185708046,0.4128434658050537]]],-1],0,0,[],[],[]],[[[1,".bin",947340331,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":98,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005000001285225153,-0.0050000762566924095,-0.003572094487026334],"maxPosition",8,[1,0.004999998025596142,0.004999999888241291,0.008315730839967728]]],-1],0,0,[],[],[]],[[[1,".bin",1436202317,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",4022452340,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0071638887748122215,-0.04844585433602333,-0.004932573065161705],"maxPosition",8,[1,0.0071638887748122215,0.048626355826854706,0.004932570271193981]]],-1],0,0,[],[],[]],[[[1,".bin",3695778230,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21072,"length":9120,"count":2280,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21072,"count":439,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000002570450306,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",3628079390,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0029561445116996765,-0.0025366605259478092,-0.00006148934335215017],"maxPosition",8,[1,0.002956144278869033,0.0033756487537175417,0.004579644184559584]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",3322160211,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":151536,"length":26328,"count":6582,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":151536,"count":3157,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7617925405502319,-0.0007172699552029371,-1.5433697700500488],"maxPosition",8,[1,0.7617925405502319,1.650444746017456,1.5585029125213623]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",4101051523,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23232,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29232,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":28080,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0024176014121621847,-0.19041553139686584,0.275831401348114],"maxPosition",8,[1,0.03775383159518242,-0.1664370596408844,0.32367464900016785]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",4204363225,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":31296,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43008,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":11136,"count":232,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.005477966275066137,-0.17190580070018768,0.15668903291225433],"maxPosition",8,[1,0.03166261315345764,-0.14331090450286865,0.16731639206409454]]],-1],0,0,[],[],[]],[[[1,".bin",1954205643,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2256,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2256,"count":47,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.005000002216547728,-0.005000152625143528],"maxPosition",8,[1,0.004999999888241291,0.005000004544854164,0.06719166040420532]]],-1],0,0,[],[],[]],[[[1,".bin",3444255404,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.0076829916797578335],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.005962627474218607]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",782694486,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":5568,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5184,"length":384,"count":8,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01943560130894184,-0.1944577842950821,0.15435469150543213],"maxPosition",8,[1,0.058335643261671066,0.29511064291000366,0.4141368567943573]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",1121342064,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":528,"count":132,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27120,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":36000,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":70,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3888,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31968,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01810009405016899,0.14261959493160248,0.3184216618537903],"maxPosition",8,[1,0.0567425936460495,0.21483957767486572,0.41185319423675537]]],-1],0,0,[],[],[]],[[[1,".bin",138527097,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27504,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27504,"count":573,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.020886095240712166,-0.014030230231583118,-0.07859727740287781],"maxPosition",8,[1,0.020890560001134872,0.004655405413359404,0.06333084404468536]]],-1],0,0,[],[],[]],[[[1,".bin",2601792778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",392889886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",1436202317,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3336174728,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00889818649739027,-0.0017392910085618496,-0.06286062300205231],"maxPosition",8,[1,0.00889818649739027,0.0016906464006751776,0.06218751519918442]]],-1],0,0,[],[],[]],[[[3,"postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",4236963089,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29088,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29088,"count":606,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01476898044347763,0.03876693174242973,-0.053857941180467606],"maxPosition",8,[1,0.014768976718187332,0.05264376103878021,0.06954120099544525]]],-1],0,0,[],[],[]],[[[1,".bin",2968772863,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7488,"length":1392,"count":348,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":32112,"length":4848,"count":1212,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7488,"count":156,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8880,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.018350599333643913,0.03279144689440727,-0.11744363605976105],"maxPosition",8,[1,0.018041443079710007,0.05731842666864395,0.08607485890388489]]],-1],0,0,[],[],[]],[[[3,"metal_za_sraf",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6068595051765442},"albedoScale",8,[1,0.5160305500030518,0.5160305500030518,0.5160305500030518]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_tastere1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Metalna_kutija",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.10381679981946945,0.10381679981946945,0.10381679981946945]]],11]]],0,0,[0],[2],[0]],[[[3,"skale",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[161,0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Metal_High",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[162,0]],[[[13,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:SE_Vessels_01a_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[163,0]],[[[3,"Manmade04Diffuse",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"HAS_SECOND_UV":true,"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[164,0]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"zuti_metal",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.7671999931335449,0.7297734618186951,0]]],11]]],0,0,[0],[2],[0]],[[[3,"crveno_dugme",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.877,"metallic":0.04},"albedoScale",8,[1,0.85,0.4,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjige_stranice",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.7260504364967346,0.7260504364967346,0.7260504364967346]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"roughness":0.638,"metallic":0,"SpecularIntensity":0.514},"rimLightColor",8,[4,4281597696],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[165,8]],[[[3,"Srebrni_plafon",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6433210968971252},"albedoScale",8,[1,0.6412214040756226,0.6412214040756226,0.6412214040756226]]],11]]],0,0,[0],[2],[0]],[[[3,"domino_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[166,0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Metalna_kutija",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.10381679981946945,0.10381679981946945,0.10381679981946945]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_sraf",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6068595051765442},"albedoScale",8,[1,0.5160305500030518,0.5160305500030518,0.5160305500030518]]],11]]],0,0,[0],[2],[0]],[[[50,"Win Game Sound",".mp3",3.448163],-1],0,0,[],[],[]],[[[3,"Zidovi_lifta",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.18200400471687317,0.3030860126018524,0.41840001940727234]]],11]]],0,0,[0],[2],[0]],[[[3,"skale",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[167,0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:lambert10",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"domina_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[168,0]],[[[81,"../Effect/TestEffect3",[{"hash":780060800,"name":"../Effect/TestEffect3|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"rimColor","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"fogParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_view_normal","type":15,"count":1,"stageFlags":17,"location":7,"defines":[]},{"name":"v_view_position","type":15,"count":1,"stageFlags":17,"location":8,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":10,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":11,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\nlayout(location = 7) out vec3 v_view_normal;\nlayout(location = 8) out vec3 v_view_position;\n#if USE_NORMAL_MAP\n  layout(location = 9) out vec3 v_tangent;\n  layout(location = 10) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 11) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 11) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 8) in vec3 v_view_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\nlayout(location = 7) in vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 9) in vec3 v_tangent;\n  layout(location = 10) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (1);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec3 v_view_normal;\nout vec3 v_view_position;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec3 v_view_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\nin vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (1);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_view_normal;\nvarying vec3 v_view_position;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n      vec4 normal = vec4(In.normal,0.0);\n  v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 rimColor;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 miscParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec3 v_view_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\nvarying vec3 v_view_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  int delilac = 2;\n  highp float legitKolikoPutaFloat = cc_time.x / float(delilac);\n  highp int legitKolikoPutaInt = int(legitKolikoPutaFloat);\n  highp float legitOstatak = cc_time.x - float( legitKolikoPutaInt * delilac );\n  highp float finalOstakat = legitOstatak;\n  if( legitOstatak > float(float(delilac) / float(2)))\n    finalOstakat = float(delilac) - legitOstatak;\n  highp float finalSkalirano = finalOstakat / float( float(delilac));\n  float mnozitelj = float (1);\n  float fRim = finalSkalirano * mnozitelj ;\n  s.albedo.rgb = mix(s.albedo.rgb,rimColor.rgb,fRim);\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":225,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":68}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":2061923972,"name":"../Effect/TestEffect3|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"rimColor","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"fogParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 rimColor;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 fogParams;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":186,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":68}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"../Effect/TestEffect3|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"deferred","propertyIndex":0,"program":"../Effect/TestEffect3|standard-vs|standard-fs","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Effect/TestEffect3|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Effect/TestEffect3|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"../Effect/TestEffect3|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Effect/TestEffect3|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"rimLightColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Rim Color","type":"color"},"handleInfo":["rimColor",0,16]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"rimColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0,0,0]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Effect/TestEffect3|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[1,".bin",3427705462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5664,"count":1416,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29856,"length":1152,"count":288,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":35616,"length":1296,"count":324,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":22560,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31008,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.028446707874536514,0.01924782805144787,-0.0703175961971283],"maxPosition",8,[1,0.026997899636626244,0.027435321360826492,-0.06729377806186676]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",848646038,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":113232,"length":28128,"count":7032,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":181680,"length":9600,"count":2400,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":192528,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":113232,"count":2359,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":141360,"length":40320,"count":840,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":191280,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.047646235674619675,0.004330044146627188,-0.0702376589179039],"maxPosition",8,[1,0.051877956837415695,0.08366546034812927,0.044055305421352386]]],-1],0,0,[],[],[]],[[[1,".bin",4021284484,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19968,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19968,"count":416,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-5.9604643443123e-10,-0.04088421165943146],"maxPosition",8,[1,-0.33381152153015137,0.017390582710504532,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3507945259,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7056,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7056,"count":98,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.007804504595696926,-0.034394241869449615],"maxPosition",8,[1,0.10667912662029266,0.0027525329496711493,0.009510612115263939]]],-1],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",1818150585,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010007739067077637,-0.01068873144686222,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",885522790,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":48,"count":12,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":4272,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":336,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999422580004,-0.004999998956918716,-0.004999999888241291],"maxPosition",8,[1,0.004999999422580004,0.004999998956918716,0.005218058824539185]]],-1],0,0,[],[],[]],[[[1,".bin",4205780178,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.002797838533297181,-0.0008585971663706005,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.00497825164347887,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",947340331,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":98,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005000001285225153,-0.0050000762566924095,-0.003572094487026334],"maxPosition",8,[1,0.004999998025596142,0.004999999888241291,0.008315730839967728]]],-1],0,0,[],[],[]],[[[1,".bin",3461409944,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14736,"length":5064,"count":1266,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14736,"count":307,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8881951570510864,0,-0.9139286875724792],"maxPosition",8,[1,1.8881951570510864,2.4960052967071533,0.9139286875724792]]],-1],0,0,[],[],[]],[[[17,"Skin-4",336663740,["joint8"],[[[7,0.3768555223941803,-0.023973900824785233,0,0,2.1820399003810627e-19,3.4300375860297503e-18,0.05612999573349953,0,-0.023973900824785233,-0.3768555223941803,2.3122391420931596e-17,0,0.00005556241740123369,-0.00005724591392208822,0.0001854064903454855,1]],8]]],0,0,[],[],[]],[[[1,".bin",3444255404,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.0076829916797578335],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.005962627474218607]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",1930282392,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00889818649739027,-0.0017392910085618496,-0.06286062300205231],"maxPosition",8,[1,0.00889818649739027,0.0016906464006751776,0.06218751519918442]]],-1],0,0,[],[],[]],[[[17,"Skin-12",2123793140,["joint24"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[17,"Skin-8",1705161651,["joint20"],[[[7,2.3165734857848762e-18,0.03783251345157623,0.011905244551599026,0,-0.03966149315237999,2.42856608930389e-18,0,0,-7.289859503380695e-19,-0.011905244551599026,0.03783251345157623,0,-0.00015861252904869616,-0.000005298071755532874,-6.858879020299469e-10,1]],8]]],0,0,[],[],[]],[[[1,".bin",816596449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":66816,"length":15840,"count":3960,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":86496,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":108960,"length":5568,"count":1392,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":66816,"count":1392,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":82656,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":87072,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.04652732238173485,0.03561759367585182,-0.008000795729458332],"maxPosition",8,[1,0.04906817898154259,0.07617735117673874,0.008000795729458332]]],-1],0,0,[],[],[]],[[[17,"Skin-0",3667605050,["joint19","joint18","joint17"],[[[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,0.00285159470513463,0.0035006555262953043,0.0000669373621349223,1],[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,0.00285159470513463,-0.003282088553532958,0.0000669373621349223,1],[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,-0.0032011198345571756,-0.00015018471458461136,0.0000669373621349223,1]],8,8,8]]],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",447800881,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7680,"length":2256,"count":564,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":22032,"length":2880,"count":720,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43776,"length":3204,"count":801,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":49860,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7680,"count":160,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":9936,"length":12096,"count":252,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":24912,"length":18864,"count":393,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":46980,"length":2880,"count":60,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.01684812270104885,0.07744946330785751,-0.07742544263601303],"maxPosition",8,[1,0.044405899941921234,0.08744946122169495,-0.06582675129175186]]],-1],0,0,[],[],[]],[[[1,".bin",4288629793,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23232,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29232,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":28080,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0024176014121621847,-0.19041553139686584,0.275831401348114],"maxPosition",8,[1,0.03775383159518242,-0.1664370596408844,0.32367464900016785]]],-1],0,0,[],[],[]],[[[1,".bin",1448732428,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5952,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5952,"count":124,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0028906166553497314,0.11360707134008408,0.15679633617401123],"maxPosition",8,[1,0.03867657110095024,0.11710509657859802,0.2839258313179016]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[1,".bin",2093750721,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13248,"length":3072,"count":768,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":61200,"length":15576,"count":3894,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":100968,"length":5760,"count":1440,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13248,"count":276,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":16320,"length":44880,"count":935,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":76776,"length":24192,"count":504,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05222122743725777,0.06955025345087051,-0.07088495045900345],"maxPosition",8,[1,-0.040352713316679,0.097151018679142,-0.049956291913986206]]],-1],0,0,[],[],[]],[[[1,".bin",862727803,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":528,"count":132,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27024,"length":4848,"count":1212,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":35904,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":68,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3792,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01810009405016899,0.14261959493160248,0.3184216618537903],"maxPosition",8,[1,0.0567425936460495,0.21483957767486572,0.41185319423675537]]],-1],0,0,[],[],[]],[[[1,".bin",2664777892,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20544,"length":6168,"count":1542,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":48888,"length":10296,"count":2574,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":73008,"length":1728,"count":432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20544,"count":428,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":26712,"length":22176,"count":462,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":59184,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.004547799937427044,0.08162157237529755,-0.06974466890096664],"maxPosition",8,[1,0.017898792400956154,0.08817935734987259,-0.06814474612474442]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",3426696285,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":38976,"length":2880,"count":720,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":63840,"length":6240,"count":1560,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":92064,"length":6240,"count":1560,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":120240,"length":10800,"count":2700,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":164448,"length":7920,"count":1980,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":11520,"count":240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":41856,"length":21984,"count":458,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":70080,"length":21984,"count":458,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":98304,"length":21936,"count":457,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":131040,"length":33408,"count":696,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.04424136504530907,0.07586792856454849,-0.07000668346881866],"maxPosition",8,[1,0.04907628521323204,0.08745512366294861,0.0034854880068451166]]],-1],0,0,[],[],[]],[[[1,".bin",2695955300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":50688,"length":16992,"count":4248,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":140256,"length":20448,"count":5112,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":196992,"length":15408,"count":3852,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":50688,"count":1056,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":67680,"length":72576,"count":1512,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":160704,"length":36288,"count":756,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009826974011957645,0.09677993506193161,-0.04951607808470726],"maxPosition",8,[1,0.009818719699978828,0.10182275623083115,0.0517851822078228]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[1,".bin",2258662645,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010059913620352745,-0.015333427116274834,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",2513163551,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2112,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2112,"count":44,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.005000002216547728,-0.005000152625143528],"maxPosition",8,[1,0.004999999888241291,0.005000004544854164,0.06719166040420532]]],-1],0,0,[],[],[]],[[[1,".bin",122723692,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":5376,"length":24,"count":6,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":5592,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5184,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5400,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01943560130894184,-0.1944577842950821,0.15435469150543213],"maxPosition",8,[1,0.058335643261671066,0.29511064291000366,0.4141368567943573]]],-1],0,0,[],[],[]],[[[17,"Skin-5",4044314396,["joint5"],[[[7,0.46528735756874084,-0.029599547386169434,0,0,2.6940711618999224e-19,4.234920304400492e-18,0.0693012997508049,0,-0.029599547386169434,-0.46528735756874084,2.854822640069153e-17,0,0.000072562150307931,-0.00011456094216555357,0.00014089021715335548,1]],8]]],0,0,[],[],[]],[[[1,".bin",3277897326,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11015155911445618,0.0003752934862859547,0.07499369233846664],"maxPosition",8,[1,0.10817761719226837,0.13786427676677704,0.07674504816532135]]],-1],0,0,[],[],[]],[[[1,".bin",1489030814,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":25344,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25344,"count":352,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.11822973191738129,0.02894875966012478,0.13147962093353271],"maxPosition",8,[1,0.15163284540176392,0.04894876107573509,0.15147961676120758]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[17,"Skin-2",3959551527,["joint2"],[[[7,0.2785625457763672,0,0,0,0,2.5354012217036358e-18,0.04140624403953552,0,0,-0.2785625457763672,1.7057036639827317e-17,0,0.00004501585499383509,-0.00006198466144269332,0.0000795903179096058,1]],8]]],0,0,[],[],[]],[[[1,".bin",3584754758,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":41760,"length":9600,"count":2400,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":41760,"count":580,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.012999994680285454,-0.003000002121552825,-0.012999987229704857],"maxPosition",8,[1,0.013000000268220901,0.003119652159512043,0.011819873005151749]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",614776939,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35040,"length":9504,"count":2376,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":48576,"length":960,"count":240,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":53568,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35040,"count":730,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":44544,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":49536,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0014491606270894408,-0.0014413261087611318,-0.005827374290674925],"maxPosition",8,[1,0.0014491606270894408,0.021129202097654343,0.005827374290674925]]],-1],0,0,[],[],[]],[[[17,"Skin-6",3081330987,["joint3"],[[[7,0.3768555223941803,-0.023973900824785233,0,0,2.1820399003810627e-19,3.4300375860297503e-18,0.05612999573349953,0,-0.023973900824785233,-0.3768555223941803,2.3122391420931596e-17,0,0.00005556375253945589,-0.00008772704313741997,0.00010788707004394382,1]],8]]],0,0,[],[],[]],[[[1,".bin",320958410,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.002797838533297181,-0.0008585971663706005,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.005000552628189325,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",4178064634,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9552,"length":1008,"count":252,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12000,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4272,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":10560,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.18799759447574615,-0.09760261327028275,-0.22098951041698456],"maxPosition",8,[1,0.1902143806219101,0.09714493155479431,0.2209404706954956]]],-1],0,0,[],[],[]],[[[1,".bin",3425544211,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42240,"length":15792,"count":3948,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":64080,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42240,"count":880,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":58032,"length":6048,"count":126,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.039092496037483215,0.04413904249668121,0.03049764595925808],"maxPosition",8,[1,0.044274430721998215,0.05741973966360092,0.04375213757157326]]],-1],0,0,[],[],[]],[[[17,"Skin-9",919080684,["joint21"],[[[7,0.06463772803544998,0,0,0,0,0.06463772803544998,0,0,0,0,0.06463772803544998,0,0.000015045813597680535,0.0004075795004609972,-0.000013117181879351847,1]],8]]],0,0,[],[],[]],[[[1,".bin",587994011,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16608,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16608,"count":346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24709157645702362,-0.004124799743294716,-0.019672952592372894],"maxPosition",8,[1,-0.14022308588027954,0.015984997153282166,0.062080807983875275]]],-1],0,0,[],[],[]],[[[1,".bin",3824252781,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5568,"count":1392,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":31296,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":43008,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":27456,"length":3840,"count":80,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31872,"length":11136,"count":232,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.005477966275066137,-0.17190580070018768,0.15668903291225433],"maxPosition",8,[1,0.03166261315345764,-0.14331090450286865,0.16731639206409454]]],-1],0,0,[],[],[]],[[[1,".bin",3568480896,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2976,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2976,"count":62,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000001639127731,-0.009999999776482582,-0.009510567411780357],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.009510565549135208]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",940233259,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27072,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27072,"count":376,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",1711152632,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":151536,"length":26328,"count":6582,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":151536,"count":3157,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7617925405502319,-0.0007172699552029371,-1.5433697700500488],"maxPosition",8,[1,0.7617925405502319,1.650444746017456,1.5585029125213623]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[1,".bin",1860205393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2304,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2304,"count":32,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0037253517657518387,-0.015206340700387955,-0.0005692094564437866],"maxPosition",8,[1,0.0037253517657518387,0.0058279321528971195,0.0005692094564437866]]],-1],0,0,[],[],[]],[[[17,"Skin-3",1744098051,["joint1"],[[[7,0.3620643615722656,0.10725777596235275,0,0,-9.762314245023e-19,3.29541228697552e-18,0.05612999573349953,0,0.10725777596235275,-0.3620643615722656,2.3122391420931596e-17,0,0.00004752405948238447,-0.000015963767509674653,-0.00018733373144641519,1]],8]]],0,0,[],[],[]],[[[1,".bin",3755421750,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":28224,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":28224,"count":392,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.013206752948462963,-0.009999999776482582,-0.013173691928386688],"maxPosition",8,[1,0.013200977817177773,0.01000000350177288,0.013206328265368938]]],-1],0,0,[],[],[]],[[[1,".bin",3286688127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14304,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14304,"count":298,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.096977949142456,0.1278609186410904,-1.093436598777771],"maxPosition",8,[1,1.096977949142456,2.71524715423584,1.093436598777771]]],-1],0,0,[],[],[]],[[[17,"Skin-10",3412566426,["joint22"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0.000006258487701416016,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[17,"Skin-7",1055802478,["joint13","joint12"],[[[7,0.18438255786895752,0,0,0,0,0.18438255786895752,0,0,0,0,0.09139558672904968,0,0.019834164530038834,-0.007197705563157797,-0.012962779961526394,1],[7,0.18438255786895752,0,0,0,0,0.18438255786895752,0,0,0,0,0.09139558672904968,0,-0.02619333565235138,-0.007197705563157797,-0.012962779961526394,1]],8,8]]],0,0,[],[],[]],[[[1,".bin",558705894,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":2256,"count":564,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27312,"length":2112,"count":528,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":55440,"length":5616,"count":1404,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8880,"length":18432,"count":384,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":29424,"length":26016,"count":542,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.049747370183467865,0.03323953226208687,0.035968028008937836],"maxPosition",8,[1,-0.0444096215069294,0.06047781556844711,0.05311594903469086]]],-1],0,0,[],[],[]],[[[1,".bin",2570812089,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24960,"length":4320,"count":1080,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":35136,"length":1440,"count":360,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":41184,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":64992,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24960,"count":520,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":29280,"length":5856,"count":122,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":36576,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":41760,"length":23232,"count":484,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.010531365871429443,0.07580400258302689,0.24036946892738342],"maxPosition",8,[1,0.029747145250439644,0.1546095907688141,0.3191750943660736]]],-1],0,0,[],[],[]],[[[1,".bin",3285920611,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27504,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27504,"count":573,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.020886095240712166,-0.014030230231583118,-0.07859727740287781],"maxPosition",8,[1,0.020890560001134872,0.004655405413359404,0.06333084404468536]]],-1],0,0,[],[],[]],[[[1,".bin",3510959865,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0071638887748122215,-0.04844585433602333,-0.004932573065161705],"maxPosition",8,[1,0.0071638887748122215,0.048626355826854706,0.004932570271193981]]],-1],0,0,[],[],[]],[[[1,".bin",727553163,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":672,"count":168,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":3936,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3744,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004999999888241291,-0.004999999888241291,-0.004999999888241291],"maxPosition",8,[1,0.004999999888241291,0.004999999888241291,0.004999999888241291]]],-1],0,0,[],[],[]],[[[1,".bin",3209450487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43776,"length":11136,"count":2784,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":57216,"length":384,"count":96,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43776,"count":912,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":54912,"length":2304,"count":48,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04930315166711807,0.015927443280816078,-0.020154567435383797],"maxPosition",8,[1,-0.048407360911369324,0.08738693594932556,0.018618788570165634]]],-1],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",1267585233,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000002570450306,-0.010000037960708141,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",3084585289,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1248,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1248,"count":26,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.03492877632379532,0.07143770158290863,0.03191671520471573],"maxPosition",8,[1,0.03492877632379532,0.0823136493563652,0.04271335527300835]]],-1],0,0,[],[],[]],[[[1,".bin",2711776039,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8832,"length":1104,"count":276,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8832,"count":184,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.037294793874025345,0.061728283762931824,-0.06827620416879654],"maxPosition",8,[1,-0.01945732906460762,0.07023659348487854,-0.06721130013465881]]],-1],0,0,[],[],[]],[[[17,"Skin-11",3412566426,["joint23"],[[[7,1.9512689378674716e-17,0.03861440345644951,0,0,-2.364450286049139e-18,1.1948076311708015e-33,0.03861440345644951,0,0.03861440345644951,-1.9512689378674716e-17,2.364450286049139e-18,0,0.000006258487701416016,-0.000007019043096079258,0.00015826808521524072,1]],8]]],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",1817788306,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32832,"length":3120,"count":780,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32832,"count":456,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01320675015449524,-0.009999999776482582,-0.013173694722354412],"maxPosition",8,[1,0.013200982473790646,0.03518011048436165,0.013206329196691513]]],-1],0,0,[],[],[]],[[[1,".bin",4245849764,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":41760,"length":9600,"count":2400,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":41760,"count":580,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.012999994680285454,-0.003000002121552825,-0.012999987229704857],"maxPosition",8,[1,0.013000000268220901,0.003119652159512043,0.011819873005151749]]],-1],0,0,[],[],[]],[[[1,".bin",807328008,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8496,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8496,"count":118,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0279365424066782,-0.007804504595696926,-0.010116379708051682],"maxPosition",8,[1,0.00994398258626461,0.004327824804931879,0.0699794664978981]]],-1],0,0,[],[],[]],[[[1,".bin",2934879122,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0029561445116996765,-0.0025366605259478092,-0.00006148934335215017],"maxPosition",8,[1,0.002956144278869033,0.0033756487537175417,0.004579644184559584]]],-1],0,0,[],[],[]],[[[1,".bin",1284067199,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9168,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9168,"count":191,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.001238237600773573,-0.0630907267332077,0.19373634457588196],"maxPosition",8,[1,0.03702419251203537,-0.012800196185708046,0.4128434658050537]]],-1],0,0,[],[],[]],[[[17,"Skin-1",3571567883,["joint16","joint15","joint14"],[[[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,0.0028037491720169783,0.0034146548714488745,-0.000050555863708723336,1],[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,0.0028037491720169783,-0.003248285036534071,-0.000050555863708723336,1],[7,0.008127999491989613,-0.3264477252960205,0,0,-0.0033044437877833843,-0.00008227509533753619,0.32653215527534485,0,-0.326431006193161,-0.00812758319079876,-0.0033054680097848177,0,-0.0031692322809249163,-0.00012673434684984386,-0.000050555863708723336,1]],8,8,8]]],0,0,[],[],[]],[[[1,".bin",138098713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3936,"length":912,"count":228,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7920,"length":720,"count":180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3936,"count":82,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4848,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005250507965683937,-0.00444868765771389,-0.019915301352739334],"maxPosition",8,[1,0.005250507965683937,0.0044486867263913155,0.0044486867263913155]]],-1],0,0,[],[],[]],[[[1,".bin",867194477,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19104,"length":7080,"count":1770,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":30792,"length":1296,"count":324,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":36120,"length":960,"count":240,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":44376,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":91296,"length":10560,"count":2640,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":109152,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[6],"indexView":{"offset":118824,"length":2376,"count":594,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[7],"indexView":{"offset":128496,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19104,"count":398,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":26184,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":32088,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":37080,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":46752,"length":44544,"count":928,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":101856,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":111528,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":121200,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008035371080040932,0.06943991035223007,-0.07473127543926239],"maxPosition",8,[1,0.005797766614705324,0.09624075144529343,-0.06431648135185242]]],-1],0,0,[],[],[]],[[[1,".bin",1817840511,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010087156668305397,-0.01775861531496048,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",3555082419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0100000761449337,-0.009999999776482582,-0.010000004433095455],"maxPosition",8,[1,0.009999999776482582,0.010000019334256649,0.010000001639127731]]],-1],0,0,[],[],[]],[[[3,"crveno_dugme",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",3301486713,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19968,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19968,"count":416,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-1.19209286886246e-9,-0.04088421165943146],"maxPosition",8,[1,-0.33381152153015137,0.017390582710504532,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",2736032364,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",3704157960,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010007739067077637,-0.01068873144686222,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",1197989400,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",1275580136,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",134310795,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",2116240938,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",1429335429,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",3872551120,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010059913620352745,-0.015333427116274834,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",1197989400,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",3932132723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":9600,"count":2400,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012999994680285454,-0.003000002121552825,-0.012999987229704857],"maxPosition",8,[1,0.013000000268220901,0.003119652159512043,0.011819873005151749]]],-1],0,0,[],[],[]],[[[1,".bin",725555427,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16608,"length":3312,"count":828,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16608,"count":346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24709157645702362,-0.004124799743294716,-0.019672952592372894],"maxPosition",8,[1,-0.14022308588027954,0.015984997153282166,0.062080807983875275]]],-1],0,0,[],[],[]],[[[1,".bin",2028575107,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",2731487777,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",1362820080,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000002570450306,-0.010000037960708141,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[[1,".bin",578363048,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",3932132723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":9600,"count":2400,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012999994680285454,-0.003000002121552825,-0.012999987229704857],"maxPosition",8,[1,0.013000000268220901,0.003119652159512043,0.011819873005151749]]],-1],0,0,[],[],[]],[[[1,".bin",196283362,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16896,"length":5808,"count":1452,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16896,"count":352,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6243593096733093,-3.0577183451896417e-7,-0.04088420793414116],"maxPosition",8,[1,-0.33381152153015137,0.017389832064509392,0.1815488189458847]]],-1],0,0,[],[],[]],[[[1,".bin",383108653,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7008,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7008,"count":146,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010087156668305397,-0.01775861531496048,-0.010000006295740604],"maxPosition",8,[1,0.010000002570450306,0.009999999776482582,0.010000001639127731]]],-1],0,0,[],[],[]],[[{"name":"default_editbox_bg","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[10],0,[0],[19],[169]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.866,"metallic":0.12},"albedoScale",8,[1,0.85,0.4,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[72,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"occlusion":0.931},"mainColor",8,[4,1242961646],"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"zuti_metal",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.7671999931335449,0.7297734618186951,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:lambert3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.13129770755767822,0.13129770755767822,0.13129770755767822]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"occlusion":0.587,"roughness":0,"metallic":0.355,"SpecularIntensity":0.634},"albedoScale",8,[1,0.6412214040756226,0.6412214040756226,0.6412214040756226]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4278255391],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[170,8]],[[[102,0,0.2,0.2,4]],0,0,[],[],[]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.5,0.5,0.5]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metalna_kutija_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.23158922791481018},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.30151134729385376,"metallic":0.4000000059604645},"mainColor",8,[4,4293847248],"albedoScale",8,[1,0.6,0.6,0.6]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[100,[{"roughness":0.6433210968971252,"metallic":0.4000000059604645},{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"metallic":0},"rimLightColor",8,[4,4280286976],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[171,8]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:SE_Vessels_01a_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[172,0]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[21],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[3,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.4000000059604645,0.4000000059604645,0.4000000059604645]]],11]]],0,0,[0],[2],[0]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0.756,"metallic":0.087,"SpecularIntensity":0.576},"albedoScale",8,[1,0.85,0.4,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"loptica_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0,0.4816000163555145,0]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"occlusion":0.671,"roughness":0.281,"metallic":0.193,"SpecularIntensity":0.377},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0,0.42480000853538513]]],11]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"occlusion":0.881,"roughness":0.884,"metallic":0,"SpecularIntensity":0.179},"albedoScale",8,[1,0.022004,0.313086,0.5284]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:lambert3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.13129770755767822,0.13129770755767822,0.13129770755767822]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:knjiga_2",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0,0,0.42480000853538513]]],11]]],0,0,[0],[2],[0]],[[[3,"Manmade02Diffuse",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"HAS_SECOND_UV":true,"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[173,0]],[[[103,"MainMenuLift2"],[104,"Lift 31. mart",false,"d1qKyB5JdDUagkAxRyJXsS",[[-14,[14,"Tasteri",-15,[1,-0.0010654397774487734,-0.00173152144998312,0]],-16,-17,-18,-19,-20,[12,"joint1",-21,[1,-0.02688072994351387,0.09013158082962036,-0.06852996349334717],[3,0,0,0.5671922700293219,0.8235854107613763],[1,0,0,69.1093307252199]],[12,"joint2",-22,[1,-0.03449458256363869,0.08878316730260849,-0.06875871121883392],[3,0,0,-0.8133672164726595,0.5817506090822059],[1,180,180,-71.14753117066084]],[12,"joint3",-23,[1,-0.03204359859228134,0.08124065399169922,-0.06882518529891968],[3,0,0,0.546222556189891,0.837640089244409],[1,0,0,66.21649699048942]],[14,"joint4",-24,[1,-0.03204359859228134,0.08124065399169922,-0.06882518529891968]],[12,"joint5",-25,[1,-0.04139240086078644,0.07756826281547546,-0.06890270113945007],[3,0,0,-0.4952303195603549,0.8687617225615714],[1,0,0,-59.36987803043956]],[12,"joint7",-26,[1,-0.04255201295018196,0.08879558742046356,-0.06890270113945007],[3,0,0,-0.22935436094866243,0.9733429904786035],[1,0,0,-26.518126535846516]],[12,"joint8",-27,[1,-0.04255201295018196,0.08879558742046356,-0.06890270113945007],[3,0,0,-0.22935436094866243,0.9733429904786035],[1,0,0,-26.518126535846516]],[12,"joint9",-28,[1,-0.01639205403625965,0.09335249662399292,-0.06679156422615051],[3,0,0,-0.030641842446133126,0.999530428497055],[1,0,0,-3.5118462021793584]],[12,"joint10",-29,[1,-0.026910552754998207,0.09388912469148636,-0.06679156422615051],[3,0,0,0.002524685276819973,0.9999968129770479],[1,0,0,0.28930792926494026]],[12,"joint11",-30,[1,-0.007476865779608488,0.09280961006879807,-0.06679156422615051],[3,0,0,-0.030641842446133126,0.999530428497055],[1,0,0,-3.5118462021793584]],[14,"joint12",-31,[1,0.017377130687236786,0.02325938642024994,-0.06866510957479477]],[14,"joint13",-32,[1,-0.023498380556702614,0.02325938642024994,-0.06866510957479477]],[14,"joint14",-33,[1,0.031992338597774506,0.06118264049291611,-0.06694421917200089]],[14,"joint15",-34,[1,0.025985386222600937,0.06430418789386749,-0.06694421917200089]],[14,"joint16",-35,[1,0.025985386222600937,0.057641249150037766,-0.06694421917200089]],[14,"joint17",-36,[1,0.03214902803301811,0.04653853550553322,-0.06706171482801437]],[14,"joint18",-37,[1,0.026156019419431686,0.04967043921351433,-0.06706171482801437]],[14,"joint19",-38,[1,0.026156019419431686,0.042887695133686066,-0.06706171482801437]],-39,-40,-41,[12,"joint20",-42,[1,0.04520349204540253,0.07687609642744064,0.037325527518987656],[3,0.8939160466645595,0,0,0.4482344269638435],[1,126.73907415091261,0,0]],-43,[14,"joint21",-44,[1,0.0009044369217008352,0.09274496138095856,-0.0646030455827713]],-45,-46,-47,[12,"joint22",-48,[1,0.022392982617020607,0.08239329606294632,-0.06684030592441559],[3,0,0,0.277759526179304,0.9606506366086728],[1,0,0,32.253063271808806]],[14,"joint23",-49,[1,0.03065444715321064,0.08239329606294632,-0.06684030592441559]],[12,"joint24",-50,[1,0.03870490938425064,0.08239329606294632,-0.06684030592441559],[3,0.0584912573157465,-0.006154460961658393,0.9819110241998854,0.1799767651187968],[1,177.97034796982825,-172.8121013408307,20.65391843277139]],[105,"Goldberg_2",-51,[1,-0.057467926293611526,0.0441877581179142,-0.04183780774474144],[1,0.14445427060127258,0.14445427060127258,0.14445427060127258]],-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,[24,"New Node",-73],[24,"New Node",-74],[24,"New Node",-75],[24,"New Node",-76],[24,"New Node",-77],[24,"New Node",-78],[24,"New Node",-79],-80,-81],1,4,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,4,1,4,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1],[[90,true,-12,[935],[[21,"TV/group1",-1],[21,"TV/group6",-2],[21,"TV",-3],[21,"Tasteri",-4],[21,"Zupcanici/Zupcanik",-5],[21,"Zupcanici/Zupcanik1",-6],[21,"Zupcanici/Zupcanik3",-7],[21,"Zupcanici/Zupcanik4",-8],[21,"Zupcanici/Zupcanik5",-9],[21,"kanister_energije",-10],[21,"Goldberg_2",-11]],936],[66,-13]],[1,152,152,152]],[106,"Lift 14. april","f5VAVaalVOXZPKleYoSj9y",[[-93,-94,-95,[82,"TV",-96,[1,0.09426812082529068,0.0641200840473175,-0.0687689557671547],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.4891984164714813,0.400407075881958,0.4891984164714813],[1,90.00000000000003,0,0]],[14,"Tasteri",-97,[1,-0.0010654397774487734,-0.00173152144998312,0]],-98,-99,-100,[12,"areaLight1",-101,[1,0,0.09846889972686768,0],[3,0.05236212659309317,0,0,0.9986281628807836],[1,6.003003018816503,0,0]],[12,"areaLight2",-102,[1,0,0.09846889972686768,0.046180885285139084],[3,0.05236212659309317,0,0,0.9986281628807836],[1,6.003003018816503,0,0]],[12,"areaLight3",-103,[1,0,0.09846889972686768,-0.04489608108997345],[3,0.05236212659309317,0,0,0.9986281628807836],[1,6.003003018816503,0,0]],[82,"areaLight4",-104,[1,0,0.14489197731018066,0.2568257451057434],[3,0.49485567972131794,0,0,0.8689751758523097],[1,8.391463279724121,8.391463279724121,8.391463279724121],[1,59.320468292288055,0,0]],-105,[12,"joint1",-106,[1,-0.02688072994351387,0.09013158082962036,-0.06852996349334717],[3,0,0,0.7558991490710866,0.6546880756769646],[1,180,180,81.79200486350575]],[12,"joint2",-107,[1,-0.03449458256363869,0.08878316730260849,-0.06875871121883392],[3,0,0,0.9334459981288721,-0.3587179512893012],[1,-180,-180,-42.042963767955385]],[12,"joint3",-108,[1,-0.03204359859228134,0.08124065399169922,-0.06882518529891968],[3,0,0,0.7392379515170933,0.6734443191807411],[1,180,180,84.66691773520276]],[14,"joint4",-109,[1,-0.03204359859228134,0.08124065399169922,-0.06882518529891968]],[12,"joint5",-110,[1,-0.04139240086078644,0.07756826281547546,-0.06890270113945007],[3,0,0,-0.6976671784005247,0.7164220182145788],[1,0,0,-88.4802795054952]],[12,"joint7",-111,[1,-0.04255201295018196,0.08879558742046356,-0.06890270113945007],[3,0,0,0.02233309606813153,0.999750585306161],[1,0,0,2.559397083613276]],[12,"joint8",-112,[1,-0.04255201295018196,0.08879558742046356,-0.06890270113945007],[3,0,0,0.02233309606813153,0.999750585306161],[1,0,0,2.559397083613276]],[12,"joint9",-113,[1,-0.01639205403625965,0.09335249662399292,-0.06679156422615051],[3,0,0,-0.030641842446133126,0.999530428497055],[1,0,0,-3.5118462021793584]],[12,"joint10",-114,[1,-0.026910552754998207,0.09388912469148636,-0.06679156422615051],[3,0,0,0.002524685276819973,0.9999968129770479],[1,0,0,0.28930792926494026]],[12,"joint11",-115,[1,-0.007476865779608488,0.09280961006879807,-0.06679156422615051],[3,0,0,-0.030641842446133126,0.999530428497055],[1,0,0,-3.5118462021793584]],[14,"joint12",-116,[1,0.01677642948925495,0.02325938642024994,-0.06866510957479477]],[14,"joint13",-117,[1,-0.023498380556702614,0.02325938642024994,-0.06866510957479477]],[14,"joint14",-118,[1,0.03214990347623825,0.06118264049291611,-0.06694421917200089]],[14,"joint15",-119,[1,0.025985386222600937,0.06430418789386749,-0.06694421917200089]],[14,"joint16",-120,[1,0.025985386222600937,0.057641249150037766,-0.06694421917200089]],[14,"joint17",-121,[1,0.03241327032446861,0.04653853550553322,-0.06706171482801437]],[14,"joint18",-122,[1,0.026156019419431686,0.04967043921351433,-0.06706171482801437]],[14,"joint19",-123,[1,0.026156019419431686,0.042887695133686066,-0.06706171482801437]],-124,-125,-126,[12,"joint20",-127,[1,0.04520349204540253,0.07687609642744064,0.037325527518987656],[3,0.893942462459818,0,0,0.4481817419432396],[1,126.7458277710853,0,0]],-128,[14,"joint21",-129,[1,0.0006816737004555762,0.09274496138095856,-0.0646030455827713]],-130,-131,-132,[12,"joint22",-133,[1,0.022392982617020607,0.08239329606294632,-0.06684030592441559],[3,0,0,0.22745412562997208,0.9737887967798279],[1,0,0,26.294463340596096]],[12,"joint23",-134,[1,0.03065444715321064,0.08239329606294632,-0.06684030592441559],[3,0,0,0.0026280810221320935,0.9999965465891076],[1,0,0,0.3011562482453621]],[12,"joint24",-135,[1,0.03870490938425064,0.08239329606294632,-0.06684030592441559],[3,0.03487242806678946,0.009223232173793278,0.9734880463303955,0.2258757831216629],[1,-179.8593606005993,-175.92947726897432,26.13055566511089]],-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159],1,1,1,4,4,1,1,1,4,4,4,4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,4,1,4,1,1,1,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[[90,true,-91,[549],[[91,"TV/group1"],[91,"TV/group6"],[21,"TV",-82],[21,"Tasteri",-83],[21,"Zupcanici/Zupcanik",-84],[21,"Zupcanici/Zupcanik1",-85],[21,"Zupcanici/Zupcanik3",-86],[21,"Zupcanici/Zupcanik4",-87],[21,"Zupcanici/Zupcanik5",-88],[21,"kanister_energije",-89],[21,"Goldberg_2",-90]],550],[66,-92]],[1,152,152,152]],[118,"Canvas",33554432,"0eEEZRsudDnJPciE2H66cQ",[-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198],[[7,-160,[5,920,600]],[141,-162,-161],[142,45,5.684341886080802e-14,-5.684341886080802e-14,-5.684341886080802e-14,-5.684341886080802e-14,-163],[146,-166,-165,-164],[147,-167]],[1,460.00000000000006,299.99999999999994,0]],[119,"Goldberg_1",[-200,-201,-202,-203,-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233],[[66,-199]]],[64,"Goldberg_2 Socket",false,2,[-234,-235,-236,-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263],[1,-0.057467926293611526,0.0441877581179142,-0.026740388944745064],[1,0.14445427060127258,0.14445427060127258,0.14445427060127258]],[64,"Goldberg_2 Socket",false,1,[-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293],[1,-0.057467926293611526,0.0441877581179142,-0.04183780774474144],[1,0.14445427060127258,0.14445427060127258,0.14445427060127258]],[120,"Goldberg_2",[-294,-295,-296,-297,-298,-299,-300,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315,-316,-317,-318,-319,-320,-321,-322]],[148,"MainMenuLift2",true,[-338,-339,-340,-341,-342,-343,-344,-345,2,-346,-347,-348,-349,-350,1,-351,-352,3,-353,-354,-355,-356,-357,-358],[149,"3bfe40cd-b7db-4537-8813-4314ffa47ea5",[[94,["_textLabel"],-335,[6,["07LWQV6VtJ25W4STKnI07r"]],-334,[6,["045VkOOjlHMJw8jbwZo3Oj"]]],[94,["_placeholderLabel"],-337,[6,["07LWQV6VtJ25W4STKnI07r"]],-336,[6,["045VkOOjlHMJw8jbwZo3Oj"]]]],[-323,-324,-325,-326,-327,-328,-329,-330,-331,-332,-333]],[150,[151,50000,0.6,[2,0.2392156862745098,0.3607843137254902,0.796078431372549,1.3020828125],[2,0.2392156862745098,0.3607843137254902,0.796078431372549,1],[2,0.5137254901960784,0.6274509803921569,0.9019607843137255,0.6],[2,0.5137254901960784,0.6274509803921569,0.9019607843137255,1]],[152,320.3,504.1,[4,4283190348]],[153,true,false,951,952],[154],[155]]],[121,"TV",[-360,-361,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371],[[156,-359]],[1,0.09426812827587128,0.0641200840473175,-0.0687689557671547],[3,0.7071067811865477,0,0,0.7071067811865474],[1,0.4891984164714813,0.400407075881958,0.4891984164714813],[1,90.00000000000003,0,0]],[122,"Player","d4Ri5ZOTtHQam+np4qbzfp",8,[-379,-380,-381,-382],[[157,55,0.99,1,false,-372,[1,0,0,0]],[160,1.5,-373,[1,0,0,-0.23],945],[161,true,-374],[162,1,2,45,25,-375],[163,7,11,9,-376],[53,true,-377,[946],947],[165,-378]],[1,0.081,9,19.866]],[123,"LoadingPanel",33554432,3,[-387,-388,-389],[[7,-383,[5,920,600]],[166,-384],[167,0,-385],[143,45,4000,3000,-386]]],[86,"Tasteri Socket",2,[-393,-394,-395,-396,-397],[[168,-391,-390,78,79,80],[66,-392]],[1,-0.0010654397774487734,-0.00173152144998312,0]],[124,"Korpa",4,[-402],[[2,-398,[684],[0],685],[67,8,4,-399],[170,-400,686,687],[16,-401,[688],689]],[1,0.0006638556951656938,-0.06063556671142578,-0.09644826501607895],[3,-0.019088798651094887,0.9824689378203542,0.18486861417016473,-0.014628721031099613],[1,0.014642219990491867,0.023592902347445488,0.023592902347445488],[1,-21.286477879100637,-178.75620068732525,-2.4597233892400383]],[125,"Tasks","eaLUIYEHVJKoHfnVJI67T/",8,[-408,-409,-410,-411,-412],[[171,-407,-406,-405,-404,-403,3]]],[26,0,{},3,[28,"82H1Rqs2tL2p+4NBLalKFh",-413,[37,"5eiVK4CXBPg7xOlCeJPFtP",null,[[19,"GenericUI-Input",["_name"],[6,["82H1Rqs2tL2p+4NBLalKFh"]]],[9,["_lpos"],[6,["82H1Rqs2tL2p+4NBLalKFh"]],[1,0,35,0]],[9,["_lrot"],[6,["82H1Rqs2tL2p+4NBLalKFh"]],[3,0,0,0,1]],[9,["_euler"],[6,["82H1Rqs2tL2p+4NBLalKFh"]],[1,0,0,0]]]],175]],[4,"Autic",7,[[2,-414,[233],[0],234],[16,-415,[235],236],[23,true,-416,237],[67,2,4,-417]],[1,0.019414842128753662,-0.013850769959390163,0.3121494948863983],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,0.017942870035767555,0.013286871835589409,0.013286871835589409],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[44,"Jaja",7,[-418,-419,-420,-421,-422,-423]],[4,"Burence",4,[[2,-424,[588,589],[0],590],[11,2,-425],[23,true,-426,591],[16,-427,[592],593],[96,-428]],[1,0.021,-0.11,0.109],[3,0.43069833794247253,0.43697601837990574,-0.5609413421490193,0.5557838714127037],[1,0.019140921533107758,0.017163800075650215,0.019140930846333504],[1,90.01847772414885,90.6626483778779,-14.306835228893648]],[44,"Domine",4,[-429,-430,-431,-432,-433,-434]],[126,"Tasteri Socket",false,1,[-436,-437,-438,-439,-440],[[169,null,-435,932,933,934]],[1,-0.0010654397774487734,-0.00173152144998312,0]],[86,"Poluga_ram",2,[-448],[[2,-441,[112,113,114],[0],115],[176,-443,-442],[16,-444,[204],205],[177,-446,-445],[178,-447,[1,-0.04707849584519863,0.05,0.044541988521814346],[1,0.005,0.038,0.017]]],[1,0,0,-0.076]],[127,"ChoseLanguage",33554432,[-455,-456],[[7,-449,[5,250,60]],[25,1,0,-450,170],[182,6,8,-453,-452,-451,171],[164,-454,[172,173]]]],[107,"SettingsButton",33554432,[[7,-457,[5,508,535]],[54,0,-458,178],[183,1,-460,[[184,"523caEBgsFEWJ4UlrBYMTEF","buttonClicked",-459]],179],[185,-461],[186,true,-462]],[1,0,-12.5,0],[1,0.13,0.13,0.13]],[128,"joystick",33554432,3,[-468,-469],[[7,-463,[5,150,150]],[54,0,-464,191],[144,12,41.20000000000002,37.99700000000004,-465],[187,null,70,-467,-466]],[1,-343.79999999999995,-187.00299999999993,0]],[5,"Drzac_loptice",7,[[2,-470,[213],[0],214],[23,true,-471,215],[11,4,-472],[16,-473,[216],217]],[1,0.02089197374880314,0.1898043155670166,0.26170939207077026],[1,1.7041956186294556,4.294073104858398,0.1499580591917038]],[38,"Tockic_vetrenjaca",7,[[2,-474,[221,222,223,224],[0],225],[10,-475,226],[16,-476,[227,228],229],[11,2,-477]],[1,0.020139254629612025,0.11520679295063013,0.2797722816467285]],[43,"Kasika_od_klackalice2",7,[[2,-478,[249],[0],250],[16,-479,[251],252],[10,-480,253],[188,-482,[-481]]],[1,0.019825279712677002,-0.17256633937358856,0.30019477009773254],[3,0.00018843134240236075,0.9892010880185275,-0.14655784056047805,-0.001404039472500371],[1,16.854957275665946,-179.84401070663426,0.044939316960861175]],[4,"Kantica",7,[[2,-483,[254],[0],255],[16,-484,[256],257],[96,-485]],[1,0.020999999716877937,-0.1889999955892563,0.22100000083446503],[3,0.009765098092134472,0.7072861632117343,0.009758282990255747,0.7067925453070066],[1,0.024069562554359436,0.024069562554359436,0.024069562554359436],[1,0,90.04000091552734,1.5820000171661377]],[129,"kanister_energije",[-487,-488,-489,-490,-491],[[189,-486]],[1,-0.00034735974622890353,0.0022140732035040855,-0.013286648318171501],[1,0.8075805902481079,0.8075805902481079,0.8075805902481079]],[34,"Klackalice",4,[-493,-494],[[16,-492,[569],570]]],[34,"Okretac",4,[-498],[[2,-495,[601],[0],602],[11,2,-496],[16,-497,[603],604]]],[87,"ArrowKontrole",false,"e2w+4UYrRBuoy5+Zz8f4uA",8,[-501],[[[16,-499,[85],86],-500],4,1],[1,7.148,10.218,-2.551],[3,-0.6826986738789995,0.6826986738789995,0.18418067402378382,0.18418067402378416],[1,15,15,15],[1,-90,90,-59.804]],[65,"Zupcanici",2,[-502,-503,-504,-505,-506],[1,0,0.021329810842871666,0]],[34,"Checkpoint1",14,[-508,-509,-510,-511],[[57,-507]]],[22,"Button1",false,33554432,3,[-516],[[7,-512,[5,300,80]],[25,1,0,-513,116],[29,2,-515,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","RaziganiGrad",3]],[4,4292269782],-514,117,118,119,120]],[1,-331.463,91.386,0]],[22,"Button2",false,33554432,3,[-521],[[7,-517,[5,300,80]],[25,1,0,-518,121],[29,2,-520,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","Bozicna2",3]],[4,4292269782],-519,122,123,124,125]],[1,-331.463,-11.788,0]],[22,"Button3",false,33554432,3,[-526],[[7,-522,[5,300,80]],[25,1,0,-523,126],[29,2,-525,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","KinderGarden",3]],[4,4292269782],-524,127,128,129,130]],[1,-331.463,-116.998,0]],[22,"Button4",false,33554432,3,[-531],[[7,-527,[5,300,80]],[25,1,0,-528,131],[29,2,-530,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","Uskrs",3]],[4,4292269782],-529,132,133,134,135]],[1,-5.273,91.386,0]],[22,"Button5",false,33554432,3,[-536],[[7,-532,[5,300,80]],[25,1,0,-533,136],[29,2,-535,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","MedivalVillage2",3]],[4,4292269782],-534,137,138,139,140]],[1,-5.273,-11.788,0]],[22,"Button6",false,33554432,3,[-541],[[7,-537,[5,300,80]],[25,1,0,-538,141],[29,2,-540,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","PodzemnaOdaja",3]],[4,4292269782],-539,142,143,144,145]],[1,-5.273,-117.008,0]],[22,"Button7",false,33554432,3,[-546],[[7,-542,[5,300,80]],[25,1,0,-543,146],[29,2,-545,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","RodjendanskaProslava",3]],[4,4292269782],-544,147,148,149,150]],[1,317.214,91.386,0]],[22,"Button8",false,33554432,3,[-551],[[7,-547,[5,300,80]],[25,1,0,-548,151],[29,2,-550,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","VeselaUlica",3]],[4,4292269782],-549,152,153,154,155]],[1,317.214,-11.788,0]],[22,"Button9",false,33554432,3,[-556],[[7,-552,[5,300,80]],[25,1,0,-553,156],[29,2,-555,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","GradNevidljivihStanovnika",3]],[4,4292269782],-554,157,158,159,160]],[1,317.214,-117.008,0]],[22,"Button10",false,33554432,3,[-561],[[7,-557,[5,300,80]],[25,1,0,-558,161],[29,2,-560,[[32,"ff492Jb5VJF54WfhLbZ2yTn","loadAndPlaySceneByName","ProlecniKarneval2",3]],[4,4292269782],-559,162,163,164,165]],[1,316.986,193.496,0]],[22,"ChangeLanguage",false,33554432,3,[-566],[[7,-562,[5,250,60]],[25,1,0,-563,180],[29,2,-565,[[49,"b73808StSRJNbd0es5AR9IN","changeLanguage"]],[4,4292269782],-564,181,182,183,184]],[1,-75.632,217.032,0]],[22,"Toggle1",false,33554432,3,[-572],[[7,-567,[5,28,28]],[55,-568,193],[58,-571,[[49,"a2826+uvW5GJ7MGGyYcQK2x","node1func"]],[4,4292269782],-570,-569,194]],[1,395.015,16.162,0]],[22,"Toggle2",false,33554432,3,[-578],[[7,-573,[5,28,28]],[55,-574,195],[58,-577,[[49,"a2826+uvW5GJ7MGGyYcQK2x","node2func"]],[4,4292269782],-576,-575,196]],[1,395.015,-45.323,0]],[22,"Toggle3",false,33554432,3,[-584],[[7,-579,[5,28,28]],[55,-580,197],[58,-583,[[49,"a2826+uvW5GJ7MGGyYcQK2x","node3func"]],[4,4292269782],-582,-581,198]],[1,395.015,-107.516,0]],[22,"Toggle4",false,33554432,3,[-590],[[7,-585,[5,28,28]],[55,-586,199],[58,-589,[[49,"a2826+uvW5GJ7MGGyYcQK2x","node4func"]],[4,4292269782],-588,-587,200]],[1,395.015,-175.258,0]],[22,"Toggle5",false,33554432,3,[-596],[[7,-591,[5,28,28]],[55,-592,201],[58,-595,[[49,"a2826+uvW5GJ7MGGyYcQK2x","node5func"]],[4,4292269782],-594,-593,202]],[1,395.015,-244.58,0]],[4,"Elise3",7,[[2,-597,[241],[0],242],[16,-598,[243],244],[11,4,-599],[10,-600,245]],[1,0.019874008372426033,-0.060020823031663895,0.1981380134820938],[3,-6.123221690397124e-17,0.9999979735427753,0.0020131841303945262,-1.2327197374071478e-19],[1,1.3210467100143433,0.7672293782234192,0.7672293782234192],[1,-0.2306940639392142,180,-7.016709416715043e-15]],[5,"pSphere2",7,[[2,-601,[273],[0],274],[158,2,-602,[1,0,1,1]],[23,true,-603,275]],[1,0.021,0.195,0.252],[1,0.5683069229125977,0.5683069229125977,0.5683069229125977]],[34,"Kasinka_nova",30,[-607],[[2,-604,[566],[0],567],[10,-605,568],[11,2,-606]]],[5,"Jaje",4,[[2,-608,[594],[0],595],[68,2,-609],[36,true,-610,596,597]],[1,0,-0.013010839931666851,-0.050949838012456894],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[65,"Zupcanici",1,[-611,-612,-613,-614,-615],[1,0,0.021329810842871666,0]],[60,"Managers","67VR9fseBGI6w9kUEvmRFX",8,[[190,-616],[191,-617,11],[192,true,"elevator","SRB",-618,3,14,10],[193,-620,-619],[194,true,-621,950]]],[75,"samo TV 18. maj",2,[-622,-623,-624,9],[1,0,0.003,-0.002],[1,0.95,0.95,0.95]],[4,"1",12,[[2,-625,[58],[0],59],[31,-626],[16,-627,[60],61],[33,"PodzemnaOdaja",-628]],[1,0.04848086088895798,0.0681580901145935,0],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"2",12,[[2,-629,[62],[0],63],[31,-630],[16,-631,[64],65],[33,"Bozicna2",-632]],[1,0.04848086088895798,0.06286758929491043,0],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"3",12,[[2,-633,[66],[0],67],[31,-634],[16,-635,[68],69],[33,"VeselaUlica",-636]],[1,0.04848086088895798,0.057802714407444,0],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"4",12,[[2,-637,[70],[0],71],[31,-638],[16,-639,[72],73],[33,"Uskrs",-640]],[1,0.04848086088895798,0.05286557599902153,0],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"5",12,[[2,-641,[74],[0],75],[31,-642],[16,-643,[76],77],[33,"GradNevidljivihStanovnika",-644]],[1,0.04848086088895798,0.04760405793786049,0],[3,0,0,0.7071067811865476,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[87,"ArrowPoluga",false,"9f5qq3WM1LD4TJWryiEYjB",8,[-647],[[[16,-645,[91],92],-646],4,1],[1,-7.106,11.008,-2.975],[3,0.4413272498663011,-0.29794894671444627,-0.5504427724931704,-0.6430158924064251],[1,15,15,15],[1,270.287,76.012,26.417]],[5,"Task1",34,[[97,false,-648],[196,true,"hotspot3.txt",-651,[-650],[-649]]],[1,1.2029999999999745,0,-4.178],[1,7,7,7]],[61,"Task4",[[70,true,"hotspot6.txt",-653,[-652]],[42,-654],[48,-655],[78,null,-656]],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[61,"Task5",[[70,true,"hotspot7.txt",-658,[-657]],[42,-659],[48,-660],[78,null,-661]],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[134,"Task6",[[[42,-662],[48,-663],[78,null,-664],-665],4,4,4,1],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[108,"LoadingCircle",33554432,11,[[7,-666,[5,200,200]],[54,0,-667,167],[53,true,-668,[168],169],[93,36,21.848000000000013,24.411,-669]],[1,378.152,-215.589,0],[1,0.6,0.6,0.6]],[22,"HelpPanel",false,33554432,3,[23],[[42,-670],[197,2,-230,-460,0,true,-671],[145,36,-10,-672]],[1,450,-250,0]],[39,"Cube-001",7,[[[35,"Cube<ModelComponent>",false,-673,[206],[0],207],[40,true,true,-674,208],-675,[45,4,4,false,-676]],4,4,1,4],[1,0.019428571428571517,0.20676190476190476,0.3809047619047619],[1,0.010455737681615921,0.010455737681615921,0.010455737681615921]],[43,"Klackalica1",7,[[2,-677,[209],[0],210],[16,-678,[211],212]],[1,0.0207807756960392,0.20873387157917023,0.32966914772987366],[3,-0.0016774730317523558,0.0013606027576475378,0.0003944527894787877,0.9999975896227753],[1,-0.19228570724433042,0.1559892794790348,0.044939314920369]],[39,"Cube-002",7,[[[35,"Cube<ModelComponent>",false,-679,[218],[0],219],[40,true,true,-680,220],-681,[45,4,4,false,-682]],4,4,1,4],[1,0.019,0.138,0.288],[1,0.010455737681615921,0.010455737681615921,0.010455737681615921]],[39,"Cube-003",7,[[[35,"Cube<ModelComponent>",false,-683,[230],[0],231],[40,true,true,-684,232],-685,[45,4,4,false,-686]],4,4,1,4],[1,0.019,-0.003,0.342],[1,0.010455737681615921,0.010455737681615921,0.010455737681615921]],[39,"Cube-004",7,[[[35,"Cube<ModelComponent>",false,-687,[238],[0],239],[40,true,true,-688,240],-689,[45,4,4,false,-690]],4,4,1,4],[1,0.019,-0.044,0.205],[1,0.010455737681615921,0.010455737681615921,0.010455737681615921]],[39,"Cube-005",7,[[[35,"Cube<ModelComponent>",false,-691,[246],[0],247],[40,true,true,-692,248],-693,[45,4,4,false,-694]],4,4,1,4],[1,0.019,-0.152,0.356],[1,0.010455737681615921,0.010455737681615921,0.010455737681615921]],[44,"Knjige",7,[-695,-696,-697]],[4,"Knjiga1",76,[[2,-698,[258,259,260],[0],261],[52,-699],[23,true,-700,262]],[1,0.0236510112881661,0.2562433183193206,0.37970542907714844],[3,6.194636420281294e-18,0.7558782607501736,6.1946364202812946e-18,0.6547121924367169],[1,0.0859839543700218,0.07217574864625931,0.0859839543700218],[1,-7.181304164301505e-17,98.20433907300166,1.0013119284430575e-15]],[4,"Knjiga2",76,[[2,-701,[263,264,265],[0],266],[52,-702],[23,true,-703,267]],[1,0.0236510112881661,0.2660628259181976,0.37970542907714844],[3,7.001142229780364e-17,0.9878289113283528,7.001142229780363e-17,-0.15554434076443047],[1,0.10421985387802127,0.06591257452964783,0.10421985387802127],[1,-9.172961205435752e-15,-162.1032648249353,6.677184430973628e-15]],[4,"Knjiga3",76,[[2,-704,[268,269,270],[0],271],[68,2,-705],[23,true,-706,272]],[1,0.027551075443625506,0.27553689479827875,0.37950167059898376],[3,2.644846139095587e-17,0.889286573935942,2.6448461390955867e-17,0.4573504011338291],[1,0.07074934989213943,0.08134007453918458,0.07074934989213943],[1,-1.3090993778577934e-15,125.56746910693077,4.08134751675865e-15]],[5,"Jaje1",17,[[2,-707,[305],[0],306],[46,2,0.9,0.07,-708,[1,0,1,1],[1,0,1,1]],[23,true,-709,307]],[1,0.019827555865049418,-0.10041806101799014,0.21876633167266846],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[5,"Jaje2",17,[[2,-710,[308],[0],309],[46,2,0.9,0.07,-711,[1,0,1,1],[1,0,1,1]],[23,true,-712,310]],[1,0.019827555865049418,-0.10041806101799014,0.24039795994758606],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[5,"Jaje4",17,[[2,-713,[311],[0],312],[46,2,0.9,0.07,-714,[1,0,1,1],[1,0,1,1]],[23,true,-715,313]],[1,0.019827555865049418,-0.10041806101799014,0.28493034839630127],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[5,"Jaje5",17,[[2,-716,[314],[0],315],[46,2,0.9,0.07,-717,[1,0,1,1],[1,0,1,1]],[23,true,-718,316]],[1,0.019827555865049418,-0.10041806101799014,0.3074720501899719],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[5,"Jaje3",17,[[2,-719,[317],[0],318],[46,2,0.9,0.07,-720,[1,0,1,1],[1,0,1,1]],[23,true,-721,319]],[1,0.019827555865049418,-0.10041806101799014,0.26205363869667053],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[5,"Jaje6",17,[[2,-722,[320],[0],321],[46,2,0.9,0.07,-723,[1,0,1,1],[1,0,1,1]],[23,true,-724,322]],[1,0.019827555865049418,-0.10041806101799014,0.3297758996486664],[1,0.0075560067780315885,0.0075560067780315885,0.0075560067780315885]],[4,"Elise",30,[[2,-725,[560],[0],561],[159,4,11000,false,0.5,false,-726],[10,-727,562]],[1,0,0.034872476011514664,0.08169333636760712],[3,-0.5979397196240002,0,0,0.80154107299375],[1,0.7672293782234192,0.7672293782234194,0.7672293782234194],[1,-73.44496600000001,0,0]],[39,"Cube",53,[[[35,"Cube<ModelComponent>",false,-728,[563],[0],564],[40,true,true,-729,565],-730,[45,4,4,false,-731]],4,4,1,4],[1,0,0.06,-0.04],[1,0.01,0.01,0.01]],[5,"Loptica_1",4,[[2,-732,[584],[0],585],[68,2,-733],[36,true,-734,586,587]],[1,0,0.311,0.07],[1,0.5562374591827393,0.5562374591827393,0.5562374591827393]],[39,"Trigger2",31,[[[35,"Cube<ModelComponent>",false,-735,[598],[0],599],-736,[40,true,true,-737,600],[67,16,4,-738]],4,1,4,4],[1,-0.002,-0.118,0.087],[1,0.02,0.02,0.01]],[5,"Domina8",19,[[2,-739,[642],[0],643],[47,3,0.4,0,-740,[1,0.1,1,1]],[36,true,-741,644,645]],[1,0,0.004,-0.024],[1,1.2340589761734009,3.348623275756836,0.9545732140541077]],[5,"Domina5",19,[[2,-742,[646],[0],647],[47,3,0.4,0,-743,[1,0.1,1,1]],[36,true,-744,648,649]],[1,0,0.004,0.036],[1,1.2340589761734009,3.348623275756836,0.9545732140541077]],[5,"Domina7",19,[[2,-745,[650],[0],651],[47,3,0.4,0,-746,[1,0.1,1,1]],[36,true,-747,652,653]],[1,0,0.004,-0.004],[1,1.2340589761734009,3.348623275756836,0.9545732140541077]],[5,"Domina6",19,[[2,-748,[654],[0],655],[47,3,0.4,0,-749,[1,0.1,1,1]],[36,true,-750,656,657]],[1,0,0.004,0.015],[1,1.2340589761734009,3.348623275756836,0.9545732140541077]],[5,"Domina4",19,[[2,-751,[658],[0],659],[47,3,0.4,0,-752,[1,0.1,1,1]],[36,true,-753,660,661]],[1,0,0.004,0.056],[1,1.2340589761734009,3.348623275756836,0.9545732140541077]],[20,"Domina3",false,19,[[2,-754,[662],[0],663],[47,3,0.5,0,-755,[1,0.1,1,1]],[36,true,-756,664,665]],[1,0,0.004,0.072],[1,1.2340589761734007,3.348623275756835,0.9545732140541073]],[39,"Trigger",13,[[[35,"Cube<ModelComponent>",false,-757,[681],[0],682],-758,[40,true,true,-759,683],[67,4,2,-760]],4,1,4,4],[1,-0.001,0.902,0.001],[1,0.5,0.5,0.5]],[4,"1",20,[[2,-761,[912],[0],913],[31,-762],[16,-763,[914],915],[33,"KinderGarden3",-764]],[1,0.04848086088895798,0.07338816672563553,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"2",20,[[2,-765,[916],[0],917],[31,-766],[33,"RodjendanskaProslava",-767],[16,-768,[918],919]],[1,0.04848086088895798,0.0681580901145935,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"3",20,[[2,-769,[920],[0],921],[31,-770],[33,"RaziganiGrad",-771],[16,-772,[922],923]],[1,0.04848086088895798,0.06286758929491043,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"4",20,[[2,-773,[924],[0],925],[31,-774],[33,"ProlecniKarneval2",-775],[16,-776,[926],927]],[1,0.04848086088895798,0.057802714407444,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[4,"5",20,[[2,-777,[928],[0],929],[31,-778],[33,"MedivalVillage2",-779],[16,-780,[930],931]],[1,0.04848086088895798,0.05286557599902153,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.15987573564052582,0.15987573564052582,0.15987573564052582],[1,0,0,90]],[130,"TV Socket",false,2,[-781,-782],[1,0.09426812082529068,0.0641200840473175,-0.0687689557671547],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.4891984164714813,0.400407075881958,0.4891984164714813],[1,90.00000000000003,0,0]],[15,"group1",57,[-783,-784,-785],[1,0.01414391486376854,0.04601826990046387,-0.06699477290503576],[3,1.589512613340089e-16,1.5504290727615e-16,-0.6982511794353075,0.7158528413139129],[1,0.21839741123659273,0.21839741123659273,0.2183973983619865],[1,1.0222516549930602e-12,1.0219349425177793e-12,-88.5737274703115]],[15,"group6",57,[-786,-787,-788],[1,0.013925437529089367,0.06068582487479927,-0.06699477290503575],[3,1.589512613340089e-16,1.5504290727615e-16,-0.6982511794353075,0.7158528413139129],[1,0.21839741123659273,0.21839741123659273,0.2183973983619865],[1,1.0222516549930602e-12,1.0219349425177793e-12,-88.5737274703115]],[79,32,63],[79,63,32],[61,"Task3",[[70,true,"hotspot5.txt",-789,[105]],[42,-790],[48,-791]],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[34,"Checkpoint4",14,[66,67],[[57,-792]]],[61,"Task3",[[70,true,"hotspot5.txt",-794,[106,-793]],[42,-795],[48,-796]],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[26,0,{},3,[28,"b4+vvl3pxAlJnTi89jX8bm",-799,[37,"8aX0bDg5JBD6aUhCEaY8ox",null,[[19,"GenericUI",["_name"],[6,["b4+vvl3pxAlJnTi89jX8bm"]]],[9,["_lpos"],[6,["b4+vvl3pxAlJnTi89jX8bm"]],[1,0,35,0]],[9,["_lrot"],[6,["b4+vvl3pxAlJnTi89jX8bm"]],[3,0,0,0,1]],[77,["_euler"],-797,[1,0,0,0]],[69,false,["_active"],-798],[19,0,["_opacity"],[6,["4e0bqd8o9MUqbdoPgTwOkH"]]]]],203]],[135,"Counter",33554432,11,[[[7,-800,[5,72.3,163.8]],-801,[93,36,70.26449999999997,65.495,-802]],4,1,4],[1,380.698,-214.03,0],[1,0.25,0.25,0.25]],[26,0,{},3,[28,"92X+fL2EtL56hsWYSdqLWJ",-803,[37,"1aqOXaxvZFZb7zCvfWDPiC",null,[[19,"GenericUI-ABC",["_name"],[6,["92X+fL2EtL56hsWYSdqLWJ"]]],[9,["_lpos"],[6,["92X+fL2EtL56hsWYSdqLWJ"]],[1,0,35,0]],[9,["_lrot"],[6,["92X+fL2EtL56hsWYSdqLWJ"]],[3,0,0,0,1]],[9,["_euler"],[6,["92X+fL2EtL56hsWYSdqLWJ"]],[1,0,0,0]]]],176]],[26,0,{},3,[28,"e9ZWNyzJVGBIYNRgbu0cSz",-804,[37,"e1J+Llj1JGebuJ0DmjyZoQ",null,[[19,"GenericUI-Image",["_name"],[6,["e9ZWNyzJVGBIYNRgbu0cSz"]]],[9,["_lpos"],[6,["e9ZWNyzJVGBIYNRgbu0cSz"]],[1,0,35.00000000000003,0]],[9,["_lrot"],[6,["e9ZWNyzJVGBIYNRgbu0cSz"]],[3,0,0,0,1]],[9,["_euler"],[6,["e9ZWNyzJVGBIYNRgbu0cSz"]],[1,0,0,0]],[19,true,["_active"],[6,["e9ZWNyzJVGBIYNRgbu0cSz"]]],[19,255,["_opacity"],[6,["59A4dxKwtKXpT5PBW/dRI8"]]],[9,["_lpos"],[6,["19P8j0sKdE2IwivHN9RJwW"]],[1,0,175.78499999999997,0]]]],177]],[109,"joystick_ball",33554432,24,[[7,-805,[5,55,55]],[54,0,-806,190]]],[5,"Task0-1",34,[[97,false,-807],[98,true,"hotspot2.txt",-809,[-808]]],[1,1.2029999999999745,0,-4.178],[1,7,7,7]],[5,"Task2",34,[[98,true,"hotspot4.txt",-810,[64]],[42,-811],[48,-812]],[1,1.1660000000000537,0,-4.11],[1,7,7,7]],[131,"Goldberg 3","45+Ay8bvNFNb6TP/c2NtcK",8,[7],[[99,-818,[77,78,79,52,71,25,16,27,28,26,80,81,84,82,83,85],[76,52,16,17,28],[-813,-814,-815,-816,-817]]],[1,-7.857,6.753,8.293],[3,0,1,0,6.123233995736766e-17],[1,22,21.5,21.5],[1,0,180,0]],[8,"Tockic_drzac",7,[[2,-819,[276],[0],277],[10,-820,278],[11,2,-821]]],[8,"Drzac_vetrenjace",7,[[2,-822,[279],[0],280],[10,-823,281],[11,2,-824]]],[5,"Postolje",7,[[2,-825,[326],[0],327],[10,-826,328],[11,2,-827]],[1,0.01893318071961403,-0.10135543346405029,0.25654658675193787],[1,3.5785953998565674,0.3498014211654663,12.985833168029785]],[8,"Klackalica_drzac",7,[[2,-828,[329,330,331],[0],332],[10,-829,333],[11,2,-830]]],[4,"Drzac_1",7,[[2,-831,[340],[0],341],[11,2,-832],[10,-833,342]],[1,0.020511049777269363,0.21086278557777405,0.18912875652313232],[3,0.18941240584988847,0,0,0.9818976222143311],[1,3.453078269958496,0.348013699054718,9.939024925231934],[1,21.83698974035872,0,0]],[15,"Zupcanik1 Socket",2,[-834,-835],[1,0.043891336768865585,0.015787492506206036,0.024383608251810074],[3,0,0,0.1435044581721781,0.9896496705828327],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,16.501370510492556]],[34,"VrataLifta",2,[-837,-838],[[53,true,-836,[547],548]]],[110,"Tunel-001","e6Ve90Fo9EZIwIpA/lCE0/",8,[[2,-839,[551],[0],552],[11,2,-840],[10,-841,553]],[1,-8.056,13.112,1.678],[3,-0.7071067811865475,0.7071067811865476,-4.329780281177466e-17,4.329780281177467e-17],[1,80,80,80],[1,0,180,-90]],[8,"Nova_klackalica",4,[[2,-842,[571],[0],572],[11,4,-843],[10,-844,573]]],[73,"Postolje_novo",false,4,[[2,-845,[574,575],[0],576],[11,2,-846],[10,-847,577]]],[83,"Kasinka_nova",false,4,[[2,-848,[578],[0],579],[52,-849],[10,-850,580]],[1,0,0.0035069286823272705,-0.015390848740935326],[3,0.15433360385852848,0,0,0.9880187947200391],[1,17.756299035347908,0,0]],[5,"Levak",4,[[2,-851,[581],[0],582],[10,-852,583],[11,2,-853]],[1,0,0.002,0.019],[1,1.5,1,1.5]],[4,"Fliper3",4,[[2,-854,[605,606],[0],607],[11,2,-855],[10,-856,608]],[1,0,0.129,-0.068],[3,0.9511090589437015,-3.2398891399918625e-33,0,-0.30885523792745795],[1,3.2097012996673575,0.9999999999999996,0.9999999999999996],[1,-144.01948928494656,1.1466681487717652e-31,-3.5311250384401286e-31]],[4,"Fliper4",4,[[2,-857,[609,610],[0],611],[11,2,-858],[10,-859,612]],[1,1.1102230246251565e-16,0.1909999999999999,-0.05699999999999999],[3,0.9543252170772791,-4.267608917963022e-33,7.252984052431593e-33,-0.2987697776723815],[1,3.2097012996673575,1,1],[1,-145.2325437955522,-6.470610638342391e-31,-7.150122800855436e-31]],[4,"Fliper2",4,[[2,-860,[613,614],[0],615],[11,2,-861],[10,-862,616]],[1,0,0.16,-0.059],[3,0.9543252170772791,-4.267608917963022e-33,7.252984052431593e-33,-0.2987697776723815],[1,3.2097012996673575,1,1],[1,-145.2325437955522,-6.470610638342391e-31,-7.150122800855436e-31]],[4,"Fliper",4,[[2,-863,[617,618],[0],619],[11,2,-864],[10,-865,620]],[1,1.1102230246251565e-16,0.16699999999999993,-0.005000000000000004],[3,-0.21637447485743316,6.312516524209791e-33,7.6740589920932836e-34,0.9763104458266183],[1,3.2097012996673575,0.9999999999999998,0.9999999999999998],[1,-24.992354435996628,7.252525978409069e-31,-7.066185955035263e-32]],[4,"Fliper5",4,[[2,-866,[621,622],[0],623],[11,2,-867],[10,-868,624]],[1,0,0.135,-0.006],[3,-0.21637447485743316,6.312516524209791e-33,7.6740589920932836e-34,0.9763104458266183],[1,3.2097012996673575,0.9999999999999998,0.9999999999999998],[1,-24.992354435996628,7.252525978409069e-31,-7.066185955035263e-32]],[20,"Levak",false,4,[[2,-869,[625,626],[0],627],[10,-870,628],[11,2,-871]],[1,1.2575351870935947e-9,0.06146920844912529,-0.03924473747611046],[1,2.0548970699310303,2.0548970699310303,2.0548970699310303]],[83,"Kasika_od_klackalice",false,4,[[2,-872,[629],[0],630],[95,122,-873],[23,true,-874,631]],[1,8.215003677314314e-10,0.0512323,0.0036],[3,0.14655784056047805,0.001404039472500371,0.00018843134240236078,0.9892010880185272],[1,16.854957275665946,0.1559892933657165,0.044939316960861175]],[74,"Kasika_od_klackalice-001",false,4,[[2,-875,[632],[0],633],[95,122,-876],[10,-877,634]],[1,8.215003677314314e-10,0.0512323,0.0036],[3,0.14655784056047805,0.001404039472500371,0.00018843134240236078,0.9892010880185272],[1,1,0.5,0.5],[1,16.854957275665946,0.1559892933657165,0.044939316960861175]],[73,"Postolje_za_klackalicu",false,4,[[2,-878,[635,636],[0],637],[11,2,-879],[10,-880,638]]],[4,"Tunel",4,[[2,-881,[639],[0],640],[11,2,-882],[10,-883,641]],[1,0,0.245,0.045],[3,0,0,0.7071067811865475,0.7071067811865476],[1,2.5313313007354736,2.5313313007354736,2.5313313007354736],[1,0,0,90]],[74,"Domina",false,4,[[2,-884,[666],[0],667],[52,-885],[23,true,-886,668]],[1,0,0.021,0.088],[3,-0.4877453897266744,0,0,0.8729859304710326],[1,1.2340589761734009,3.348623275756836,0.9545732140541077],[1,-58.385,0,0]],[20,"Sphere",false,4,[[76,"Sphere<ModelComponent>",-887,[696],[0],697],[52,-888],[198,-889,[1,0.0010054856538772583,0,7.450580596923828e-8]]],[1,0,0.114,-0.038],[1,0.01,0.01,0.01]],[20,"Loptica_2",false,4,[[2,-890,[698],[0],699],[68,2,-891],[36,true,-892,700,701]],[1,0,0.117,-0.031],[1,0.5562374591827393,0.5562374591827393,0.5562374591827393]],[75,"kanister_energije",1,[-893,-894,-895],[1,-0.00034735974622890353,0.0022140732035040855,-0.013286648318171501],[1,0.8075805902481079,0.8075805902481079,0.8075805902481079]],[15,"group1 Socket",1,[-896,-897],[1,0.01414390741318794,0.04601826990046387,-0.06699477290503575],[3,7.947563066700442e-17,7.752145363807496e-17,-0.6982511794353073,0.7158528413139129],[1,0.2183974112365928,0.2183974112365927,0.21839739836198652],[1,5.111258274965231e-13,5.109674712588826e-13,-88.57372747031098]],[15,"group6 Socket",1,[-898,-899],[1,0.013925430078508771,0.060685824646998496,-0.06699477290503575],[3,7.947563066700442e-17,7.752145363807496e-17,-0.6982511794353073,0.7158528413139129],[1,0.2183974112365928,0.2183974112365927,0.21839739836198652],[1,5.111258274965231e-13,5.109674712588826e-13,-88.57372747031098]],[15,"TV Socket",1,[-900,-901],[1,0.09426812082529068,0.0641200840473175,-0.0687689557671547],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.4891984164714813,0.400407075881958,0.4891984164714813],[1,90.00000000000003,0,0]],[15,"Zupcanik1 Socket",1,[-902,-903],[1,0.043891336768865585,0.015787492506206036,0.024383608251810074],[3,0,0,0.1435044581721781,0.9896496705828327],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,16.501370510492556]],[60,"GlobalManager","90EwwHbexJf70F/ftNatGo",8,[[199,2,"HRV",-904],[200,null,-905,937,938,939,940],[195,-906]]],[111,"Zidovi_lifta1",false,"dc9rkkJYRD8LAxPQaRAuqO",8,[[2,-907,[0,1],[0],2],[10,-908,3]],[1,0,7.69084832072258,0],[1,1529.0977401733398,1529.0977401733398,2194.970390319824]],[5,"Ekran",9,[[2,-909,[34],[0],35]],[1,-0.049291111528873444,0.015676166862249374,-0.0001896414760267362],[1,0.30318063497543335,0.30318063497543335,0.30318063497543335]],[136,"endGame",false,9,[[[2,-910,[56],[0],57],-911],4,1],[1,-0.049,0.021,0],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[79,151,150],[84,"Arrow5",32,[[2,-912,[81],[0],82],[53,true,-913,[83],84]],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0.02539999969303608,0.02539999969303608,0.02539999969303608],[1,0,90,0]],[84,"Arrow5",63,[[2,-914,[87],[0],88],[53,true,-915,[89],90]],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0.02539999969303608,0.02539999969303608,0.02539999969303608],[1,0,90,0]],[34,"Checkpoint2",14,[107],[[57,-916]]],[34,"Checkpoint3",14,[65],[[57,-917]]],[34,"Checkpoint5",14,[109],[[57,-918]]],[27,"Label",512,33554432,35,[[7,-919,[5,300,80]],[30,"Razigani Grad",25,25,1,false,-920,[4,4278190080]]]],[27,"Label",512,33554432,36,[[7,-921,[5,300,80]],[30,"Božićno seoce",25,25,1,false,-922,[4,4278190080]]]],[27,"Label",512,33554432,37,[[7,-923,[5,300,80]],[30,"Povratak u vrtić",25,25,1,false,-924,[4,4278190080]]]],[27,"Label",512,33554432,38,[[7,-925,[5,300,80]],[30,"Uskršnje selo",25,25,1,false,-926,[4,4278190080]]]],[27,"Label",512,33554432,39,[[7,-927,[5,300,80]],[30,"Srednjovekovni grad",25,25,1,false,-928,[4,4278190080]]]],[27,"Label",512,33554432,40,[[7,-929,[5,300,80]],[30,"Podzemna odaja",25,25,1,false,-930,[4,4278190080]]]],[27,"Label",512,33554432,41,[[7,-931,[5,330,80]],[30,"Rodjendanska Proslava",25,25,1,false,-932,[4,4278190080]]]],[27,"Label",512,33554432,42,[[7,-933,[5,300,80]],[30,"Vesela Ulica",25,25,1,false,-934,[4,4278190080]]]],[27,"Label",512,33554432,43,[[7,-935,[5,300,80]],[30,"Grad Nevidljivih \nStanovnika",25,25,1,false,-936,[4,4278190080]]]],[27,"Label",512,33554432,44,[[7,-937,[5,300,80]],[30,"Prolećni Karneval",25,25,1,false,-938,[4,4278190080]]]],[85,"CrniBackground",33554432,11,[[7,-939,[5,4000,3000]],[181,0,-940,[4,1224736767],166]],[1,-18.262736,0,0]],[137,"TEXT_LABEL",false,33554432,22,[[[92,-941,[5,248,60],[0,0,1]],-942],4,1],[1,-123,30,0]],[138,"PLACEHOLDER_LABEL",33554432,22,[[[92,-943,[5,248,60],[0,0,1]],-944],4,1],[1,-123,30,0]],[26,0,{},3,[28,"85m//k/gVF7qrlOlAZV1vZ",-945,[37,"bfhTa/vUlKvJs96Wp6S6wa",null,[[19,"Settings",["_name"],[6,["85m//k/gVF7qrlOlAZV1vZ"]]],[9,["_lpos"],[6,["85m//k/gVF7qrlOlAZV1vZ"]],[1,-490.00000000000006,36.98700000000002,0]],[9,["_lrot"],[6,["85m//k/gVF7qrlOlAZV1vZ"]],[3,0,0,0,1]],[9,["_euler"],[6,["85m//k/gVF7qrlOlAZV1vZ"]],[1,0,0,0]],[9,["_contentSize"],[6,["33pydLMRRP6ZTETs1EBy1n"]],[5,800,510]],[9,["_lpos"],[6,["ddS6/iS5hGDYSqXai1+c+Q"]],[1,312,-163.582,0]]]],174]],[27,"Label",512,33554432,45,[[7,-946,[5,100,40]],[30,"PROMENI",20,20,1,false,-947,[4,4278190080]]]],[26,0,null,3,[28,"ddnY0F06xALYrGESIBwYGV",-948,[37,"42T7U0gmlO1bdpwKbAMFyQ",null,[[19,"DesktopMoveTutorial",["_name"],[6,["ddnY0F06xALYrGESIBwYGV"]]],[9,["_lpos"],[6,["ddnY0F06xALYrGESIBwYGV"]],[1,0,0,0]],[9,["_lrot"],[6,["ddnY0F06xALYrGESIBwYGV"]],[3,0,0,0,1]],[9,["_euler"],[6,["ddnY0F06xALYrGESIBwYGV"]],[1,0,0,0]],[19,true,["_active"],[6,["ddnY0F06xALYrGESIBwYGV"]]],[19,0,["_opacity"],[6,["0308YYv9VEbJWMapNQpKOV"]]]]],185]],[26,0,null,3,[28,"aePLkHWnRMTpDOIuiYA4i4",-951,[37,"3cCSyTUi9CqrQDFPQduz6e",null,[[19,"DesktopLookTutorial",["_name"],[6,["aePLkHWnRMTpDOIuiYA4i4"]]],[9,["_lpos"],[6,["aePLkHWnRMTpDOIuiYA4i4"]],[1,-28.75799999999998,0,0]],[9,["_lrot"],[6,["aePLkHWnRMTpDOIuiYA4i4"]],[3,0,0,0,1]],[77,["_euler"],-949,[1,0,0,0]],[9,["_contentSize"],[6,["a0SVQ/Yn9FfKCPmytgMWPF"]],[5,920,600]],[69,true,["_active"],-950],[9,["_lpos"],[6,["f0NBumnvJHKKYeDzRx7JnV"]],[1,-193.73199999999997,0,0]],[9,["_lpos"],[6,["12mOAz+dtAqKwLHx0JHiKc"]],[1,255.651,0,0]]]],186]],[26,0,null,3,[28,"0eOh/S3hhMw7mXjWvEnsJ2",-952,[37,"42Hc+tCqtHRY0vnMzrfoLE",null,[[19,"MobileMoveTutorial",["_name"],[6,["0eOh/S3hhMw7mXjWvEnsJ2"]]],[9,["_lpos"],[6,["0eOh/S3hhMw7mXjWvEnsJ2"]],[1,-111.13900000000004,-165.028,0]],[9,["_lrot"],[6,["0eOh/S3hhMw7mXjWvEnsJ2"]],[3,0,0,0,1]],[9,["_euler"],[6,["0eOh/S3hhMw7mXjWvEnsJ2"]],[1,0,0,0]],[19,true,["_active"],[6,["0eOh/S3hhMw7mXjWvEnsJ2"]]],[19,0,["_opacity"],[6,["a11qnUDC9I34896b5qANXN"]]]]],187]],[26,0,null,3,[28,"29cWjhO6hGV6b6m/7SAPZL",-953,[37,"6eIjCgr2RCJqyK07sCUbrR",null,[[19,"MobileLookTutorial",["_name"],[6,["29cWjhO6hGV6b6m/7SAPZL"]]],[9,["_lpos"],[6,["29cWjhO6hGV6b6m/7SAPZL"]],[1,0,0,0]],[9,["_lrot"],[6,["29cWjhO6hGV6b6m/7SAPZL"]],[3,0,0,0,1]],[9,["_euler"],[6,["29cWjhO6hGV6b6m/7SAPZL"]],[1,0,0,0]],[19,true,["_active"],[6,["29cWjhO6hGV6b6m/7SAPZL"]]],[9,["_contentSize"],[6,["7cYR+ts6VMJ6HuPqqc2klQ"]],[5,920,600]],[19,0,["_opacity"],[6,["eemhkRNx9Fy6V1d2ObcfNA"]]],[9,["_lpos"],[6,["76zzfn3+1MDZ0fc3Mnd7WR"]],[1,-18.032736,0.649,-0.043]]]],188]],[85,"JoystickGlow",33554432,24,[[7,-954,[5,189,189]],[54,0,-955,189]],[1,0.236,-11.604,0]],[26,512,{},3,[28,"07XhdicltKCZw4lMcf/Mjx",-958,[172,"da+fwZobdH5pYQ0n0Bhwiv",[[19,"Subtitle",["_name"],[6,["07XhdicltKCZw4lMcf/Mjx"]]],[9,["_lpos"],[6,["07XhdicltKCZw4lMcf/Mjx"]],[1,0,251.378,0]],[9,["_lrot"],[6,["07XhdicltKCZw4lMcf/Mjx"]],[3,0,0,0,1]],[77,["_euler"],-956,[1,0,0,0]],[69,false,["_active"],-957]]],192]],[51,"Checkmark",33554432,46,[[[7,-959,[5,26,26]],-960],4,1]],[51,"Checkmark",33554432,47,[[[7,-961,[5,26,26]],-962],4,1]],[51,"Checkmark",33554432,48,[[[7,-963,[5,26,26]],-964],4,1]],[51,"Checkmark",33554432,49,[[[7,-965,[5,26,26]],-966],4,1]],[51,"Checkmark",33554432,50,[[[7,-967,[5,26,26]],-968],4,1]],[5,"Task0",34,[[204,true,true,"hotspot1.txt",true,-969,[106]]],[1,1.203,0,-4.178],[1,7,7,7]],[4,"Fliper6",7,[[2,-970,[282,283],[0],284],[10,-971,285]],[1,0.019,0.065,0.366],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Fliper4",7,[[2,-972,[286,287],[0],288],[10,-973,289]],[1,0.019,0.081,0.316],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[4,"Fliper5",7,[[2,-974,[290,291],[0],292],[10,-975,293]],[1,0.019,0.013,0.366],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Fliper2",7,[[2,-976,[294,295],[0],296],[10,-977,297]],[1,0.019,0.051,0.319],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[4,"Fliper",7,[[2,-978,[298,299],[0],300],[10,-979,301]],[1,0.019,0.039,0.366],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[44,"samo kanister energije",2,[-980,29]],[65,"Zupcanik Socket",2,[-981],[1,0,0.021329810842871666,0]],[15,"Zupcanik3 Socket",2,[-982],[1,-0.0016909841215237975,-0.005397435277700424,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[15,"Zupcanik4 Socket",2,[-983],[1,0.011166471056640148,-0.04491801746189594,0.05281808227300644],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.7702598571777344,1.7702598571777344,1.7702598571777344],[1,0,0,-3.640002094901476]],[15,"Zupcanik5 Socket",2,[-984],[1,0.008817433379590511,-0.012982847169041634,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[64,"kanister_energije Socket",false,2,[-985],[1,-0.00034735974622890353,0.0022140732035040855,-0.013286648318171501],[1,0.8075805902481079,0.8075805902481079,0.8075805902481079]],[132,"Goldberg 2",false,"d4Ay+piWVNSakFxUDfVOLM",8,[4],[[99,-990,[88,86,53,90,91,92,93,95,94,54,18,13,31,30],[-989,30,19,54,13],[-986,-987,-988]]],[1,-8.056,6.688,2.393],[3,0,1,0,6.123233995736766e-17],[1,21.957049131393433,21.957049131393433,21.957049131393433],[1,0,180,0]],[4,"Knjiga_iz_vrtica",4,[[2,-991,[558],[0],559]],[1,-1.065,0.649,-0.043],[3,0.6030765703632259,1.0322781159798483e-32,4.182149072772106e-34,0.7976833019932967],[1,0.2,0.2,0.2],[1,74.18112,9.146806587038931e-31,7.516095314561779e-31]],[8,"Stalak",4,[[2,-992,[669],[0],670],[11,2,-993]]],[5,"Cube5",4,[[76,"Cube<ModelComponent>",-994,[671],[0],672],[179,-995]],[1,-0.0009999999999999998,0.03499999999999999,0.08199999999999999],[1,0.029999999999999992,0.001,0.001]],[4,"Postolje2",4,[[2,-996,[673],[0],674],[11,2,-997]],[1,0,-0.08941927552223206,-0.0367312878370285],[3,0.18941240584988847,0,0,0.9818976222143311],[1,2.5713579654693604,0.6288573145866394,24.532546997070312],[1,21.83698974035872,0,0]],[74,"Dascica_1",false,4,[[2,-998,[675],[0],676],[11,2,-999]],[1,0,0.201,0.012],[3,-0.10345844008639819,0,0,0.9946337774150289],[1,3.097034215927124,0.23025856912136078,6.938899993896484],[1,-11.876715920845303,0,0]],[4,"Postolje3",4,[[2,-1000,[677],[0],678],[11,2,-1001]],[1,0.039268895983695984,-0.15606582164764404,-0.030516522005200386],[3,-0.07499018277666417,0,0,0.9971842720817062],[1,3.5785953998565674,0.6288573145866394,24.532546997070312],[1,-8.601316461439367,0,0]],[5,"Postolje1",4,[[2,-1002,[679],[0],680],[11,2,-1003]],[1,0,-0.014430674724280834,0.0013774052495136857],[1,3.5785953998565674,0.3498014211654663,17.357040405273438]],[8,"Crveno_dugme_1_ram",4,[[2,-1004,[690,691,692],[0],693],[11,2,-1005]]],[5,"Crveno_dugme_1_dugme",4,[[2,-1006,[694],[0],695],[11,2,-1007]],[1,0.03911127522587776,-0.14420458674430847,-0.11743331700563431],[1,2.5287539958953857,2.5287539958953857,2.5287539958953857]],[15,"TV",1,[-1008,-1009],[1,0.09426812082529068,0.0641200840473175,-0.0687689557671547],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.4891984164714813,0.400407075881958,0.4891984164714813],[1,90.00000000000003,0,0]],[65,"Zupcanik Socket",1,[-1010],[1,0,0.021329810842871666,0]],[15,"Zupcanik3 Socket",1,[-1011],[1,-0.0016909841215237975,-0.005397435277700424,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[15,"Zupcanik4 Socket",1,[-1012],[1,0.011166471056640148,-0.04491801746189594,0.05281808227300644],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.7702598571777344,1.7702598571777344,1.7702598571777344],[1,0,0,-3.640002094901476]],[15,"Zupcanik5 Socket",1,[-1013],[1,0.008817433379590511,-0.012982847169041634,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[75,"kanister_energije Socket",1,[-1014],[1,-0.00034735974622890353,0.0022140732035040855,-0.013286648318171501],[1,0.8075805902481079,0.8075805902481079,0.8075805902481079]],[20,"Zidovi_lifta2",false,1,[[2,-1015,[904,905],[0],906],[10,-1016,907]],[1,0,0.051,0.143],[1,10.059853553771973,10.059853553771973,14.440594673156738]],[5,"Zidovi_lifta3",1,[[2,-1017,[908,909],[0],910],[10,-1018,911]],[1,0,0.15,0],[1,85.948,30.525,52.026]],[62,"Capsule",false,10,[[35,"Capsule<ModelComponent>",false,-1019,[941],[0],942],[180,-1020,[1,1,0.2,1]]],[1,0,0,-0.577]],[26,0,null,10,[28,"1dptesWm1Db758h6U8JFxX",-1024,[173,"59Xelqo8xGf6XuVwxjA72p",[[205,[null],[6,["1dptesWm1Db758h6U8JFxX"]]]],[[19,"Arrow",["_name"],[6,["1dptesWm1Db758h6U8JFxX"]]],[9,["_lpos"],[6,["1dptesWm1Db758h6U8JFxX"]],[1,0,-0.056,-0.365]],[9,["_lrot"],[6,["1dptesWm1Db758h6U8JFxX"]],[3,0,0,6.938893903907228e-18,1]],[9,["_euler"],[6,["1dptesWm1Db758h6U8JFxX"]],[1,0,0,7.951386703658792e-16]],[174,["arrowDot"],-1022,-1021],[175,["_defaultClip"],[6,["89BMWV8KRPz6sTWI4x06hy"]],944],[69,0.03,["arrowHeight"],-1023],[19,true,["_enabled"],[6,["9alDBGRo1DWriQYq8BrwyR"]]]]],943]],[60,"Ground002","06ZL5ijqxJga0R2gV0l6bz",8,[[76,"Plane<ModelComponent>",-1025,[948],[0],949],[206,-1026]]],[63,"Sphere Light1",false,"86ScL7aEFMFrRwEJjvbzdn",8,[[71,7000,3,56.28954646796543,11,55,-1027,[59]]],[1,-0.371,10.425,-0.198]],[63,"Sphere Light2",false,"feTT1+yMtOI5g0Z3E31Whg",8,[[71,7000,3,56.28954646796543,58.634944237464,55,-1028,[59]]],[1,-0.371,10.425,6.686]],[63,"Sphere Light3",false,"33Kf8neQNOZp6xTJd2McMv",8,[[71,7000,3,56.28954646796543,58.634944237464,55,-1029,[59]]],[1,-0.371,10.425,-4.193]],[63,"Sphere Light4",false,"57DtFWqxtBK7WqTzgmb61k",8,[[71,7000,3,42.24,15,55,-1030,[59]]],[1,-0.371,7.514,-0.198]],[112,"Svetla",false,"3c2zyqKl1MIqpEJ0PJ0kMr",8,[[2,-1031,[4,5,6],[0],7]],[1,152,152,152]],[113,"Tasteri_ram","39SwRcbVVLO4nYSanJT3nQ",8,[[2,-1032,[8,9,10],[0],11]],[1,152,152,152]],[114,"Svetla","52ZTHbtIJHY4bNwEoPzJhG",8,[[2,-1033,[12,13,14],[0],15]],[1,0,-0.054,0],[1,152,152,152]],[38,"Okvir_tv",102,[[2,-1034,[16],[0],17]],[1,-0.0007598396041430533,0,1.776356799695581e-17]],[5,"Ekran",102,[[2,-1035,[18],[0],19]],[1,-0.04929111897945404,0.015676166862249374,-0.00018964330956805497],[1,0.30318063497543335,0.30318063497543335,0.30318063497543335]],[4,"pTorus1",103,[[2,-1036,[20],[0],21]],[1,0,0.0680791586637497,-3.552713599391162e-17],[3,0.7106765956923479,-1.4135588169042077e-32,-1.544318454782024e-32,0.7035188528640403],[1,1.4952049255371094,1.4952049255371094,1.4952049255371094],[1,90.57998341518885,1.180816796226967e-31,-2.3961556974811943e-30]],[5,"pCylinder16",103,[[2,-1037,[22],[0],23]],[1,-0.014948289841413498,0.05239909514784813,-3.552713599391162e-17],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[5,"pCylinder17",103,[[2,-1038,[24],[0],25]],[1,0.014929359778761864,0.05239909514784813,-3.552713599391162e-17],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[4,"pTorus1",104,[[2,-1039,[26],[0],27]],[1,-3.552713599391162e-17,0.0680791586637497,-3.552713599391162e-17],[3,0.7106765956923479,-1.4135588169042077e-32,-1.544318454782024e-32,0.7035188528640403],[1,1.4952049255371094,1.4952049255371094,1.4952049255371094],[1,90.57998341518885,1.180816796226967e-31,-2.3961556974811943e-30]],[5,"pCylinder16",104,[[2,-1040,[28],[0],29]],[1,-0.014948289841413498,0.05239909514784813,-3.552713599391162e-17],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[5,"pCylinder17",104,[[2,-1041,[30],[0],31]],[1,0.014929359778761864,0.05239909514784813,-3.552713599391162e-17],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[4,"Okvir_tv",57,[[2,-1042,[32],[0],33]],[1,0.0938964159162771,0.06412008404731749,-0.06876895576715471],[3,0.7071067811865477,0,0,0.7071067811865474],[1,0.4891984164714814,0.40040707588195806,0.4891984164714814],[1,90.00000000000004,0,0]],[20,"ProlecniKarneval",false,9,[[2,-1043,[36],[0],37]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"BirthdayParty",false,9,[[2,-1044,[38],[0],39]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"KinderGarden",false,9,[[2,-1045,[40],[0],41]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"MedivalVillage",false,9,[[2,-1046,[42],[0],43]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"RaziganiGrad",false,9,[[2,-1047,[44],[0],45]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"Uskrs",false,9,[[2,-1048,[46],[0],47]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"VeselaUlica",false,9,[[2,-1049,[48],[0],49]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"PodzemnaOdaja",false,9,[[2,-1050,[50],[0],51]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"Bozicna2",false,9,[[2,-1051,[52],[0],53]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[20,"GradNevidljivihStanovnika",false,9,[[2,-1052,[54],[0],55]],[1,-0.049291111528873444,0.015870990231633186,-0.0001896414760267362],[1,0.30318063497543335,0.044689737260341644,0.30318063497543335]],[44,"Zupcanik",33,[-1053]],[4,"pCylinder18",243,[[18,-1054,[93],[0],2,94,95]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik1",33,[-1055],[1,0.043891336768865585,-0.00554231833666563,0.024383608251810074],[3,0,0,0.1435044581721781,0.9896496705828327],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,16.501370510492556]],[4,"pCylinder18",245,[[18,-1056,[96],[0],2,97,98]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik3",33,[-1057],[1,-0.0016909841215237975,-0.02672724612057209,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[4,"pCylinder18",247,[[18,-1058,[99],[0],2,100,101]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik4",33,[-1059],[1,0.011166471056640148,-0.06624782830476761,0.05281808227300644],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.7702598571777344,1.7702598571777344,1.7702598571777344],[1,0,0,-3.640002094901476]],[4,"pCylinder18",249,[[18,-1060,[102],[0],2,103,104]],[1,-0.03397776558995247,0.06710463017225266,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2633669376373291,0.03914752975106239,0.2633669376373291],[1,90.00000000000003,0,0]],[15,"Zupcanik5",33,[-1061],[1,0.008817433379590511,-0.0343126580119133,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[4,"pCylinder18",251,[[18,-1062,[105],[0],2,106,107]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[38,"Poluga",21,[[2,-1063,[108,109,110],[0],111]],[1,-0.04598327726125717,0.04819226264953613,0.04449348524212837]],[207,"hotspot8.txt",67,[152]],[139,"Camera",3,[-1064],[1,0,0,1000]],[208,0,1073741824,328.0564263322884,2000,6,41943040,255,[4,4278190080]],[201,"0",130,130,130,111],[133,"Wraper",false,3,[22],[1,-6.882736,218.675,0]],[202,"",0,40,20,1,false,169],[203,"Skracenica jezika",0,20,20,60,1,false,170,[4,4290493371]],[6,["aePLkHWnRMTpDOIuiYA4i4"]],[6,["07XhdicltKCZw4lMcf/Mjx"]],[56,0,179],[56,0,180],[56,0,181],[56,0,182],[56,0,183],[6,["b4+vvl3pxAlJnTi89jX8bm"]],[41,70,[71,25]],[41,72,[26]],[41,73,[16]],[41,74,[51]],[41,75,[27]],[8,"Postolje_za_klackalicu4",7,[[2,-1065,[302,303],[0],304]]],[8,"Masina_2_ram",7,[[2,-1066,[323,324],[0],325]]],[8,"Crveno_dugme_2_ram",7,[[2,-1067,[334,335,336],[0],337]]],[5,"Crveno_dugme_2_dugme",7,[[2,-1068,[338],[0],339]],[1,0.01857028901576996,-0.15856972336769104,0.15816515684127808],[1,2.5287539958953857,2.5287539958953857,2.5287539958953857]],[8,"Kanister_ram",190,[[2,-1069,[343,344,345],[0],346]]],[20,"Kanister_energija1",false,29,[[2,-1070,[347],[0],348]],[1,-0.004,0.017,-0.084],[1,0.23,0.23,0.113172]],[20,"Kanister_energija2",false,29,[[2,-1071,[349],[0],350]],[1,-0.004,0.017,-0.084],[1,0.23,0.23,0.113172]],[20,"Kanister_energija3",false,29,[[2,-1072,[351],[0],352]],[1,-0.004,0.017,-0.084],[1,0.23,0.23,0.113172]],[20,"Kanister_energija4",false,29,[[2,-1073,[353],[0],354]],[1,-0.004,0.017,-0.084],[1,0.23,0.23,0.113172]],[20,"Kanister_energija5",false,29,[[2,-1074,[355],[0],356]],[1,-0.004,0.017,-0.084],[1,0.23,0.23,0.113172]],[5,"Desna_vrata_lifta",2,[[2,-1075,[357],[0],358]],[1,0.0637604370713234,0.050645750015974045,0.07353559881448746],[1,17.225204467773438,17.225204467773438,0.17513565719127655]],[38,"pCylinder86",2,[[2,-1076,[359],[0],360]],[1,0.010331744328141212,0,0]],[5,"pCube27",2,[[2,-1077,[361,362],[0],363]],[1,-0.0008204671903513372,0.09308349341154099,-0.06462287157773972],[1,1.0073912143707275,0.30233147740364075,0.020313823595643044]],[4,"pCylinder87",2,[[18,-1078,[364],[0],2,365,366]],[1,0.045044876635074615,0.07687079161405563,0.037325527518987656],[3,0.10737166989280278,-0.10737166989280278,0.6989072359794474,0.6989072359794474],[1,0.03966149315237999,0.03966149315237999,0.03966149315237999],[1,89.99999999999999,-89.99999999999999,72.53210502453176]],[5,"pCube28",2,[[18,-1079,[367],[0],2,368,369]],[1,0.0008609283831901848,0.09315254539251328,-0.06461615860462189],[1,0.06463772803544998,0.06463772803544998,0.06463772803544998]],[4,"pCylinder88",2,[[18,-1080,[370],[0],2,371,372]],[1,0.022399241104722023,0.08238627761602402,-0.06668204069137573],[3,0.4999999999999999,0.5,0.5,0.5000000000000001],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[4,"pCylinder89",2,[[18,-1081,[373],[0],2,374,375]],[1,0.030660705640912056,0.08238627761602402,-0.06668204069137573],[3,0.5,0.5,0.5,0.5],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[4,"pCylinder90",2,[[18,-1082,[376],[0],2,377,378]],[1,0.03870490938425064,0.08238627761602402,-0.06668204069137573],[3,0.5,0.5,0.5,0.5],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[5,"Zidovi_lifta1",2,[[2,-1083,[379,380,381],[0],382]],[1,0,0.05059768632054329,0],[1,10.059853553771973,10.059853553771973,14.440594673156738]],[64,"Goldberg_2",false,2,[-1084],[1,-0.057467926293611526,0.0441877581179142,-0.026740388944745064],[1,0.14445427060127258,0.14445427060127258,0.14445427060127258]],[140,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Masina_2_ram",293,[[24,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:transform2",-1085]]],[62,"Poluga",false,2,[[2,-1086,[383,384,385],[0],386]],[1,-0.04598327726125717,0.04819226264953613,-0.0239472184330225]],[62,"Poluga_ram",false,2,[[2,-1087,[387,388,389],[0],390]],[1,0,0,-0.06844070553779602]],[8,"Skale_2",2,[[2,-1088,[391,392,393,394],[0],395]]],[8,"Skale_1",2,[[2,-1089,[396,397,398,399,400,401,402,403],[0],404]]],[8,"Kutija_za_zupcanike",2,[[2,-1090,[405,406,407],[0],408]]],[38,"Goldberg_ram",2,[[2,-1091,[409,410],[0],411]],[1,0,0,0.015097416937351227]],[8,"Cevi",2,[[2,-1092,[412,413,414],[0],415]]],[8,"Ventil",2,[[2,-1093,[416,417],[0],418]]],[8,"Male_cevcice",2,[[2,-1094,[419,420,421,422,423,424],[0],425]]],[8,"Zice_crvena_i_zuta",2,[[2,-1095,[426,427,428],[0],429]]],[73,"Gold_masina_samo_ram",false,2,[[2,-1096,[430,431,432,433,434],[0],435]]],[8,"Prednji_zid_lifta",2,[[2,-1097,[436],[0],437]]],[5,"Leva_vrata_lifta",2,[[2,-1098,[438],[0],439]],[1,-0.06374941021203995,0.050837818533182144,0.07378101348876953],[1,17.225204467773438,17.225204467773438,0.17513565719127655]],[4,"pCylinder19",191,[[2,-1099,[440],[0],441]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",123,[[2,-1100,[442],[0],443]],[1,-0.03449457883834839,0.06745335459709167,-0.06901759654283524],[3,0.7071067811865476,1.7316594631878777e-17,1.7316594631878777e-17,0.7071067811865476],[1,0.03541789948940277,0.10211757570505142,0.03541789948940277],[1,90.00000000000003,0,2.806274283724624e-15]],[5,"pCylinder28",123,[[2,-1101,[444],[0],445]],[1,0.0002942103601526469,-0.0005755439633503556,0.0005785534158349037],[1,1.0085402727127075,1.0085402727127075,1.0085402727127075]],[4,"pCylinder19",192,[[2,-1102,[446],[0],447]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",193,[[2,-1103,[448],[0],449]],[1,-0.03402278199791908,0.06716661155223846,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",194,[[2,-1104,[450],[0],451]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[5,"Kanister_ram",195,[[2,-1105,[452,453,454],[0],455]],[1,0.00043012393871322274,-0.0027416127268224955,0.01645241118967533],[1,1.2382664680480957,1.2382664680480957,1.2382664680480957]],[43,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Kasika_od_klackalice2",5,[[2,-1106,[456],[0],457]],[1,0.019825279712677002,-0.17256633937358856,0.30019477009773254],[3,0.00018843134240236075,0.9892010880185275,-0.14655784056047805,-0.001404039472500371],[1,16.854957275665946,-179.84401070663426,0.044939316960861175]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Kantica",5,[[2,-1107,[458],[0],459]],[1,0.016487877815961838,-0.18950830399990082,0.22138464450836182],[3,-0.02931555450379129,0.7067446925227271,-0.029295188341105574,0.7062537290486689],[1,0.024069562554359436,0.024069562554359436,0.024069562554359436],[1,-9.324284099615233e-8,90.03981622437028,-4.750499594232077]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje2",5,[[2,-1108,[460],[0],461]],[1,0.019827555865049362,-0.10041806101799011,0.24039797484874725],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Tockic_drzac",5,[[2,-1109,[462],[0],463]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga1",5,[[2,-1110,[464,465,466],[0],467]],[1,0.023651011288166046,0.25624334812164307,0.37970542907714844],[3,6.194636420281295e-18,0.7558782607501736,6.194636420281295e-18,0.6547121924367166],[1,0.08598395437002182,0.07217574864625931,0.08598395437002182],[1,-7.181304164301513e-17,98.20433907300166,1.0013119284430577e-15]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_vetrenjace",5,[[2,-1111,[468],[0],469]]],[43,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Klackalica1",5,[[2,-1112,[470],[0],471]],[1,0.0207807756960392,0.20873385667800903,0.32966914772987366],[3,-0.0016774730317523558,0.0013606027576475378,0.0003944527894787877,0.9999975896227753],[1,-0.19228570724433042,0.1559892794790348,0.044939314920369]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Tockic_vetrenjaca",5,[[2,-1113,[472,473,474,475],[0],476]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper6",5,[[2,-1114,[477,478],[0],479]],[1,0.019285893067717552,0.07894442975521088,0.354239284992218],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper4",5,[[2,-1115,[480,481],[0],482]],[1,0.019285893067717552,0.07498597353696823,0.3091494143009186],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Autic",5,[[2,-1116,[483],[0],484]],[1,0.01941484399139881,-0.013850769959390163,0.3121494948863983],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,0.017942870035767555,0.013286871835589409,0.013286871835589409],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga",5,[[2,-1117,[485,486,487],[0],488]],[1,0.019202470779418945,0.24650269746780396,0.38034680485725403],[1,0.11192681640386581,0.06712355464696884,0.11192681640386581]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper",5,[[2,-1118,[489,490],[0],491]],[1,0.019285893067717552,0.053304269909858704,0.35468602180480957],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper5",5,[[2,-1119,[492,493],[0],494]],[1,0.019285893067717552,0.026386236771941185,0.35468602180480957],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Postolje_za_klackalicu4",5,[[2,-1120,[495,496],[0],497]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Elise3",5,[[2,-1121,[498],[0],499]],[1,0.019874008372426033,-0.060020823031663895,0.1981380134820938],[3,-6.123221690397124e-17,0.9999979735427753,0.0020131841303945262,-1.2327197374071478e-19],[1,1.3210467100143433,0.7672293782234192,0.7672293782234192],[1,-0.2306940639392142,180,-7.016709416715043e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje4",5,[[2,-1122,[500],[0],501]],[1,0.019827555865049362,-0.10041806101799011,0.28493034839630127],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje5",5,[[2,-1123,[502],[0],503]],[1,0.019827555865049362,-0.10041806101799011,0.3074720501899719],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_loptice",5,[[2,-1124,[504],[0],505]],[1,0.02089197374880314,0.1898043304681778,0.26170939207077026],[1,1.7041956186294556,4.294073104858398,0.1499580591917038]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje3",5,[[2,-1125,[506],[0],507]],[1,0.019827555865049362,-0.10041806101799011,0.26205363869667053],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga2",5,[[2,-1126,[508,509,510],[0],511]],[1,0.023651011288166046,0.26606282591819763,0.37970542907714844],[3,7.001142229780364e-17,0.9878289113283528,7.001142229780364e-17,-0.15554434076443047],[1,0.10421985387802124,0.06591257452964783,0.10421985387802124],[1,-9.172961205435755e-15,-162.1032648249353,6.6771844309736265e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje1",5,[[2,-1127,[512],[0],513]],[1,0.019827555865049362,-0.10041806101799011,0.21876633167266846],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga3",5,[[2,-1128,[514,515,516],[0],517]],[1,0.0275510773062706,0.2755368947982788,0.37950170040130615],[3,2.6448461390955867e-17,0.889286573935942,2.6448461390955867e-17,0.4573504011338291],[1,0.07074934989213943,0.08134007453918457,0.07074934989213943],[1,-1.3090993778577936e-15,125.56746910693077,4.081347516758649e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Postolje",5,[[2,-1129,[518],[0],519]],[1,0.01893318071961403,-0.10135544091463089,0.25654658675193787],[1,3.5785953998565674,0.3498014211654663,12.985833168029785]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Klackalica_drzac",5,[[2,-1130,[520,521,522],[0],523]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper2",5,[[2,-1131,[524,525],[0],526]],[1,0.019285893067717552,0.044797178357839584,0.3091494143009186],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje6",5,[[2,-1132,[527],[0],528]],[1,0.019827555865049362,-0.10041806101799011,0.32977592945098877],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Crveno_dugme_2_ram",5,[[2,-1133,[529,530,531],[0],532]]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Crveno_dugme_2_dugme",5,[[2,-1134,[533],[0],534]],[1,0.01857028901576996,-0.15856972336769104,0.15816515684127808],[1,2.5287539958953857,2.5287539958953857,2.5287539958953857]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_1",5,[[2,-1135,[535],[0],536]],[1,0.020511049777269363,0.21086277067661285,0.18912875652313232],[3,0.18941240584988847,0,0,0.9818976222143311],[1,3.453078269958496,0.348013699054718,9.939024925231934],[1,21.83698974035872,0,0]],[62,"Gold_masina_samo_ram-001",false,2,[[2,-1136,[537,538,539,540,541],[0],542]],[1,-0.013,0,0]],[5,"pCube23",124,[[2,-1137,[543],[0],544]],[1,-0.115,0.015,0.074],[1,23,17.225204,0.175136]],[5,"pCube24",124,[[2,-1138,[545],[0],546]],[1,-0.064,0.015,0.074],[1,23,17.225204467773438,0.17513565719127655]],[115,"Masina_1_ram1",4,[[2,-1139,[554,555,556],[0],557]],[1,1.4,1,1]],[41,87,[30]],[41,89,[18,31]],[41,96,[13]],[15,"group1",206,[-1140],[1,-0.16378673911094666,0.0044309478253126144,0.037003010511398315],[3,-0.5061843984247253,-0.49373814395021065,-0.49373814395021065,0.5061843984247253],[1,0.44643932580947876,0.44643932580947876,0.5454384088516235],[1,-90,-88.57372747031121,0]],[4,"pTorus1",352,[[18,-1141,[702],[0],1,703,704]],[1,0,0.0680791586637497,0],[3,0.7106765956923479,-1.4135588169042077e-32,-1.544318454782024e-32,0.7035188528640403],[1,1.4952049255371094,1.4952049255371094,1.4952049255371094],[1,90.57998341518885,1.180816796226967e-31,-2.3961556974811943e-30]],[15,"group6",206,[-1142],[1,-0.16423334181308746,0.0044309478253126144,0.007020176853984594],[3,-0.5061843984247253,-0.49373814395021065,-0.49373814395021065,0.5061843984247253],[1,0.44643932580947876,0.44643932580947876,0.5454384088516235],[1,-90,-88.57372747031121,0]],[4,"pTorus1",354,[[18,-1143,[705],[0],1,706,707]],[1,0,0.0680791586637497,0],[3,0.7106765956923479,-1.4135588169042077e-32,-1.544318454782024e-32,0.7035188528640403],[1,1.4952049255371094,1.4952049255371094,1.4952049255371094],[1,90.57998341518885,1.180816796226967e-31,-2.3961556974811943e-30]],[44,"Zupcanik",55,[-1144]],[4,"pCylinder18",356,[[18,-1145,[708],[0],1,709,710]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik1",55,[-1146],[1,0.043891336768865585,-0.00554231833666563,0.024383608251810074],[3,0,0,0.1435044581721781,0.9896496705828327],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,16.501370510492556]],[4,"pCylinder18",358,[[18,-1147,[711],[0],1,712,713]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik3",55,[-1148],[1,-0.0016909841215237975,-0.02672724612057209,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[4,"pCylinder18",360,[[18,-1149,[714],[0],1,715,716]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[15,"Zupcanik4",55,[-1150],[1,0.011166471056640148,-0.06624782830476761,0.05281808227300644],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.7702598571777344,1.7702598571777344,1.7702598571777344],[1,0,0,-3.640002094901476]],[4,"pCylinder18",362,[[18,-1151,[717],[0],1,718,719]],[1,-0.03397776558995247,0.06710463017225266,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2633669376373291,0.03914752975106239,0.2633669376373291],[1,90.00000000000003,0,0]],[15,"Zupcanik5",55,[-1152],[1,0.008817433379590511,-0.0343126580119133,0.024383608251810074],[3,0,0,-0.03175966903710524,0.9994955344685905],[1,1.3555924892425537,1.3555924892425537,1.3555924892425537],[1,0,0,-3.640002094901476]],[4,"pCylinder18",364,[[18,-1153,[720],[0],1,721,722]],[1,-0.03444956615567207,0.06739137321710587,-0.06867912411689758],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.2785625457763672,0.04140624403953552,0.2785625457763672],[1,90.00000000000003,0,0]],[5,"Kanister_energija",143,[[18,-1154,[723],[0],1,724,725]],[1,-0.0041071525774896145,0.01714702881872654,-0.08462467044591904],[1,0.22831475734710693,0.22831475734710693,0.11317209899425507]],[88,"pSphere7",143,[[24,"transform12",-1155]],[1,0.12842653691768646,0.045487333089113235,0.1916418820619583],[3,0.7071067811865476,0,0,0.7071067811865476],[1,1.2382664680480957,1.2382664680480957,1.2382664680480957],[1,90.00000000000003,0,0]],[88,"pSphere8",143,[[24,"transform11",-1156]],[1,-0.08694147318601608,0.045487333089113235,0.1916418820619583],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,1.2382664680480957,1.2382664680480957,1.2382664680480957],[1,-90.00000000000003,180,7.016709451900449e-15]],[89,"pCube21",1,[[24,"transform13",-1157]],[1,0.0004706603358499706,0.015164804644882679,0.0758693739771843],[1,17.225204467773438,17.225204467773438,0.17513565719127655]],[89,"pCube25",1,[[24,"transform14",-1158]],[1,-0.1342168003320694,0.015164804644882679,0.0758693739771843],[1,17.225204467773438,17.225204467773438,0.17513565719127655]],[8,"pCube26",1,[[2,-1159,[726],[0],727]]],[38,"pCylinder86",1,[[2,-1160,[728],[0],729]],[1,0.010331744328141212,0,0]],[5,"pCube27",1,[[2,-1161,[730,731],[0],732]],[1,-0.0008204671903513372,0.09308349341154099,-0.06462287157773972],[1,1.0073912143707275,0.30233147740364075,0.020313823595643044]],[4,"pCylinder87",1,[[18,-1162,[733],[0],1,734,735]],[1,0.045044876635074615,0.07687079161405563,0.037325527518987656],[3,0.10737166989280278,-0.10737166989280278,0.6989072359794474,0.6989072359794474],[1,0.03966149315237999,0.03966149315237999,0.03966149315237999],[1,89.99999999999999,-89.99999999999999,72.53210502453176]],[5,"pCube28",1,[[18,-1163,[736],[0],1,737,738]],[1,0.0008609283831901848,0.09315254539251328,-0.06461615860462189],[1,0.06463772803544998,0.06463772803544998,0.06463772803544998]],[4,"pCylinder88",1,[[18,-1164,[739],[0],1,740,741]],[1,0.022399241104722023,0.08238627761602402,-0.06668204069137573],[3,0.5,0.5,0.5,0.5],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[4,"pCylinder89",1,[[18,-1165,[742],[0],1,743,744]],[1,0.030660705640912056,0.08238627761602402,-0.06668204069137573],[3,0.5,0.5,0.5,0.5],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[4,"pCylinder90",1,[[18,-1166,[745],[0],1,746,747]],[1,0.03870490938425064,0.08238627761602402,-0.06668204069137573],[3,0.5,0.5,0.5,0.5],[1,0.03861440345644951,0.03861440345644951,0.03861440345644951],[1,0,90,90]],[8,"Skale_2",1,[[2,-1167,[748,749,750,751],[0],752]]],[8,"Skale_1",1,[[2,-1168,[753,754,755,756,757,758,759,760],[0],761]]],[8,"Kutija_za_zupcanike",1,[[2,-1169,[762,763,764],[0],765]]],[8,"Goldberg_ram",1,[[2,-1170,[766,767],[0],768]]],[8,"Cevi",1,[[2,-1171,[769,770,771],[0],772]]],[8,"Ventil",1,[[2,-1172,[773,774],[0],775]]],[8,"Male_cevcice",1,[[2,-1173,[776,777,778,779,780,781],[0],782]]],[8,"Zice_crvena_i_zuta",1,[[2,-1174,[783,784,785],[0],786]]],[5,"pCylinder16",144,[[2,-1175,[787],[0],788]],[1,-0.014948288910090923,0.05239909887313843,0],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[5,"pCylinder17",144,[[2,-1176,[789],[0],790]],[1,0.014929360710084438,0.05239909887313843,0],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[5,"pCylinder16",145,[[2,-1177,[791],[0],792]],[1,-0.014948288910090923,0.05239909887313843,0],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[5,"pCylinder17",145,[[2,-1178,[793],[0],794]],[1,0.014929360710084438,0.05239909887313843,0],[1,0.6108744144439697,0.2756032347679138,0.6108744144439697]],[38,"Okvir_tv",146,[[2,-1179,[795],[0],796]],[1,-0.0007598396041430533,0,1.776356799695581e-17]],[5,"Ekran",146,[[2,-1180,[797],[0],798]],[1,-0.04929111897945404,0.015676166862249374,-0.00018964330956805497],[1,0.30318063497543335,0.30318063497543335,0.30318063497543335]],[8,"Tasteri_ram",1,[[2,-1181,[799,800,801],[0],802]]],[4,"pCylinder19",207,[[2,-1182,[803],[0],804]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",147,[[2,-1183,[805],[0],806]],[1,-0.03449457883834839,0.06745335459709167,-0.06901759654283524],[3,0.7071067811865476,1.7316594631878777e-17,1.7316594631878777e-17,0.7071067811865476],[1,0.03541789948940277,0.10211757570505142,0.03541789948940277],[1,90.00000000000003,0,2.806274283724624e-15]],[5,"pCylinder28",147,[[2,-1184,[807],[0],808]],[1,0.0002942103601526469,-0.0005755439633503556,0.0005785534158349037],[1,1.0085402727127075,1.0085402727127075,1.0085402727127075]],[4,"pCylinder19",208,[[2,-1185,[809],[0],810]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",209,[[2,-1186,[811],[0],812]],[1,-0.03402278199791908,0.06716661155223846,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[4,"pCylinder19",210,[[2,-1187,[813],[0],814]],[1,-0.03449457883834839,0.06745335459709167,-0.06840453296899796],[3,0.7071067811865476,0,0,0.7071067811865476],[1,0.03541789948940277,0.03541789948940277,0.03541789948940277],[1,90.00000000000003,0,0]],[5,"Kanister_ram",211,[[2,-1188,[815,816,817],[0],818]],[1,0.00043012393871322274,-0.0027416127268224955,0.01645241118967533],[1,1.2382664680480957,1.2382664680480957,1.2382664680480957]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Masina_2_ram",1,[[2,-1189,[819,820,821],[0],822]],[1,-0.057467926293611526,0.0441877581179142,-0.04183780774474144],[1,0.14445427060127258,0.14445427060127258,0.14445427060127258]],[43,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Kasika_od_klackalice2",6,[[2,-1190,[823],[0],824]],[1,0.019825279712677002,-0.17256633937358856,0.30019477009773254],[3,0.00018843134240236075,0.9892010880185275,-0.14655784056047805,-0.001404039472500371],[1,16.854957275665946,-179.84401070663426,0.044939316960861175]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Kantica",6,[[2,-1191,[825],[0],826]],[1,0.016487877815961838,-0.18950830399990082,0.22138464450836182],[3,-0.02931555450379129,0.7067446925227271,-0.029295188341105574,0.7062537290486689],[1,0.024069562554359436,0.024069562554359436,0.024069562554359436],[1,-9.324284099615233e-8,90.03981622437028,-4.750499594232077]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje2",6,[[2,-1192,[827],[0],828]],[1,0.019827555865049362,-0.10041806101799011,0.24039797484874725],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Tockic_drzac",6,[[2,-1193,[829],[0],830]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga1",6,[[2,-1194,[831,832,833],[0],834]],[1,0.023651011288166046,0.25624334812164307,0.37970542907714844],[3,6.194636420281295e-18,0.7558782607501736,6.194636420281295e-18,0.6547121924367166],[1,0.08598395437002182,0.07217574864625931,0.08598395437002182],[1,-7.181304164301513e-17,98.20433907300166,1.0013119284430577e-15]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_vetrenjace",6,[[2,-1195,[835],[0],836]]],[43,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Klackalica1",6,[[2,-1196,[837],[0],838]],[1,0.0207807756960392,0.20873385667800903,0.32966914772987366],[3,-0.0016774730317523558,0.0013606027576475378,0.0003944527894787877,0.9999975896227753],[1,-0.19228570724433042,0.1559892794790348,0.044939314920369]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Tockic_vetrenjaca",6,[[2,-1197,[839,840,841,842],[0],843]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper6",6,[[2,-1198,[844,845],[0],846]],[1,0.019285893067717552,0.07894442975521088,0.354239284992218],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper4",6,[[2,-1199,[847,848],[0],849]],[1,0.019285893067717552,0.07498597353696823,0.3091494143009186],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Autic",6,[[2,-1200,[850],[0],851]],[1,0.01941484399139881,-0.013850769959390163,0.3121494948863983],[3,6.123234262925839e-17,1,6.123234262925839e-17,6.123234262925839e-17],[1,0.017942870035767555,0.013286871835589409,0.013286871835589409],[1,-7.0167096047110005e-15,180,7.0167096047110005e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga",6,[[2,-1201,[852,853,854],[0],855]],[1,0.019202470779418945,0.24650269746780396,0.38034680485725403],[1,0.11192681640386581,0.06712355464696884,0.11192681640386581]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper",6,[[2,-1202,[856,857],[0],858]],[1,0.019285893067717552,0.053304269909858704,0.35468602180480957],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper5",6,[[2,-1203,[859,860],[0],861]],[1,0.019285893067717552,0.026386236771941185,0.35468602180480957],[3,-0.21637447485743322,0,0,0.9763104458266182],[1,3.2097012996673584,1,1],[1,-24.99235443599663,0,0]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Postolje_za_klackalicu4",6,[[2,-1204,[862,863],[0],864]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Elise3",6,[[2,-1205,[865],[0],866]],[1,0.019874008372426033,-0.060020823031663895,0.1981380134820938],[3,-6.123221690397124e-17,0.9999979735427753,0.0020131841303945262,-1.2327197374071478e-19],[1,1.3210467100143433,0.7672293782234192,0.7672293782234192],[1,-0.2306940639392142,180,-7.016709416715043e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje4",6,[[2,-1206,[867],[0],868]],[1,0.019827555865049362,-0.10041806101799011,0.28493034839630127],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje5",6,[[2,-1207,[869],[0],870]],[1,0.019827555865049362,-0.10041806101799011,0.3074720501899719],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_loptice",6,[[2,-1208,[871],[0],872]],[1,0.02089197374880314,0.1898043304681778,0.26170939207077026],[1,1.7041956186294556,4.294073104858398,0.1499580591917038]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje3",6,[[2,-1209,[873],[0],874]],[1,0.019827555865049362,-0.10041806101799011,0.26205363869667053],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga2",6,[[2,-1210,[875,876,877],[0],878]],[1,0.023651011288166046,0.26606282591819763,0.37970542907714844],[3,7.001142229780364e-17,0.9878289113283528,7.001142229780364e-17,-0.15554434076443047],[1,0.10421985387802124,0.06591257452964783,0.10421985387802124],[1,-9.172961205435755e-15,-162.1032648249353,6.6771844309736265e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje1",6,[[2,-1211,[879],[0],880]],[1,0.019827555865049362,-0.10041806101799011,0.21876633167266846],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Knjiga3",6,[[2,-1212,[881,882,883],[0],884]],[1,0.0275510773062706,0.2755368947982788,0.37950170040130615],[3,2.6448461390955867e-17,0.889286573935942,2.6448461390955867e-17,0.4573504011338291],[1,0.07074934989213943,0.08134007453918457,0.07074934989213943],[1,-1.3090993778577936e-15,125.56746910693077,4.081347516758649e-15]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Postolje",6,[[2,-1213,[885],[0],886]],[1,0.01893318071961403,-0.10135544091463089,0.25654658675193787],[1,3.5785953998565674,0.3498014211654663,12.985833168029785]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Klackalica_drzac",6,[[2,-1214,[887,888,889],[0],890]]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Fliper2",6,[[2,-1215,[891,892],[0],893]],[1,0.019285893067717552,0.044797178357839584,0.3091494143009186],[3,0.9543252170772791,0,0,-0.2987697776723816],[1,3.2097012996673584,1,1],[1,-145.2325437955522,0,0]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Jaje6",6,[[2,-1216,[894],[0],895]],[1,0.019827555865049362,-0.10041806101799011,0.32977592945098877],[1,0.007556006778031588,0.007556006778031588,0.007556006778031588]],[8,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Crveno_dugme_2_ram",6,[[2,-1217,[896,897,898],[0],899]]],[5,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Crveno_dugme_2_dugme",6,[[2,-1218,[900],[0],901]],[1,0.01857028901576996,-0.15856972336769104,0.15816515684127808],[1,2.5287539958953857,2.5287539958953857,2.5287539958953857]],[4,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:Drzac_1",6,[[2,-1219,[902],[0],903]],[1,0.020511049777269363,0.21086277067661285,0.18912875652313232],[3,0.18941240584988847,0,0,0.9818976222143311],[1,3.453078269958496,0.348013699054718,9.939024925231934],[1,21.83698974035872,0,0]],[116,"Main Light-001","f6rI3Nb61GUJz8B4EHrKY6",8,[[211,1.6927083333333335,-1220,[59]]],[3,-0.5132344856479748,-0.21926088807247834,-0.13752076595717747,0.8182927743991621],[1,-64.192,-30,0]],[117,"Main Camera-001","9dW9p4MLVLv4DvTYVbEHj7",8,[[209,0.01,1822425087,-1221]],[1,0,1.068,2.188]],[60,"RoomTranslator","94+5d9M2pHlparOiPrYmbA",8,[[212,-1222]]],[14,"TackaOkretanja",10,[1,0,-0.019,-0.348]],[38,"Camera",10,[[210,60,320,0.04,14,1822425087,-1223,[4,4294955909]]],[1,0,0,0.012]],[6,["a73z5JlwpBDo+oN4LTkpg1"]]],0,[0,7,144,0,7,145,0,7,146,0,7,20,0,7,207,0,7,147,0,7,208,0,7,209,0,7,210,0,7,211,0,7,6,0,0,1,0,0,1,0,-1,206,0,3,1,0,-3,55,0,-4,143,0,-5,369,0,-6,370,0,-7,371,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,-26,372,0,-27,373,0,-28,374,0,3,1,0,-30,375,0,3,1,0,-32,376,0,-33,377,0,-34,378,0,3,1,0,3,1,0,3,1,0,3,1,0,-39,379,0,-40,380,0,-41,381,0,-42,382,0,-43,383,0,-44,384,0,-45,385,0,-46,386,0,-47,144,0,-48,145,0,-49,146,0,-50,393,0,-51,207,0,-52,147,0,-53,208,0,-54,209,0,-55,210,0,-56,211,0,-57,401,0,-58,6,0,-59,212,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,-67,213,0,-68,20,0,7,102,0,7,12,0,7,191,0,7,123,0,7,192,0,7,193,0,7,194,0,7,195,0,7,5,0,0,2,0,0,2,0,-1,102,0,-2,57,0,-3,12,0,3,2,0,3,2,0,-6,33,0,-7,21,0,-8,190,0,3,2,0,3,2,0,3,2,0,3,2,0,-13,284,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,-32,285,0,-33,286,0,-34,287,0,3,2,0,-36,288,0,3,2,0,-38,289,0,-39,290,0,-40,291,0,3,2,0,3,2,0,3,2,0,-44,292,0,-45,293,0,-46,295,0,-47,296,0,-48,297,0,-49,298,0,-50,299,0,-51,300,0,-52,301,0,-53,302,0,-54,303,0,-55,304,0,-56,305,0,-57,306,0,-58,307,0,-59,191,0,-60,123,0,-61,192,0,-62,193,0,-63,194,0,-64,195,0,-65,5,0,-66,345,0,-67,124,0,0,3,0,25,256,0,0,3,0,0,3,0,26,257,0,27,11,0,0,3,0,0,3,0,-1,255,0,-2,35,0,-3,36,0,-4,37,0,-5,38,0,-6,39,0,-7,40,0,-8,41,0,-9,42,0,-10,43,0,-11,44,0,-12,11,0,-13,258,0,-14,171,0,-15,110,0,-16,15,0,-17,112,0,-18,113,0,-19,69,0,-20,45,0,-21,173,0,-22,174,0,-23,175,0,-24,176,0,-25,24,0,-26,178,0,-27,46,0,-28,47,0,-29,48,0,-30,49,0,-31,50,0,0,4,0,-1,348,0,-2,197,0,-3,30,0,-4,126,0,-5,127,0,-6,128,0,-7,129,0,-8,88,0,-9,18,0,-10,54,0,-11,31,0,-12,130,0,-13,131,0,-14,132,0,-15,133,0,-16,134,0,-17,135,0,-18,136,0,-19,137,0,-20,138,0,-21,139,0,-22,19,0,-23,140,0,-24,198,0,-25,199,0,-26,200,0,-27,201,0,-28,202,0,-29,203,0,-30,13,0,-31,204,0,-32,205,0,-33,141,0,-34,142,0,-1,315,0,-2,316,0,-3,317,0,-4,318,0,-5,319,0,-6,320,0,-7,321,0,-8,322,0,-9,323,0,-10,324,0,-11,325,0,-12,326,0,-13,327,0,-14,328,0,-15,329,0,-16,330,0,-17,331,0,-18,332,0,-19,333,0,-20,334,0,-21,335,0,-22,336,0,-23,337,0,-24,338,0,-25,339,0,-26,340,0,-27,341,0,-28,342,0,-29,343,0,-30,344,0,-1,402,0,-2,403,0,-3,404,0,-4,405,0,-5,406,0,-6,407,0,-7,408,0,-8,409,0,-9,410,0,-10,411,0,-11,412,0,-12,413,0,-13,414,0,-14,415,0,-15,416,0,-16,417,0,-17,418,0,-18,419,0,-19,420,0,-20,421,0,-21,422,0,-22,423,0,-23,424,0,-24,425,0,-25,426,0,-26,427,0,-27,428,0,-28,429,0,-29,430,0,-30,431,0,-1,70,0,-2,72,0,-3,73,0,-4,74,0,-5,75,0,-6,71,0,-7,25,0,-8,16,0,-9,76,0,-10,27,0,-11,28,0,-12,52,0,-13,26,0,-14,118,0,-15,119,0,-16,185,0,-17,186,0,-18,187,0,-19,188,0,-20,189,0,-21,274,0,-22,51,0,-23,17,0,-24,275,0,-25,120,0,-26,121,0,-27,276,0,-28,277,0,-29,122,0,-1,171,0,-2,110,0,-3,15,0,-4,112,0,-5,113,0,-6,173,0,-7,174,0,-8,175,0,-9,176,0,-10,178,0,-11,215,0,7,15,0,20,15,0,7,15,0,20,15,0,-1,217,0,-2,218,0,-3,219,0,-4,220,0,-5,149,0,-6,221,0,-7,222,0,-8,223,0,-10,32,0,-11,63,0,-12,125,0,-13,117,0,-14,196,0,-16,432,0,-17,433,0,-19,148,0,-20,434,0,-21,10,0,-22,216,0,-23,56,0,-24,14,0,0,9,0,-1,150,0,-2,233,0,-3,234,0,-4,235,0,-5,236,0,-6,237,0,-7,238,0,-8,239,0,-9,240,0,-10,241,0,-11,242,0,-12,151,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,435,0,-2,436,0,-3,214,0,-4,215,0,0,11,0,0,11,0,0,11,0,0,11,0,-1,168,0,-2,68,0,-3,111,0,28,32,0,0,12,0,0,12,0,-1,58,0,-2,59,0,-3,60,0,-4,61,0,-5,62,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,96,0,29,15,0,30,112,0,31,113,0,32,110,0,0,14,0,-1,34,0,-2,155,0,-3,156,0,-4,108,0,-5,157,0,11,15,0,0,16,0,0,16,0,0,16,0,0,16,0,-1,80,0,-2,81,0,-3,82,0,-4,83,0,-5,84,0,-6,85,0,0,18,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,90,0,-2,91,0,-3,92,0,-4,93,0,-5,94,0,-6,95,0,0,20,0,-1,97,0,-2,98,0,-3,99,0,-4,100,0,-5,101,0,0,21,0,33,64,0,0,21,0,0,21,0,34,117,0,0,21,0,0,21,0,-1,253,0,0,22,0,0,22,0,35,260,0,36,259,0,0,22,0,0,22,0,-1,169,0,-2,170,0,0,23,0,0,23,0,7,23,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,37,114,0,0,24,0,-1,177,0,-2,114,0,0,25,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,-1,28,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,-1,279,0,-2,280,0,-3,281,0,-4,282,0,-5,283,0,0,30,0,-1,86,0,-2,53,0,0,31,0,0,31,0,0,31,0,-1,89,0,0,32,0,-2,105,0,-1,153,0,-1,243,0,-2,245,0,-3,247,0,-4,249,0,-5,251,0,0,34,0,-1,184,0,-2,115,0,-3,64,0,-4,116,0,0,35,0,0,35,0,10,35,0,0,35,0,-1,158,0,0,36,0,0,36,0,10,36,0,0,36,0,-1,159,0,0,37,0,0,37,0,10,37,0,0,37,0,-1,160,0,0,38,0,0,38,0,10,38,0,0,38,0,-1,161,0,0,39,0,0,39,0,10,39,0,0,39,0,-1,162,0,0,40,0,0,40,0,10,40,0,0,40,0,-1,163,0,0,41,0,0,41,0,10,41,0,0,41,0,-1,164,0,0,42,0,0,42,0,10,42,0,0,42,0,-1,165,0,0,43,0,0,43,0,10,43,0,0,43,0,-1,166,0,0,44,0,0,44,0,10,44,0,0,44,0,-1,167,0,0,45,0,0,45,0,10,45,0,0,45,0,-1,172,0,0,46,0,0,46,0,18,263,0,10,46,0,0,46,0,-1,179,0,0,47,0,0,47,0,18,264,0,10,47,0,0,47,0,-1,180,0,0,48,0,0,48,0,18,265,0,10,48,0,0,48,0,-1,181,0,0,49,0,0,49,0,18,266,0,10,49,0,0,49,0,-1,182,0,0,50,0,0,50,0,18,267,0,10,50,0,0,50,0,-1,183,0,0,51,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,-1,87,0,0,54,0,0,54,0,0,54,0,-1,356,0,-2,358,0,-3,360,0,-4,362,0,-5,364,0,0,56,0,0,56,0,0,56,0,38,254,0,0,56,0,0,56,0,-1,103,0,-2,104,0,-3,232,0,0,58,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,62,0,0,63,0,-2,106,0,-1,154,0,0,64,0,-1,105,0,-1,115,0,0,64,0,-1,105,0,0,65,0,0,65,0,0,65,0,0,65,0,-1,106,0,0,66,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,-4,254,0,0,68,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,-3,269,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,-3,270,0,0,72,0,0,73,0,0,73,0,-3,271,0,0,73,0,0,74,0,0,74,0,-3,272,0,0,74,0,0,75,0,0,75,0,-3,273,0,0,75,0,-1,77,0,-2,78,0,-3,79,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,-3,349,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,-2,350,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,-2,351,0,0,96,0,0,96,0,0,97,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,101,0,-1,224,0,-2,225,0,-1,226,0,-2,227,0,-3,228,0,-1,229,0,-2,230,0,-3,231,0,0,107,0,0,107,0,0,107,0,0,108,0,-2,152,0,0,109,0,0,109,0,0,109,0,17,268,0,17,268,0,11,110,0,0,111,0,-2,257,0,0,111,0,11,112,0,11,113,0,0,114,0,0,114,0,0,115,0,-1,184,0,0,115,0,0,116,0,0,116,0,0,116,0,-1,269,0,-2,270,0,-3,271,0,-4,272,0,-5,273,0,0,117,0,0,118,0,0,118,0,0,118,0,0,119,0,0,119,0,0,119,0,0,120,0,0,120,0,0,120,0,0,121,0,0,121,0,0,121,0,0,122,0,0,122,0,0,122,0,-1,309,0,-2,310,0,0,124,0,-1,346,0,-2,347,0,0,125,0,0,125,0,0,125,0,0,126,0,0,126,0,0,126,0,0,127,0,0,127,0,0,127,0,0,128,0,0,128,0,0,128,0,0,129,0,0,129,0,0,129,0,0,130,0,0,130,0,0,130,0,0,131,0,0,131,0,0,131,0,0,132,0,0,132,0,0,132,0,0,133,0,0,133,0,0,133,0,0,134,0,0,134,0,0,134,0,0,135,0,0,135,0,0,135,0,0,136,0,0,136,0,0,136,0,0,137,0,0,137,0,0,137,0,0,138,0,0,138,0,0,138,0,0,139,0,0,139,0,0,139,0,0,140,0,0,140,0,0,140,0,0,141,0,0,141,0,0,141,0,0,142,0,0,142,0,0,142,0,-1,366,0,-2,367,0,-3,368,0,-1,387,0,-2,388,0,-1,389,0,-2,390,0,-1,391,0,-2,392,0,-1,395,0,-2,396,0,0,148,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,151,0,-2,152,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,0,161,0,0,162,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,0,167,0,0,168,0,0,168,0,0,169,0,-2,259,0,0,170,0,-2,260,0,11,171,0,0,172,0,0,172,0,11,173,0,17,261,0,17,261,0,11,174,0,11,175,0,11,176,0,0,177,0,0,177,0,17,262,0,17,262,0,11,178,0,0,179,0,-2,263,0,0,180,0,-2,264,0,0,181,0,-2,265,0,0,182,0,-2,266,0,0,183,0,-2,267,0,0,184,0,0,185,0,0,185,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,-1,278,0,-1,308,0,-1,311,0,-1,312,0,-1,313,0,-1,314,0,-1,349,0,-2,350,0,-3,351,0,-1,197,0,0,196,0,0,197,0,0,198,0,0,198,0,0,199,0,0,199,0,0,200,0,0,200,0,0,201,0,0,201,0,0,202,0,0,202,0,0,203,0,0,203,0,0,204,0,0,204,0,0,205,0,0,205,0,-1,352,0,-2,354,0,-1,394,0,-1,397,0,-1,398,0,-1,399,0,-1,400,0,0,212,0,0,212,0,0,213,0,0,213,0,0,214,0,0,214,0,21,435,0,17,437,0,17,437,0,11,215,0,0,216,0,0,216,0,0,217,0,0,218,0,0,219,0,0,220,0,0,221,0,0,222,0,0,223,0,0,224,0,0,225,0,0,226,0,0,227,0,0,228,0,0,229,0,0,230,0,0,231,0,0,232,0,0,233,0,0,234,0,0,235,0,0,236,0,0,237,0,0,238,0,0,239,0,0,240,0,0,241,0,0,242,0,-1,244,0,0,244,0,-1,246,0,0,246,0,-1,248,0,0,248,0,-1,250,0,0,250,0,-1,252,0,0,252,0,0,253,0,-1,256,0,0,274,0,0,275,0,0,276,0,0,277,0,0,278,0,0,279,0,0,280,0,0,281,0,0,282,0,0,283,0,0,284,0,0,285,0,0,286,0,0,287,0,0,288,0,0,289,0,0,290,0,0,291,0,0,292,0,-1,294,0,3,294,0,0,295,0,0,296,0,0,297,0,0,298,0,0,299,0,0,300,0,0,301,0,0,302,0,0,303,0,0,304,0,0,305,0,0,306,0,0,307,0,0,308,0,0,309,0,0,310,0,0,311,0,0,312,0,0,313,0,0,314,0,0,315,0,0,316,0,0,317,0,0,318,0,0,319,0,0,320,0,0,321,0,0,322,0,0,323,0,0,324,0,0,325,0,0,326,0,0,327,0,0,328,0,0,329,0,0,330,0,0,331,0,0,332,0,0,333,0,0,334,0,0,335,0,0,336,0,0,337,0,0,338,0,0,339,0,0,340,0,0,341,0,0,342,0,0,343,0,0,344,0,0,345,0,0,346,0,0,347,0,0,348,0,-1,353,0,0,353,0,-1,355,0,0,355,0,-1,357,0,0,357,0,-1,359,0,0,359,0,-1,361,0,0,361,0,-1,363,0,0,363,0,-1,365,0,0,365,0,0,366,0,3,367,0,3,368,0,3,369,0,3,370,0,0,371,0,0,372,0,0,373,0,0,374,0,0,375,0,0,376,0,0,377,0,0,378,0,0,379,0,0,380,0,0,381,0,0,382,0,0,383,0,0,384,0,0,385,0,0,386,0,0,387,0,0,388,0,0,389,0,0,390,0,0,391,0,0,392,0,0,393,0,0,394,0,0,395,0,0,396,0,0,397,0,0,398,0,0,399,0,0,400,0,0,401,0,0,402,0,0,403,0,0,404,0,0,405,0,0,406,0,0,407,0,0,408,0,0,409,0,0,410,0,0,411,0,0,412,0,0,413,0,0,414,0,0,415,0,0,416,0,0,417,0,0,418,0,0,419,0,0,420,0,0,421,0,0,422,0,0,423,0,0,424,0,0,425,0,0,426,0,0,427,0,0,428,0,0,429,0,0,430,0,0,431,0,0,432,0,0,433,0,0,434,0,0,436,0,39,8,1,3,8,2,3,8,3,3,8,4,3,196,7,3,117,9,3,57,22,3,258,23,3,69,29,3,190,65,3,156,66,3,108,67,3,108,107,3,155,109,3,157,1223],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,264,265,266,267],[-1,-2,1,1,-1,-2,-3,1,-1,-2,-3,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,22,23,24,-1,1,-1,4,-1,4,-1,1,-1,4,-1,4,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,-2,-3,1,-1,-2,-3,1,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,9,12,13,14,6,6,-1,4,6,40,-1,-2,15,15,15,15,6,9,6,9,12,13,14,15,15,15,15,6,6,6,15,6,9,6,9,6,9,6,9,6,9,15,-1,4,-1,1,1,-1,1,-1,4,-1,1,1,-1,4,-1,1,1,-1,-2,-3,-4,1,1,-1,-2,4,-1,1,1,-1,1,-1,4,1,-1,1,1,-1,1,-1,4,1,-1,1,1,-1,1,-1,4,1,-1,1,-1,4,-1,-2,-3,1,1,-1,-2,-3,1,1,-1,-2,-3,1,1,-1,1,1,-1,1,1,-1,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,-1,1,1,-1,-2,1,-1,1,1,-1,-2,-3,1,1,-1,-2,-3,1,-1,1,-1,1,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,-2,-3,1,-1,-2,-3,1,-1,-2,-3,1,-1,-2,-3,-4,1,-1,-2,-3,-4,-5,-6,-7,-8,1,-1,-2,-3,1,-1,-2,1,-1,-2,-3,1,-1,-2,1,-1,-2,-3,-4,-5,-6,1,-1,-2,-3,1,-1,-2,-3,-4,-5,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,-2,-3,-4,1,-1,-2,1,-1,-2,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,-2,-3,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,-2,-3,-4,-5,1,-1,1,-1,1,-1,4,-1,4,-1,1,1,-1,-2,-3,1,-1,1,-1,1,1,-1,1,1,-1,1,1,-1,4,-1,1,1,-1,-2,1,1,-1,1,1,-1,1,1,-1,1,16,1,-1,-2,1,1,-1,4,-1,1,16,1,-1,1,1,-1,1,-1,4,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,-2,1,1,-1,1,1,-1,1,1,-1,-2,1,1,-1,1,1,-1,1,16,1,-1,1,16,1,-1,1,16,1,-1,1,16,1,-1,1,16,1,-1,1,16,1,-1,1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,-1,1,16,1,-1,4,-1,-2,-3,1,-1,1,-1,1,-1,1,16,1,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,-1,1,-1,-2,1,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,1,8,-1,-2,-3,-4,1,-1,-2,-3,-4,-5,-6,-7,-8,1,-1,-2,-3,1,-1,-2,1,-1,-2,-3,1,-1,-2,1,-1,-2,-3,-4,-5,-6,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,-2,-3,-4,1,-1,-2,1,-1,-2,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,1,-1,-2,-3,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,1,-1,-2,-3,1,-1,1,-1,1,-1,-2,1,1,-1,-2,1,1,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,-1,1,-1,4,22,23,24,-1,4,41,42,43,44,-1,1,15,21,16,-1,4,-1,1,45,46,47,6,6,6,6,6],[22,52,25,25,174,19,175,176,37,9,19,177,178,20,53,179,9,180,181,182,62,183,38,184,38,185,62,186,38,187,38,188,9,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,26,214,2,2,26,215,2,2,26,216,2,2,26,217,2,2,26,218,2,2,23,63,39,64,65,40,40,41,41,64,65,40,40,41,41,11,219,220,11,221,222,11,223,224,11,225,226,11,227,228,66,229,230,231,232,33,233,234,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,1,1,1,12,13,235,236,67,67,68,68,237,238,239,240,241,242,69,69,1,1,1,12,13,243,244,245,246,247,248,249,250,17,17,17,17,17,17,17,17,17,17,251,70,70,10,4,4,7,252,54,54,18,71,71,72,72,10,4,4,253,254,255,256,73,73,54,74,74,10,4,4,257,75,76,76,75,10,4,4,18,77,78,78,77,10,4,4,7,79,80,80,79,258,259,81,81,55,260,56,82,82,55,261,56,83,83,55,262,56,84,84,263,85,85,7,86,86,7,87,87,7,18,27,27,7,18,264,27,7,18,265,27,7,18,266,27,7,18,267,27,18,7,268,28,88,88,28,89,89,28,90,90,28,91,91,28,92,92,28,93,93,7,269,270,7,94,94,7,18,271,95,95,272,7,18,273,274,275,7,96,96,276,277,9,278,34,279,34,280,34,281,34,282,34,283,22,284,57,285,97,57,286,19,287,288,19,289,290,58,291,292,58,293,294,58,295,296,297,22,97,298,98,299,300,301,302,24,303,304,9,42,24,57,305,9,42,24,26,37,99,100,101,306,37,9,19,307,98,308,309,9,19,42,310,9,19,311,19,24,100,101,99,37,312,313,314,24,315,9,52,5,102,24,103,316,317,22,318,11,319,11,320,11,321,11,322,11,323,11,324,42,19,9,325,5,326,327,328,29,329,5,330,43,331,44,332,5,333,5,334,335,104,5,14,336,5,14,337,5,14,338,339,340,43,341,44,342,5,14,343,5,14,344,14,5,345,14,346,29,347,29,348,14,349,29,350,43,351,44,352,29,353,43,354,44,355,5,356,5,14,104,357,5,14,358,29,359,360,5,14,361,362,363,5,364,9,52,5,102,24,103,53,365,53,366,105,105,106,106,3,45,45,367,368,3,369,370,371,21,107,107,10,4,4,372,108,108,109,109,3,110,110,111,373,112,112,111,113,113,3,114,114,115,46,116,46,374,375,117,117,118,118,376,119,120,119,10,4,4,21,377,121,121,3,21,122,122,3,21,123,123,3,21,124,124,3,21,125,125,3,21,126,126,378,379,127,127,3,47,47,3,47,47,21,3,128,128,3,45,45,380,129,30,129,381,130,30,130,382,131,30,131,383,132,30,132,384,133,30,133,385,134,30,134,386,135,135,3,387,10,4,3,388,3,389,3,390,3,391,10,4,4,392,136,120,136,137,137,393,3,21,394,395,396,10,397,115,46,116,46,138,398,399,138,400,401,15,402,403,15,404,405,15,406,407,15,408,409,15,410,411,412,413,414,415,416,59,417,35,59,418,20,419,420,20,421,422,60,423,424,60,425,426,60,427,428,31,48,33,59,429,31,48,33,23,49,39,139,140,430,49,31,20,431,66,432,433,31,20,48,434,31,20,435,20,33,139,140,39,49,436,437,438,33,439,35,440,35,441,35,442,35,443,31,444,445,446,49,141,20,447,15,448,15,449,15,450,15,451,15,452,15,453,48,20,141,454,6,455,22,456,6,457,458,459,32,460,6,461,50,462,51,463,6,464,6,465,466,142,6,16,467,6,16,468,6,16,469,470,471,50,472,51,473,6,16,474,6,16,475,16,6,476,16,477,32,478,32,479,16,480,32,481,50,482,51,483,32,484,50,485,51,486,6,487,6,16,142,488,6,16,489,32,490,491,6,16,492,493,494,6,495,496,22,25,25,22,22,25,25,23,497,2,2,23,498,2,2,23,499,2,2,23,500,2,2,23,501,2,2,23,63,39,143,143,502,503,504,505,10,506,507,508,509,144,144,10,510,511,512,513,36,36,36,36,36]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[80,0.5,0.3]],0,0,[],[],[]],[[[13,[{"rasterizerState":{},"depthStencilState":{"depthWrite":false},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]}},{},{}],[{},{},{}],[[[{"roughness":0.609,"metallic":0,"SpecularIntensity":0.447},"albedoScale",8,[1,0,0.1679999977350235,0],"emissive",8,[4,4292345807]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]}},{},{}],[{},{},{}],[[[{"alphaThreshold":0.556,"roughness":0.642,"metallic":0},"mainColor",8,[4,620756991],"albedoScale",8,[1,0.7529411911964417,0.7529411911964417,0.7529411911964417]],{},{}],11,0,0]]],0,0,[0],[2],[0]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[3,"zupcanik",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.32476919889450073},"albedoScale",8,[1,0.36079999804496765,0.36079999804496765,0.36079999804496765]]],11]]],0,0,[0],[2],[0]],[[[3,"Lift_SAMO_RAM_LIFTA_I_GOLDBERG:puma",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.1282442808151245,0.1282442808151245,0.1282442808151245]]],11]]],0,0,[0],[2],[0]],[[[3,"SE_Vessels_01a_Mat",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[514,0]],[[[3,"knjiga_1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0,0]]],11]]],0,0,[0],[2],[0]],[[[3,"Metal_High",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[515,0]],[[[3,"domino_5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[5,2],[516,0]],[[[3,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.5,0.5,0.5]]],11]]],0,0,[0],[2],[0]],[[[3,"metal_za_sraf",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.6068595051765442},"albedoScale",8,[1,0.5160305500030518,0.5160305500030518,0.5160305500030518]]],11]]],0,0,[0],[2],[0]],[[[3,"postolje",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.49053239822387695},"albedoScale",8,[1,0.800000011920929,0.46829333901405334,0]]],11]]],0,0,[0],[2],[0]],[[[3,"metal_za_tastere",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.4000000059604645,"roughness":0.30151134729385376},"albedoScale",8,[1,0.7450382113456726,0.7450382113456726,0.7450382113456726]]],11]]],0,0,[0],[2],[0]],[[[1,".bin",2812593090,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11712,"length":1920,"count":480,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":29760,"length":3840,"count":960,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11712,"count":244,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":13632,"length":16128,"count":336,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010404987260699272,0.003698925953358412,-0.010404990054666996],"maxPosition",8,[1,0.010404985398054123,0.020969903096556664,0.010404987260699272]]],-1],0,0,[],[],[]],[[[13,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{"roughness":0.724,"metallic":0},"rimLightColor",8,[4,4278255370],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[5,2],[517,8]],[[[1,".bin",694366133,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3456,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3456,"count":72,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,5.20388650894165,-0.4728440046310425,2.2271127700805664],"maxPosition",8,[1,5.41781759262085,-0.17615920305252075,2.2611870765686035]]],-1],0,0,[],[],[]],[[[1,".bin",2895649654,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4128,"length":984,"count":246,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":5496,"length":48,"count":12,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":12168,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4128,"count":86,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5112,"length":384,"count":8,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5544,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01943560130894184,-0.19459383189678192,-0.11916093528270721],"maxPosition",8,[1,0.058335643261671066,0.31577369570732117,0.14059923589229584]]],-1],0,0,[],[],[]],[[[3,"puma",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.1282442808151245,0.1282442808151245,0.1282442808151245]]],11]]],0,0,[0],[2],[0]],[[[3,"crveno_dugme",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.40720000863075256,0,0]]],11]]],0,0,[0],[2],[0]]]]
