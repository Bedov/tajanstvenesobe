[1,["20g1ukYUVPvKWKBRznAKo+@f9941","1brw/JvvpFnIvdrxpFCgMZ","196II7Vy5ANJv8zjhnNdNH","293CfbLclGL7Oy7kZdEqqM","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","7dTrleB7RAOpZ8q26BNWHx@f9941","79ef6/MQtMU5mr9z+baE2x","5eOmXsZLRDDpn09Es8efSD","8f/GXbOnBFMazzZhVjcVFr@f9941","e8i9bWASlBnqMwePhaxpII","77giJ88nVC5Yi7ot/VDGLH@f9941","01/PMzxEdPr5a7yi8GfLTs@f9941","afvd1MSZpMG47ilEKyKtR5@f9941","99FnIMlaZCV5Te9/SQC1iG@f9941","3alaeSErpAGKRyn/gxzygM@f9941","59L8BhQsBPY6vITQe1YcrA","17dVzQKt5PeIUrdj1Vksyb","9cePQKo+9FM6vvyibihB5X","0fMJwj8nlDA64MOXcEQE4L@f9941","7extOqKu5P9a0+GeeZt1Wp@f9941","052E/m4bNC24akI8cBq8rM@f9941","45ZvLxnfRM4KAtrMSD/Csn","71TMprhlJEALSkVDmM5qSO@f9941","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a6YfgLqAlOZZVYOEaheW3G@f9941","c0baqQFq1K1KVtFGtFKMrv","2b+id1mgxOgLG4ce6vfSDE@f9941","c0oHL5KbtMaZW7PYftgcl+@f9941","f1V91lkchM97j5zHB7VP6Y@f9941","72KQlWpm5F34/fDv6q/ZrB@f9941","467qh8pcFG556Oqo9n/5UC@f9941","85XZhXdK9EgL9pC3hGVwpN@f9941","9312Ih5VBF5ZQ0oxSsmy3w@f9941","deUeuhL9lOCbSXoEqwTK63@f9941","1e7qYCh1NOyYhqCnWW0USg@f9941","baZEVPmZxOG7RYvuyc6UWf@f9941","2aaPUMPuBCn5Sh1ho7333y@6c48a","c5CS2nbitCGaP8qrHHyZnM@f9941","60fyeX0xpHX57ZuVrj+kfB@f9941","3dNQpT9h1EBYIHoSpvbz2w@f9941","38qDcrrilJUqgsGR3xovtE@f9941","82XNgBsOtEZIq/XKUs9gXE","04licpDvVEL42MucE5F5h4","18a9nfkuJNQ49q0wfL0muv@f9941","f3HIZ81gZC7YVpnkHjEdoX@f9941","a6g6dTK7ZBR5hsDPMevPdL","d4U2MgAT9MK4E3Oz6uRFEb@e1c72","a3tFQY1QBPdaB3/fwZqazc@d81e5","85eTCt2nxKBaLQIAcs8L7B","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@a804a","a3tFQY1QBPdaB3/fwZqazc@73b7f","90QWII0DZJE6/jFIQyplvP","21LSOb4cNHb6cq40fE6uJM@c2cf9","33T8NlZNhOzaQS9gTPCU6a","21LSOb4cNHb6cq40fE6uJM@0b568","2bv9tE70BF8rVITJAv9FI3","0ccSPbCsRF45poxstVkxVy","2dYoAp7U9Bkbsk4BV9hUYY","11fqTspolPx5mP0Shdpk/w@f9941","53mRhSRLFMO7NhCX5yb2EG@f9941","9624gW77hDobh5uRm52xll@f9941","64C4rkBURNk5xezmwar1zd","c38SlMcVVL+owgGvJVghZ5@f9941","4dYbha6bVOorDtw8kPCcin","2dSdWRXK1H9L6FErItEaz/","00smFPpk9F66vdqjVJMGy7@6c48a","01/PMzxEdPr5a7yi8GfLTs@6c48a","052E/m4bNC24akI8cBq8rM@6c48a","08WGME9KJIi4+lgb7QOzgM@6c48a","0fMJwj8nlDA64MOXcEQE4L@6c48a","c8m+59YfRNSLBf6qminzdl@f9941","9eApoYhnRF0rneBm3JcBIA@f9941","dbHdmPAwtCSJ67MGNSOWo8@f9941","ceaqJWNdpD0r3MV16xNvCv@f9941","2bNhKWhY9CqpagMzY43Yyn@f9941","a9OIj5VftIDLnWLjIsm5te@f9941","e9WlgKByZPzIQxVrRAfdfT@f9941","92MgMo20VNK5/cc40QoKU6@f9941","19dC6i151FkYuKgjo6aGmY@f9941","00smFPpk9F66vdqjVJMGy7@f9941","11fqTspolPx5mP0Shdpk/w@6c48a","18a9nfkuJNQ49q0wfL0muv@6c48a","19dC6i151FkYuKgjo6aGmY@6c48a","1aDSxHXblKsJOwFxg2lz1C@6c48a","1e7qYCh1NOyYhqCnWW0USg@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","21SRIIds9NG4QCh3JhKkJj@6c48a","d4U2MgAT9MK4E3Oz6uRFEb@e873a","a3tFQY1QBPdaB3/fwZqazc@0975f","2bNhKWhY9CqpagMzY43Yyn@6c48a","a3zQCfCrBCDZJ4uf2rk5u8","2b+id1mgxOgLG4ce6vfSDE@6c48a","38qDcrrilJUqgsGR3xovtE@6c48a","39dUMVUHJPYIiv0QWo+7vN@6c48a","3alaeSErpAGKRyn/gxzygM@6c48a","3dNQpT9h1EBYIHoSpvbz2w@6c48a","467qh8pcFG556Oqo9n/5UC@6c48a","92vZJrzgFNvbgmjPYuYdUy@8ed8f","92vZJrzgFNvbgmjPYuYdUy@f15f6","4c+uewqG1OqIMUUBldDHcI@6c48a","53mRhSRLFMO7NhCX5yb2EG@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","a3tFQY1QBPdaB3/fwZqazc@a562b","a3tFQY1QBPdaB3/fwZqazc@e2b3d","60fyeX0xpHX57ZuVrj+kfB@6c48a","61GfyfWHBBjqvjmWrFp9pM@6c48a","63xExE8DJAw4nsSVpmvu5B@6c48a","66uSZ5gRZEM4WMrqepgpvt@6c48a","71TMprhlJEALSkVDmM5qSO@6c48a","72KQlWpm5F34/fDv6q/ZrB@6c48a","77giJ88nVC5Yi7ot/VDGLH@6c48a","a3tFQY1QBPdaB3/fwZqazc@897c1","a3tFQY1QBPdaB3/fwZqazc@24a1c","7cTJiPei1LmJTW7jP9fFlr@6c48a","7dTrleB7RAOpZ8q26BNWHx@6c48a","7extOqKu5P9a0+GeeZt1Wp@6c48a","85XZhXdK9EgL9pC3hGVwpN@6c48a","85rk0BUn5Jmr9RhwmaI2aM@6c48a","85swux2YxDBoz3rG3QkU/U@6c48a","eaHCIaC0tLSbYYPO79zAng@f9941","fbX9QGJh5DBbxiYoFpseyB@f9941","85swux2YxDBoz3rG3QkU/U@f9941","bcHYC5H+NKiYp1NipoD+YO@f9941","8f/GXbOnBFMazzZhVjcVFr@6c48a","92MgMo20VNK5/cc40QoKU6@6c48a","93g+7RYjhBOYGgxe0OVxwJ@6c48a","9312Ih5VBF5ZQ0oxSsmy3w@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","9624gW77hDobh5uRm52xll@6c48a","99FnIMlaZCV5Te9/SQC1iG@6c48a","21SRIIds9NG4QCh3JhKkJj@f9941","1aDSxHXblKsJOwFxg2lz1C@f9941","9eApoYhnRF0rneBm3JcBIA@6c48a","e3yjLOGPBMv4vZhRWOmE7N","c1Fv2ajzBAs7LAJ+WrJwZi","9c5J5JqhJAH7TnNqbDdZ9a","8abq3ykBZJ0ouP4ihcnpi6","a3tfaybRdINIIEnud35BkU","8cG7/0I/RLuo62XViJtpgl","10Bny3mvFIh7Yw7w32Ah0T","e8N7TArsNKjYTYiJWxOlMW","c2tgM9yp1EmbLNSV8QyuSa","e8zHZLnkdF1oUqS8pzl2Nh","d3FS7fQQ1HvbANJl4nZCbf","0fz6K+r/tIrZLIpSmyzrje","502BbTOO1BHZoEENQqdYIv","1bR9C3L+pNe4lJvOT/0qy7","45oQMCBpJGmaJPkuP2rBcV","b7LW9hFXxLPKyoBzgVvn5c","293BQccr1AP7BOSO4GH/DO","a3tFQY1QBPdaB3/fwZqazc@475e8","a5sBBnAC9Jeoi3b7lAHhcE","a3tFQY1QBPdaB3/fwZqazc@9e7e2","a3tFQY1QBPdaB3/fwZqazc@30732","a3tFQY1QBPdaB3/fwZqazc@5cdea","a3tFQY1QBPdaB3/fwZqazc@f1394","a3tFQY1QBPdaB3/fwZqazc@2c0db","a3tFQY1QBPdaB3/fwZqazc@75ee4","a3tFQY1QBPdaB3/fwZqazc@59690","a3tFQY1QBPdaB3/fwZqazc@a72ab","a3tFQY1QBPdaB3/fwZqazc@90648","a3tFQY1QBPdaB3/fwZqazc@2224c","a3tFQY1QBPdaB3/fwZqazc@89410","a3tFQY1QBPdaB3/fwZqazc@62756","a3tFQY1QBPdaB3/fwZqazc@b0974","a3tFQY1QBPdaB3/fwZqazc@7d08b","a3tFQY1QBPdaB3/fwZqazc@259c8","a3tFQY1QBPdaB3/fwZqazc@b5902","a3tFQY1QBPdaB3/fwZqazc@39fda","a3tFQY1QBPdaB3/fwZqazc@2d5df","a3tFQY1QBPdaB3/fwZqazc@18e11","a3tFQY1QBPdaB3/fwZqazc@8feb8","a3tFQY1QBPdaB3/fwZqazc@5e4b9","a3tFQY1QBPdaB3/fwZqazc@ad32d","a3tFQY1QBPdaB3/fwZqazc@f7789","a3tFQY1QBPdaB3/fwZqazc@df8aa","a3tFQY1QBPdaB3/fwZqazc@010dc","a3tFQY1QBPdaB3/fwZqazc@2bf59","a3tFQY1QBPdaB3/fwZqazc@4888e","a3tFQY1QBPdaB3/fwZqazc@531c4","a3tFQY1QBPdaB3/fwZqazc@96361","a3tFQY1QBPdaB3/fwZqazc@1c110","a3tFQY1QBPdaB3/fwZqazc@053f7","a3tFQY1QBPdaB3/fwZqazc@0e3d2","a3tFQY1QBPdaB3/fwZqazc@97ed4","a3tFQY1QBPdaB3/fwZqazc@14d80","a3tFQY1QBPdaB3/fwZqazc@7ae76","a3tFQY1QBPdaB3/fwZqazc@bf9eb","4a2PAuFQBLK5PS5a2BVKpq","92vZJrzgFNvbgmjPYuYdUy@6f07a","74WlibvuFIwYYQCo7uqRZ6","61iKU4emZEFJnfzHVirqlT","a3tFQY1QBPdaB3/fwZqazc@4dac6","a3tFQY1QBPdaB3/fwZqazc@a3981","baPscGyudFsJSvudjQKbd9","a3tFQY1QBPdaB3/fwZqazc@797eb","a3tFQY1QBPdaB3/fwZqazc@51e63","c8+liSSfdC/prtZT9uzFfX","a3tFQY1QBPdaB3/fwZqazc@e1c72","a3tFQY1QBPdaB3/fwZqazc@3d3f2","7au2FEqBBLM7JwcslDAr74","a3tFQY1QBPdaB3/fwZqazc@c4b24","a3tFQY1QBPdaB3/fwZqazc@36f4d","a3tFQY1QBPdaB3/fwZqazc@2d3bb","a3tFQY1QBPdaB3/fwZqazc@30f6f","a3tFQY1QBPdaB3/fwZqazc@7215d","a3tFQY1QBPdaB3/fwZqazc@6ec65","a3tFQY1QBPdaB3/fwZqazc@a7f49","a3tFQY1QBPdaB3/fwZqazc@49210","a3tFQY1QBPdaB3/fwZqazc@2689e","a3tFQY1QBPdaB3/fwZqazc@7ae2d","a3tFQY1QBPdaB3/fwZqazc@88e35","a3tFQY1QBPdaB3/fwZqazc@39f5e","a3tFQY1QBPdaB3/fwZqazc@6156a","a3tFQY1QBPdaB3/fwZqazc@e18c1","a3tFQY1QBPdaB3/fwZqazc@0d7c5","a3tFQY1QBPdaB3/fwZqazc@2e1ac","a3tFQY1QBPdaB3/fwZqazc@a7619","a3tFQY1QBPdaB3/fwZqazc@599e7","b3o0YNyNRPvbHEEg8EjHTz","7395AOZydG1ZG3uMxfVSCe","4c9W3cjKVEPIEKZ5kuvkfX","08WGME9KJIi4+lgb7QOzgM@f9941","05YZnwy3FF/5HomZLht4Um@8d883","05YZnwy3FF/5HomZLht4Um@5c41d","a6YfgLqAlOZZVYOEaheW3G@6c48a","a9OIj5VftIDLnWLjIsm5te@6c48a","afvd1MSZpMG47ilEKyKtR5@6c48a","61GK440+lD2Y/og61jqSeV@24a1c","b87Tk4yHlEXYtMj0gD3xzz@6c48a","36bCydMb5OmK9AQ0W0RKxR@a562b","baZEVPmZxOG7RYvuyc6UWf@6c48a","bcHYC5H+NKiYp1NipoD+YO@6c48a","c0oHL5KbtMaZW7PYftgcl+@6c48a","61GfyfWHBBjqvjmWrFp9pM@f9941","63xExE8DJAw4nsSVpmvu5B@f9941","93g+7RYjhBOYGgxe0OVxwJ@f9941","c5gVeNmHVPpoTlEF84Jvnl@f9941","66uSZ5gRZEM4WMrqepgpvt@f9941","85rk0BUn5Jmr9RhwmaI2aM@f9941","7cTJiPei1LmJTW7jP9fFlr@f9941","39dUMVUHJPYIiv0QWo+7vN@f9941","c38SlMcVVL+owgGvJVghZ5@6c48a","c5CS2nbitCGaP8qrHHyZnM@6c48a","c5gVeNmHVPpoTlEF84Jvnl@6c48a","c8m+59YfRNSLBf6qminzdl@6c48a","a3tFQY1QBPdaB3/fwZqazc@e873a","ceaqJWNdpD0r3MV16xNvCv@6c48a","66PCHmSKJFgLt5M02Fkqvy","dbHdmPAwtCSJ67MGNSOWo8@6c48a","deUeuhL9lOCbSXoEqwTK63@6c48a","4c+uewqG1OqIMUUBldDHcI@f9941","b87Tk4yHlEXYtMj0gD3xzz@f9941","fdA0a5PndJA5DcaP525Bg8","a3tFQY1QBPdaB3/fwZqazc@08c8c","a3xpCGrxpLwa9LwraHwecc","6c/wF4pVVAzaKO4r47hJbg","f1jklKJyVFEYCdgX0EBzVx","90R6CfsJ5MeI1VQUcMnZdO","e9WlgKByZPzIQxVrRAfdfT@6c48a","eaHCIaC0tLSbYYPO79zAng@6c48a","f1V91lkchM97j5zHB7VP6Y@6c48a","f3HIZ81gZC7YVpnkHjEdoX@6c48a","fbX9QGJh5DBbxiYoFpseyB@6c48a"],["node","_spriteFrame","_textureSource","_parent","_mesh","_normalSprite","root","_target","_skeleton","targetInfo","_effectAsset","data","_defaultClip","_font","asset","_hoverSprite","_pressedSprite","_disabledSprite","target","mainTexture","turnOffSoundButton","genericTekst","source","loadingPanel","Joystick_Ball","normalMap","_cameraComponent","arrow","subtitle","gameManager","genericUIinput","genericUIABC","genericUIimage","genericUI","pin","myTask","arrowDot","scene","_clip","_envmapHDR","_envmapLDR","zvukCheckpoint","inversionToggle","speedSlider","muteSoundIcon","normalSoundIcon","inverseRotationIcon","normalRotationIcon","genericImage","_placeholderLabel","_textLabel","_backgroundImage","C","B","A"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_objFlags","_id","__editorExtras__","_components","_parent","_lpos","_prefab","_children","_lscale","_lrot","_euler"],-3,9,1,5,4,2,5,5,5],["cc.Widget",["_alignFlags","_top","_bottom","_right","_left","_originalHeight","_originalWidth","_verticalCenter","_horizontalCenter","_isAbsTop","node","__prefab","_target"],-7,1,4,1],"cc.ImageAsset",["cc.Sprite",["_sizeMode","_type","_enabled","_isTrimmedMode","node","__prefab","_spriteFrame","_color"],-1,1,4,6,5],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_lineHeight","_isSystemFontUsed","_cacheMode","_horizontalAlign","_isBold","node","__prefab","_font","_color"],-7,1,4,6,5],["cc.Node",["_name","_layer","_active","_parent","_components","_lpos","_prefab","_children","_lscale","_lrot","_euler"],0,1,12,5,4,12,5,5,5],["cc.Button",["_transition","node","__prefab","clickEvents","_normalSprite","_target","_normalColor","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,4,9,6,1,5,6,6,6],["cc.MeshRenderer",["_name","_enabled","_shadowReceivingMode","node","_materials","lightmapSettings","_mesh","__prefab"],0,1,3,4,6,4],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["cc.Animation",["playOnLoad","node","_clips","_defaultClip","__prefab"],2,1,3,6,4],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.Layout",["_layoutType","_spacingX","_resizeMode","_paddingLeft","_paddingBottom","_spacingY","_verticalDirection","_isAlign","node","__prefab"],-5,1,4],["cc.AudioSource",["_playOnAwake","_loop","node","__prefab","_clip"],1,1,4,6],["e1c9aDlWYxIXJgfYPO13PQz",["remoteName","lastTask","taskType","uvodniTask","node","dependencies"],-1,1,2],"cc.TextureCube",["cc.Node",["_name","_parent","_children","_lpos","_lrot","_euler","_lscale"],2,1,9,5,5,5,5],["cc.PrefabInfo",["fileId","root","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,1,9,2],["c6dcclgG8JJ/Z49xlaBATci",["defaultOff","node","__prefab"],2,1,4],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["e9ae6+GlNxJTJyq0CO9y9cL",["justTutorialLock","node","__prefab"],2,1,4],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["39cafqCRjhLgY4Ri2Nc42rg",["node","myTask"],3,1,1],["cc.Camera",["_orthoHeight","_clearFlags","_visibility","_projection","_priority","_far","_near","node","_color"],-4,1,5],["cc.Toggle",["_isChecked","node","__prefab","clickEvents","_normalColor","_target","checkEvents","_checkMark"],2,1,4,9,5,1,9,1],["27b26tXhJpAmqyX0ZVyBte1",["node","__prefab","genericTekst","turnOffSoundButton","genericImage"],3,1,4,1,1,1],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_props","_defines"],1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab","_lpos","_lscale"],1,1,2,12,4,5,5],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["5c02b7JeTlKBr6JnixdRKMO",["node","__prefab"],3,1,4],["7888er9L5dD27D9n0HBZzZL",["node","__prefab"],3,1,4],["5cdd7h8Pm9OHoswZvpIMNss",["node","__prefab"],3,1,4],["41fbfai5zxKQZc5j0pBvvN3",["Joystick_Vector","Joystick_Max","node","__prefab","Joystick_Ball"],1,1,4,1],["cc.TTFFont",["_name","_native"],1],["13d41xH5NZFS4DiJLV/2hQt",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["523caEBgsFEWJ4UlrBYMTEF",["node","__prefab"],3,1,4],["b85daTgyldHXqbXZwAESfzl",["node","__prefab"],3,1,4],["cc.SceneAsset",["_name"],2],["cc.SkeletalAnimation",["playOnLoad","node","_clips","_sockets","_defaultClip"],2,1,3,9,6],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["a66f8v69b1JzKZyFYaNNW8n",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["10766yRyDZO/YoOzw3yin5X",["node"],3,1],["9606fdFb8VE8JJFItYrtveI",["node","genericUI","genericUIimage","genericUIABC","genericUIinput","canvas","gameManager","subtitle","arrow","loadingPanel"],3,1,1,1,1,1,1,1,1,1,1],["6f152n/6stPc7v81ZlKK38A",["moveSpeed","rotateSpeed","maxAngleUp","node"],0,1],["cc.RigidBody",["_mass","_linearDamping","_angularDamping","node","_angularFactor"],0,1,5],["934004W0apF6p4lgxoYjh2m",["globalManagerReference","node"],2,1],["96ae6+09F5HYa6C01wPMta+",["distanceScale","node","eulerRotation","pin"],2,1,5,1],["aff9fcmgnRAv6/ZwXTsi9l9",["moveSpeed","node"],2,1],["cc.CapsuleCollider",["_radius","_cylinderHeight","node","_center"],1,1,5],["cc.Scene",["_name","autoReleaseAssets","_children","_prefab","_globals"],1,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5],["cc.ShadowsInfo",["_bias","_near","_far","_saturation","_shadowColor"],-1,5],["cc.SkyboxInfo",["_enabled","_useHDR","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",["_type","_fogDensity","_fogStart","_fogTop","_fogColor"],-1,5],["cc.OctreeInfo",[],3],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["cc.CylinderCollider",["_radius","_height","node"],1,1],["688cbJkASVLcZYh6gn++ERZ",["node"],3,1],["69fcft23j9BQb5GQtrenmFo",["LevelName","LanguageName","node","Canvas","WorldRoot","TaskManager","Player"],1,1,1,1,1,1],["c1a91TDAYxGxoE8SUSQ4ovd",["node","loadingPanel"],3,1,1],["37bcfOsZGlNz6jGQQBQgChf",["node"],3,1],["2e706IUcmpO8Z7VRvWDJPru",["reportToUser","remoteName","expectedQuestions","node","dependencies"],0,1,2],["a3dbfC83IFDIqD8PegH/s0l",["reportToUser","remoteName","expectedQuestions","node","dependencies"],0,1,2],["3607dRmrqJLM7d1d76n8BmS",["arrowHeight","node","arrowDot"],2,1,1],["cc.ModelLightmapSettings",[],3],["cc.MeshCollider",["node","_mesh"],3,1,6],["cc.SkinnedMeshRenderer",["node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,3,4,1,6,6],["2c696ZJ5oVMb5OaK9/2m3t8",["node","dependencies"],3,1,2],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","node","_staticSettings"],1,1,4],["cc.StaticLightSettings",[],3],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.AudioClip",["_name","_native","_duration"],0],["861c4VLRgZKYJDhIb2CRjAR",["node","__prefab","normalRotationIcon","inverseRotationIcon","normalSoundIcon","muteSoundIcon","speedSlider","inversionToggle","zvukCheckpoint"],3,1,4,1,1,1,1,1,1,1],["cc.Slider",["_progress","node","__prefab","slideEvents","_handle"],2,1,4,9,1],["6be17T1cABOeK5AD2965d47",["node","__prefab","genericTekst","turnOffSoundButton"],3,1,4,1,1],["cc.EditBox",["_inputMode","_maxLength","node","__prefab","_textLabel","_placeholderLabel","_backgroundImage"],1,1,4,1,1,6],["8b0d18LctJAWqNwBufmwTVF",["node","__prefab","genericTekst","A","B","C","turnOffSoundButton"],3,1,4,1,1,1,1,1]],[[31,0,2],[17,0,1,2,2],[9,0,1,2,1],[57,0,2],[1,0,7,10,8,12,13,2],[76,1],[27,0,1,2,3],[67,0,1,2,2],[4,0,4,5,6,2],[4,1,0,4,5,6,3],[19,0,1,2,3,4],[1,0,7,8,12,13,2],[8,3,4,5,6,1],[1,0,1,7,6,9,8,3],[16,0,1,2,3,4,5,2],[4,4,5,6,1],[1,0,7,6,8,11,2],[1,0,7,6,8,2],[78,0,1,2,3,4,5,1],[82,0,1,2,3,4],[65,0,1,2,2],[1,0,1,7,6,9,8,11,3],[66,0,1,2,3],[29,0,2],[1,3,5,7,9,3],[32,0,1,2,3,2],[1,0,1,7,10,6,9,8,3],[1,0,7,6,8,12,11,13,2],[7,0,1,2,3,6,5,4,7,8,9,2],[19,0,1,3,3],[1,0,7,8,2],[18,1,2,1],[7,1,2,3,4,1],[21,0,1,2,2],[23,0,1,1],[9,0,1],[4,4,1],[1,0,7,10,8,12,11,13,2],[1,0,7,10,6,2],[1,0,6,8,11,2],[1,0,3,1,7,6,9,8,11,4],[1,0,2,1,7,6,9,8,4],[2,0,2,10,11,3],[22,0,2,2],[22,0,1,2,3],[64,0,1,2,3],[72,0,1],[14,0,4,5,2],[11,2,0,1,4,4],[11,0,1,4,3],[1,0,1,10,6,9,8,3],[1,0,1,7,6,9,8,12,11,13,3],[1,0,7,6,8,12,13,2],[5,0,1,2,3,4,6,10,11,12,7],[10,0,1,4,2,3,2],[7,1,2,3,6,5,4,1],[1,0,1,7,6,9,3],[1,0,7,6,2],[1,0,2,1,7,6,9,4],[16,0,1,2,3,4,6,5,2],[9,0,1,2,3,1],[2,0,1,2,5,10,11,5],[2,0,2,10,11,12,3],[44,0,1,2],[1,0,2,1,7,6,9,8,11,4],[1,0,7,8,12,11,13,2],[1,0,2,1,10,6,9,8,4],[2,0,4,3,1,2,8,7,6,5,10,11,10],[4,0,4,5,7,6,2],[5,0,1,2,5,3,4,10,11,7],[18,0,1,2,2],[10,1,4,2,3,1],[73,0,1,2,3,4,4],[74,0,1,2,3,4,4],[1,0,7,10,12,13,2],[1,0,3,2,1,7,6,9,5],[1,0,3,1,7,6,9,11,4],[30,0,1,2,3,4,5,6,7,3],[2,0,6,5,10,11,4],[2,0,1,8,7,10,11,12,5],[2,0,1,7,10,11,12,4],[4,4,5,7,6,1],[5,0,8,1,2,5,3,4,6,9,7,10,11,12,11],[5,0,1,2,5,3,6,7,10,11,12,8],[10,0,1,2,3,2],[7,0,1,2,3,4,2],[37,0,1,3],[38,0,1,1],[21,1,2,1],[56,0,1,2,3,4,2],[13,0,2,3,2],[1,0,3,2,1,7,6,9,8,5],[1,0,2,1,10,6,9,4],[1,0,2,10,6,8,12,11,13,3],[1,0,7,6,11,2],[9,0,1,1],[9,0,2,1],[2,0,4,2,10,11,4],[2,0,3,10,11,3],[2,0,3,2,10,11,12,4],[2,10,11,1],[2,0,1,2,7,10,11,12,5],[4,0,4,5,2],[5,0,1,2,3,4,10,11,13,6],[10,1,2,3,1],[7,0,1,2,3,5,4,2],[39,0,1,2,4],[20,1,2,1],[20,0,1,2,2],[45,0,1],[68,0,1,2,3],[8,1,3,4,5,6,2],[8,0,1,3,4,5,6,3],[8,0,2,3,4,5,6,3],[11,3,0,1,4,4],[28,0,1,3],[1,0,1,10,6,9,3],[1,0,2,1,7,10,6,9,8,11,4],[1,0,1,7,6,9,11,3],[1,0,1,6,9,8,11,3],[1,0,3,2,1,6,9,8,11,5],[1,0,10,6,2],[1,0,1,4,10,6,8,4],[1,0,4,10,6,3],[1,0,4,10,6,8,3],[1,0,4,7,6,3],[1,0,4,7,10,3],[1,0,4,7,10,6,8,11,3],[1,0,7,6,12,11,13,2],[1,0,2,4,7,10,4],[1,0,7,10,2],[1,0,4,7,6,12,13,3],[1,0,2,1,10,6,9,8,11,4],[1,0,2,10,6,9,8,3],[1,0,7,6,9,12,11,13,2],[1,0,1,7,10,6,9,8,11,3],[1,0,2,1,7,10,6,9,8,4],[1,0,3,1,7,6,9,4],[1,0,2,1,7,6,9,11,4],[1,0,3,1,7,6,9,8,4],[6,0,3,7,2],[6,0,3,7,5,9,8,10,2],[6,0,3,4,5,2],[6,0,1,3,4,6,5,8,3],[6,0,2,1,3,4,6,4],[6,0,1,3,4,6,3],[6,0,1,3,4,6,5,3],[6,0,2,1,3,4,6,5,4],[2,0,3,1,2,10,11,5],[2,0,4,3,1,6,10,11,6],[2,0,1,10,11,3],[2,0,4,3,9,6,5,10,11,7],[2,0,4,10,11,3],[2,0,4,3,10,4],[2,0,4,3,1,2,6,5,10,8],[2,0,1,8,7,10,11,5],[2,0,3,1,2,5,10,11,6],[2,0,1,7,10,11,4],[2,0,1,2,5,10,11,12,5],[2,0,4,3,1,2,6,5,10,11,8],[17,3,4,1],[12,0,1,8,9,3],[12,2,0,3,1,8,9,5],[12,0,4,5,6,7,8,9,6],[33,0,1,1],[4,2,1,0,4,5,7,6,4],[4,1,0,4,5,7,6,3],[4,0,4,5,7,2],[4,0,3,4,5,6,3],[5,0,1,2,3,4,6,7,10,11,12,8],[5,0,1,2,5,3,4,10,11,13,7],[5,0,8,1,2,5,3,6,7,10,11,12,9],[5,0,8,1,2,5,3,4,10,11,13,8],[5,0,1,2,5,6,7,10,11,12,7],[5,0,1,2,5,3,4,6,10,11,13,12,8],[34,0,1,1],[35,0,1,1],[10,1,2,1],[7,1,2,3,6,5,4,7,8,9,1],[7,1,2,6,5,4,1],[7,1,2,3,1],[36,0,1,2,3,4,3],[40,0,1,1],[41,0,1,1],[42,0,2],[43,0,1,2,3,4,2],[46,0,1,1],[47,0,1],[48,0,1,2,3,4,5,6,7,8,9,1],[49,0,1,2,3,4],[50,0,1,2,3,4,4],[51,0,1,2],[52,0,1,2,3,2],[53,0,1,2],[54,0,1,2,3,3],[55,0,1,2,3,4,3],[58,0,1,2,3,4,1],[59,0,1,2,3,2],[60,0,1,2,3,4,5],[61,0,1,2,3,3],[62,0,1,2,3,4,5],[63,1],[23,0,1],[69,0,1],[70,0,1,2,3,4,5,6,3],[71,0,1,1],[13,1,0,2,4,3],[13,2,3,1],[14,0,1,2,4,5,4],[14,3,0,4,3],[75,0,1,2,2],[8,0,3,4,5,6,2],[8,3,7,4,5,6,1],[77,0,1,1],[24,3,4,0,5,1,2,7,8,7],[24,0,6,1,2,7,8,5],[79,0,1,1],[80,0,1,2,3,3],[81,1],[83,0,1,2,4],[84,0,1,2,3,4,5,6,7,8,1],[85,0,1,2,3,4,2],[25,0,1,2,3,4,5,6,7,2],[25,1,2,3,4,5,6,7,1],[26,0,1,2,4,3,1],[26,0,1,2,3,1],[86,0,1,2,3,1],[87,0,1,2,3,4,5,6,3],[88,0,1,2,3,4,5,6,1]],[[[{"name":"dzojstik veci deo","rect":{"x":0,"y":0,"width":760,"height":760},"offset":{"x":0,"y":0},"originalSize":{"width":760,"height":760},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[67]],[[{"name":"ListenButton","rect":{"x":0,"y":0,"width":74,"height":73},"offset":{"x":0,"y":0},"originalSize":{"width":74,"height":73},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[68]],[[[6,".bin",3366267966,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19920,"length":5760,"count":1440,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19920,"count":415,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010000004433095455,-0.0011890883324667811,-0.009945226833224297],"maxPosition",8,[1,0.009999999776482582,0.0011890883324667811,0.020078690722584724]]],-1],0,0,[],[],[]],[[[48,"lambert1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{},"albedoScale",8,[1,0.800000011920929,0,0]]],11]]],0,0,[0],[10],[1]],[[{"name":"Oktaceno","rect":{"x":0,"y":0,"width":219,"height":221},"offset":{"x":0,"y":0},"originalSize":{"width":219,"height":221},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[69]],[[{"name":"Moving Symbol white","rect":{"x":45,"y":16,"width":123,"height":166},"offset":{"x":6.5,"y":1},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[70]],[[{"name":"TogetherOff","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[71]],[[[23,"BottomUI"],[50,"BottomUI",33554432,[-4,-5,-6,-7,-8,-9],[[95,-2,[0,"beZy4FiIdIn6LHaCPTWHQ7"]],[42,4,-5.732999999999976,-3,[0,"88RNN7459Hy6RqbYuZsx7a"]]],[1,"efVuuN4VNA451kUZLxLIN7",-1,0],[1,0,-255.73299999999995,0]],[116,"Numbers",33554432,[-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23],[[2,-10,[0,"acG2u3bOFESpmVuCiaqtPz"],[5,1000,100]],[161,1,11,-11,[0,"75iNJ+6lpDGJx5fozDrCE3"]],[164,-12,[0,"e4408H6KVNa6F4kraRc2vx"]]],[1,"9bvKLpqZlAbLLuOTBhCNnn",1,0]],[117,"Keyboard",false,33554432,1,[-27,2],[[2,-24,[0,"36eLEma8dGXLhtpif23foP"],[5,2000,120]],[165,false,1,0,-25,[0,"f1Q/iUHxZHCJB2qLO0ulZc"],[4,4282335039],63],[42,4,2.6379999999999972,-26,[0,"f0mobHILtFXLgXZQl9bxUD"]]],[1,"e4SOg9R1FCkp07OJ/kYSto",1,0],[1,0,0.6379999999999981,0],[1,0.8,0.8,0.8]],[91,"FPS",512,false,33554432,1,[[2,-28,[0,"20mUUUK95MD60NBYJkIqsp"],[5,100,60]],[103,"66",33,33,1,false,-29,[0,"b3US1VhoZIGr5BL5WrBCTC"],[4,4294966440]],[148,36,-11.229,909.421,64.995,-30,[0,"2cMNMjakNEp74UyPfVhMhO"]],[70,false,-31,[0,"9dtYXz/zZIZ5O00gv9uRWo"]],[175,-32,[0,"7cgKg+KadF+opdRs0NPog0"]]],[1,"3c6s5OGbpLabjQsWWC5T5h",1,0],[1,11.229,44.995000000000005,0]],[26,"TrofejiLayout",33554432,1,[-36],[[2,-33,[0,"720xYCb6JB3KT/41ywP/b6"],[5,61,40]],[162,1,1,1,3,-34,[0,"133YUIcktJRLVuqpCtb+/W"]],[176,-35,[0,"5aJH7hZhZHspt3uB7ZzP9Y"]]],[1,"b6ahCWwmxN6JeXrYRosA9s",1,0],[1,11.962,-4.848,0]],[26,"trofej zakljucan",33554432,5,[-40],[[2,-37,[0,"4eGEcw4qhAObrmDzXcDgPI"],[5,60,60]],[8,0,-38,[0,"7cwFWGT0VKZo09aMp15TKT"],4],[71,-39,[0,"398Xpbt/pNbqrQQMw/VYgp"],[5],6]],[1,"5782G+CQZKEo6TdVMLxa5W",1,0],[1,0.5,-2.761000000000003,0]],[13,"0",33554432,2,[[2,-41,[0,"3bfL1dcxRLo5zdlbTLfAZz"],[5,80,70]],[9,1,0,-42,[0,"4dsgoyGK5D4LV7LJoU4q2e"],8],[28,2,-44,[0,"53O0QW3KBInanexR3Q/kdY"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","0",2]],[4,4292269782],-43,9,10,11,12]],[1,"b3mvOtTq9DR6u3SrP4ZpWq",1,0],[1,-460,0,0]],[13,"1",33554432,2,[[2,-45,[0,"6cIW444elKh5dRZ6qUp7br"],[5,80,70]],[9,1,0,-46,[0,"605hIVfw5J5aRLd4wR0y2P"],13],[28,2,-48,[0,"25YwN+SJNOQrfjlbtqAwZ7"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","1",2]],[4,4292269782],-47,14,15,16,17]],[1,"eceU07CAlKBpLLmnyXoH+M",1,0],[1,-369,0,0]],[13,"2",33554432,2,[[2,-49,[0,"8eELQkfRtG4Lu6n3eLEazG"],[5,80,70]],[9,1,0,-50,[0,"b3UP2khNlJNpxXDciHu0tU"],18],[28,2,-52,[0,"3b/TTloxJB6asBkqwsQn4P"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","2",2]],[4,4292269782],-51,19,20,21,22]],[1,"38Tbwdt41L17Y5rWkHBVsB",1,0],[1,-278,0,0]],[13,"3",33554432,2,[[2,-53,[0,"aaS3GP6bNA06jBhDaWZ3Po"],[5,80,70]],[9,1,0,-54,[0,"97ZK3MUwFILpc+uTCXSAYR"],23],[28,2,-56,[0,"e32NSBm+NH7L5WS31xfplS"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","3",2]],[4,4292269782],-55,24,25,26,27]],[1,"1eCsS8jKhOOK3xNsrtJQmF",1,0],[1,-187,0,0]],[13,"4",33554432,2,[[2,-57,[0,"7dVXDQpQtN5LoM8z/SwsaU"],[5,80,70]],[9,1,0,-58,[0,"5b3RyquCNMjYlXdJSbVckD"],28],[28,2,-60,[0,"b8xwMVb3VFcqGDvBRrEbwE"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","4",2]],[4,4292269782],-59,29,30,31,32]],[1,"e3FD1P1a5CZqHBbR8aqZ4h",1,0],[1,-96,0,0]],[13,"5",33554432,2,[[2,-61,[0,"ee4UU2W8tClZUSivUH08Zi"],[5,80,70]],[9,1,0,-62,[0,"b6J39u2dtJw5RNlYZ5uejN"],33],[28,2,-64,[0,"0fGSYfbYlAMaPitPscaAW5"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","5",2]],[4,4292269782],-63,34,35,36,37]],[1,"345dcfvoxCY5/QSiFbFW6F",1,0],[1,-5,0,0]],[13,"6",33554432,2,[[2,-65,[0,"67sjTlADFF6agdUaPYbAEb"],[5,80,70]],[9,1,0,-66,[0,"69VVQxSShBIJf1F7O8Jp58"],38],[28,2,-68,[0,"a5WilB01RKaZ/wvB4eU/8O"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","6",2]],[4,4292269782],-67,39,40,41,42]],[1,"43j6cep4hEKKjPMz/J+UjP",1,0],[1,86,0,0]],[13,"7",33554432,2,[[2,-69,[0,"e8w1Nhq+xHQYhRtEfKeks/"],[5,80,70]],[9,1,0,-70,[0,"5aKb9PScZL3qH5fKVf+dFh"],43],[28,2,-72,[0,"ccp9xKdqlNrYHSwB7tXATk"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","7",2]],[4,4292269782],-71,44,45,46,47]],[1,"50EvXnZ3pF5oYNJuZ81gsr",1,0],[1,177,0,0]],[13,"8",33554432,2,[[2,-73,[0,"d6nLZFhmNAbLWrTk7AZAGi"],[5,80,70]],[9,1,0,-74,[0,"257/fSNzpB4orgpTddjzHz"],48],[28,2,-76,[0,"4694sWZtJNO7ddE1baQAti"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","8",2]],[4,4292269782],-75,49,50,51,52]],[1,"c87ArLOL9MOayOarIbHWNR",1,0],[1,268,0,0]],[13,"9",33554432,2,[[2,-77,[0,"a4rWuefU1P9aV87oaSMGNV"],[5,80,70]],[9,1,0,-78,[0,"bfeOxrptFG9JSsRhvE/bYe"],53],[28,2,-80,[0,"ceCKG3BNJAjZu+ev2p9NZ/"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","9",2]],[4,4292269782],-79,54,55,56,57]],[1,"20G/rAB8BGvpqC/Egk5tfh",1,0],[1,359,0,0]],[13,"X",33554432,2,[[2,-81,[0,"46PeNcQ5NNcaunu4FFBf+H"],[5,80,70]],[9,1,0,-82,[0,"44Kvt1BEBBFamaVEC/9Oht"],58],[28,2,-84,[0,"89y8hx+b9B5oLsrDdVi5ik"],[[10,"5c02b7JeTlKBr6JnixdRKMO","buttonClicked","X",2]],[4,4292269782],-83,59,60,61,62]],[1,"ddC74zzy9NypXMIde1PQ8Q",1,0],[1,450,0,0]],[21,"ProgressBackground",33554432,1,[[2,-85,[0,"3e2wN+w9hPe6PERFUqq0AF"],[5,1094.23,107.62]],[8,0,-86,[0,"d5H3QfkU1GoqUQ0AyC3GOA"],0]],[1,"13jV7DuadMQbBI76kHVzEj",1,0],[1,5.153,-10.143,0],[1,0.63,0.83,0.88]],[64,"ProgressSlider",false,33554432,1,[[2,-87,[0,"c4awC9ouFACJcwtk75jE0F"],[5,792,38]],[15,-88,[0,"8c6tRu4CtBJp2/aV1TyO4z"],1]],[1,"37LZg/5mlAl61Oq24Zz8TV",1,0],[1,22.152,1.822,0],[1,0.56,0.88,0.88]],[64,"ProgressFill",false,33554432,1,[[2,-89,[0,"38FwXh2e1HCJw0REHVsXUX"],[5,429,38]],[15,-90,[0,"804NJcJexOlYsovNk5jOwO"],2]],[1,"5ayjdy3sFPyrWOu4wn4PCH",1,0],[1,-82.848,1.822,0],[1,0.63,0.88,0.88]],[56,"trofej otkljucan",33554432,6,[[2,-91,[0,"a56e6d9fhE/YeeWK27pump"],[5,60,60]],[8,0,-92,[0,"53n+tzupNHj5r9SFasOeLq"],3]],[1,"d5KfVdxRJE2q2Gw4NSQ5z0",1,0]],[118,"PanelBackground",33554432,3,[[2,-93,[0,"51KA7wkKlGpqFf5uAEVdTG"],[5,1500,183]],[9,1,0,-94,[0,"fe2gIbertHrY3JuUC5eqk1"],7]],[1,"3ckht8JK1CuJA1cH132QI3",1,0],[1,0.69,0.69,0.69]]],0,[0,6,1,0,0,1,0,0,1,0,-1,18,0,-2,19,0,-3,20,0,-4,5,0,-5,3,0,-6,4,0,0,2,0,0,2,0,0,2,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,12,0,-7,13,0,-8,14,0,-9,15,0,-10,16,0,-11,17,0,0,3,0,0,3,0,0,3,0,-1,22,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,-1,6,0,0,6,0,0,6,0,0,6,0,-1,21,0,0,7,0,0,7,0,7,7,0,0,7,0,0,8,0,0,8,0,7,8,0,0,8,0,0,9,0,0,9,0,7,9,0,0,9,0,0,10,0,0,10,0,7,10,0,0,10,0,0,11,0,0,11,0,7,11,0,0,11,0,0,12,0,0,12,0,7,12,0,0,12,0,0,13,0,0,13,0,7,13,0,0,13,0,0,14,0,0,14,0,7,14,0,0,14,0,0,15,0,0,15,0,7,15,0,0,15,0,0,16,0,0,16,0,7,16,0,0,16,0,0,17,0,0,17,0,7,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,11,1,2,3,3,94],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,-1,12,1,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1,5,15,16,17,1],[72,73,74,75,76,26,26,77,27,27,0,4,5,28,28,0,4,5,29,29,0,4,5,30,30,0,4,5,31,31,0,4,5,32,32,0,4,5,33,33,0,4,5,34,34,0,4,5,23,23,0,4,5,78,23,0,4,5,35,35,0,4,5,0]],[[[23,"joystick"],[50,"joystick",33554432,[-7,-8],[[2,-2,[0,"a4/sD7BO9DA6UTG3WXcpjv"],[5,150,150]],[8,0,-3,[0,"d5jqlJNUxG7pEBbaWyDwDR"],2],[97,12,41.20000000000002,37.99700000000004,-4,[0,"1d2l1UWnlNCIQKO7N1WG8N"]],[181,null,70,-6,[0,"c01CpemqtJkY7JOzyiY4Pa"],-5]],[1,"25qsuhIsVODojuoEld1t71",-1,0],[1,-433.79999999999995,-212.00299999999993,0]],[56,"joystick_ball",33554432,1,[[2,-9,[0,"5cNdCQ1xRF+pdIDGzXxeRb"],[5,55,55]],[8,0,-10,[0,"89lduVt4hAMLo6fBcJbzxH"],1]],[1,"7cvOrmOpdI/ax2wad8QgKF",1,0]],[13,"JoystickGlow",33554432,1,[[2,-11,[0,"d0C+mE/mBG+Jbuyy3Z23zG"],[5,189,189]],[8,0,-12,[0,"41FzRCiwtIuowxvP9lsO5R"],0]],[1,"fdi1Tfn3JEN7GXxbaKynNH",1,0],[1,0.236,-11.604,0]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,24,2,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,0,3,0,0,3,0,11,1,12],[0,0,0],[1,1,1],[79,80,81]],[[{"name":"Group 1735dugme dalje","rect":{"x":1,"y":1,"width":510,"height":520},"offset":{"x":0,"y":1},"originalSize":{"width":512,"height":524},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[82]],[[[6,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[6,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"praznoDugme","rect":{"x":0,"y":0,"width":56,"height":56},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":56},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[83]],[[{"name":"dzojstik manji deo","rect":{"x":0,"y":0,"width":328,"height":328},"offset":{"x":0,"y":0},"originalSize":{"width":328,"height":328},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[84]],[[[86,"Play-Regular","Play-Regular.ttf"],-1],0,0,[],[],[]],[[{"name":"MovementIkon","rect":{"x":0,"y":0,"width":93,"height":96},"offset":{"x":0,"y":0},"originalSize":{"width":93,"height":96},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[85]],[[[23,"BackButton"],[119,"BackButton",33554432,[[2,-2,[0,"22YYBwN4dOCouigTXcci/d"],[5,508,535]],[8,0,-3,[0,"3a/I9AwuNFbbm4Qnt9CQs8"],0],[149,9,9.415999999999997,1738.7910000000002,7.485000000000014,490,-4,[0,"ebyASGVEBFm5SYPPzMRxUy"]],[85,1,-6,[0,"b62ASSRYNKAKlGoeKbnHqA"],[[29,"13d41xH5NZFS4DiJLV/2hQt","backClicked",-5]],1],[87,-7,[0,"adxNsXnFRNR7EKvzRzu16b"]]],[1,"812dUT1G1HFZz7Ztko9i1Y",-1,0],[1,-447.564,257.74,0],[1,0.13,0.13,0.13]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,18,1,0,0,1,0,0,1,0,11,1,7],[0,0],[1,5],[36,36]],[[[106,"builtin-standard",[{"hash":4038009253,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(cc_shadowLPNNInfo.z > 0.0001)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, cc_shadowWHPBInfo.w);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    float bias = cc_shadowWHPBInfo.w;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N);\n        float pcf = cc_shadowWHPBInfo.z;\n        if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n        else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n        else shadow = CCGetShadowFactorHard(pos);\n        shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z;\n            if (pcf > 1.9) shadow = CCGetSpotLightShadowFactorSoft2X(shadowPos, position);\n            else if (pcf > 0.9) shadow = CCGetSpotLightShadowFactorSoft(shadowPos, position);\n            else shadow = CCGetSpotLightShadowFactorHard(shadowPos, position);\n          }\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":222,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":210600745,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":183,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":65}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"name":"number delete","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[86]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[0],0,[0],[2],[87]],[[[6,".bin",3173644024,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":50736,"length":24576,"count":6144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":50736,"count":1057,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.008276020176708698,0.0008579400018788874,-0.008276020176708698],"maxPosition",8,[1,0.008276020176708698,0.003490380011498928,0.008276020176708698]]],-1],0,0,[],[],[]],[[[6,".bin",3112207719,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1192992,"length":576000,"count":144000,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1192992,"count":24854,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.0005706800147891045,-0.009999999776482582],"maxPosition",8,[1,0.009999999776482582,0.002480969997122884,0.009999999776482582]]],-1],0,0,[],[],[]],[[{"name":"keyboard prazan2","rect":{"x":0,"y":0,"width":188,"height":124},"offset":{"x":0,"y":0},"originalSize":{"width":188,"height":124},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[88]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[48,"ograda",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[89,1]],[[[49,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[19,10],[90,1]],[[{"name":"Group 2zvezda zakljucana","rect":{"x":35,"y":34,"width":443,"height":455},"offset":{"x":0.5,"y":-5.5},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[91]],[[[49,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[37,92]],[[{"name":"0","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[93]],[[[49,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{},{},{},{}],[[[{},"mainColor",8,[4,4278255563],"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[19,10],[37,1]],[[{"name":"Group 1726dvogled","rect":{"x":1,"y":1,"width":126,"height":135},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":137},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[94]],[[{"name":"rebussuncobran","rect":{"x":0,"y":43,"width":567,"height":330},"offset":{"x":-16.5,"y":-8},"originalSize":{"width":600,"height":400},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[95]],[[{"name":"BackgroundTutorial","rect":{"x":0,"y":0,"width":147,"height":137},"offset":{"x":0,"y":0},"originalSize":{"width":147,"height":137},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[96]],[[{"name":"Group 1725znak pitanaj","rect":{"x":1,"y":1,"width":126,"height":135},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":137},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[97]],[[[23,"HelpPanel"],[50,"HelpPanel",33554432,[-5,-6,-7,-8],[[95,-2,[0,"7bjLjKotdEJ4m8KSKFXM2J"]],[163,2,-230,-460,0,true,-3,[0,"a7ypCuuNpBsqlgb/qwe2jH"]],[98,36,-10,-4,[0,"18elEtCgxPn5XomnZszf9q"]]],[1,"4bRSrhdtVD265lDC/FjBAq",-1,0],[1,450,-250,0]],[21,"HelpNavigation",33554432,1,[[2,-9,[0,"e40oGUYflG9puqyDCnbkjn"],[5,508,535]],[9,1,0,-10,[0,"30bPIe5z5FHJ1ELDj9Nzco"],2],[105,1,-13,[0,"90GwPTmlVMJ5NL5kYZpJmC"],[[10,"13d41xH5NZFS4DiJLV/2hQt","clicked","getDirection",-12]],-11,3],[107,-14,[0,"a2j/vL1kJOSaQNzqZb1pop"]],[87,-15,[0,"22IE/U6IJHeIDpQqNvBhCd"]]],[1,"b0Kl/9EfRHbKWxUcPUeEnX",1,0],[1,0,62.5,0],[1,0.13,0.13,1]],[21,"HelpReadAgain",33554432,1,[[2,-16,[0,"5120sugxlIIKjcuvc3ZBI+"],[5,508,535]],[9,1,0,-17,[0,"fddEFN0xZOwI1v0z3ulrfB"],4],[105,1,-20,[0,"1db0TawgRHa4dAzPMcR52k"],[[10,"13d41xH5NZFS4DiJLV/2hQt","clicked","readAgain",-19]],-18,5],[107,-21,[0,"e4GsnAtm1BlZrEeYkI1g1/"]],[87,-22,[0,"b3JouYDYFHCJR0KFdGRTob"]]],[1,"a3fqmZotNJWILNiHY9ib4+",1,0],[1,0,137.5,0],[1,0.13,0.13,0.15]],[21,"SettingsButton",33554432,1,[[2,-23,[0,"b4ymrkML1FuK+T8TH8Rp+Y"],[5,508,535]],[8,0,-24,[0,"47LIMmwexHgIDwDYXMnr22"],0],[85,1,-26,[0,"52bZCtdoZGO51+Fsm791eJ"],[[29,"523caEBgsFEWJ4UlrBYMTEF","buttonClicked",-25]],1],[182,-27,[0,"54Vge39XVBFaR3qs1zeVVR"]],[108,true,-28,[0,"9a6rWp53FGe77g9MYrEVMF"]]],[1,"93qDqf1TBK9acwCqXDQH8p",1,0],[1,0,-12.5,0],[1,0.13,0.13,0.13]],[21,"Dvogled",33554432,1,[[2,-29,[0,"65sNVb4lFCyrjM0UAkTAtR"],[5,508,535]],[8,0,-30,[0,"e6RcnTraZFqI2Rc45T4nWd"],6],[85,1,-32,[0,"1d4mpBnc9MXrMcFMNnPosJ"],[[29,"b85daTgyldHXqbXZwAESfzl","buttonClicked",-31]],7],[183,-33,[0,"daM+ZPr6FAYa/PMG9AkUPG"]],[108,true,-34,[0,"93hDbYBEVJqIFifyRbUWul"]]],[1,"48JIQZgfpNLqi5Zh8aC3TF",1,0],[1,0,212.5,0],[1,0.13,0.13,0.1315]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,-4,5,0,0,2,0,0,2,0,7,2,0,18,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,7,3,0,18,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,18,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,18,5,0,0,5,0,0,5,0,0,5,0,11,1,34],[0,0,0,0,0,0,0,0],[1,5,1,5,1,5,1,5],[38,38,39,39,40,40,41,41]],[[{"name":"4","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[98]],[[[48,"Arrow5",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"USE_NORMAL_MAP":true}],[[[{"metallic":0.4000000059604645,"roughness":0.7071067690849304},"mainTexture",6,0,"normalMap",6,1]],11]]],0,0,[0,0,0],[19,25,10],[99,100,1]],[[{"base":"2,2,0,0,0,0","mipmaps":[{"front":"bdKOAtNkREmZ+h4eou3VI1","back":"ab7U8JOpxOSIgNrpHUoRVY","left":"59qGuAhBxFCbQdSsOge5jA","right":"16mGir+qdNboO4Ba5zY6lH","top":"fcUsFc+thCdqlbnSBUyiiq","bottom":"55LjON3yNL37O/Fn/gzsBj"}]}],[15],0,[],[],[]],[[{"name":"PraznaKutija","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[101]],[[[23,"Subtitle"],[120,"Subtitle",512,false,33554432,[[2,-2,[0,"464kmzamVH855X+4zHNPWP"],[5,3800,120]],[169,"Probaj da upravljaš igračem kako bi dobio svoj prvi zadatak!",112,112,1,false,false,2,-3,[0,"6eGpdc6bxO1L5BXxj2JAir"],0],[150,1,25.65300000000002,-4,[0,"8b4TPFYFFFo4jKQM4MuEav"]],[70,false,-5,[0,"73DAJS9D5BzIfhqVOLJxjU"]]],[1,"07XhdicltKCZw4lMcf/Mjx",-1,0],[1,0,259.347,0],[1,0.25,0.25,0.25]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,11,1,5],[0],[13],[2]],[[{"name":"Ellipse 13","rect":{"x":4,"y":0,"width":504,"height":508},"offset":{"x":0,"y":2},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[102]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[0],0,[0],[2],[103]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[49,[{"rasterizerState":{"cullMode":0},"depthStencilState":{"depthWrite":false},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[19,10],[104,1]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[48,"BigClock",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[105,1]],[[{"name":"Group 1725","rect":{"x":2,"y":2,"width":508,"height":540},"offset":{"x":0,"y":1},"originalSize":{"width":512,"height":546},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[106]],[[{"name":"Rectangle 7","rect":{"x":0,"y":0,"width":512,"height":13},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":13},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[107]],[[{"name":"kornajca 1","rect":{"x":0,"y":0,"width":272,"height":136},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[108]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"5 1","rect":{"x":0,"y":0,"width":128,"height":114},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":114},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[109]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"8","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[110]],[[{"name":"3","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[111]],[[{"base":"2,2,0,0,0,0","mipmaps":[{"front":"69aDKFo/ZM/raQD86yGuC3","back":"ae3qDzlwJMb67IaRVlHRcX","left":"641Ohfc2dBJpdOo6+uBOAx","right":"78ksR6ykJPv6W3+WPMRahC","top":"6fPeKyy+FOmKFSWiKriCyo","bottom":"29nim2sihM+5xT8cnV0N3e"}]}],[15],0,[],[],[]],[[{"name":"PauseSound","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[112]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[114,"1",[{"rasterizerState":{},"depthStencilState":{"depthWrite":true},"blendState":{"isA2C":true,"isIndepend":true,"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[19,10],[113,1]],[[[48,"T_BG_01_Diff",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[114,1]],[[{"name":"SoundOn","rect":{"x":7,"y":0,"width":275,"height":239},"offset":{"x":3.5,"y":0},"originalSize":{"width":282,"height":239},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[115]],[[{"name":"Strelica","rect":{"x":0,"y":0,"width":245,"height":172},"offset":{"x":0,"y":0},"originalSize":{"width":245,"height":172},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[116]],[[{"name":"Dalje_novi","rect":{"x":0,"y":0,"width":510,"height":520},"offset":{"x":0,"y":0},"originalSize":{"width":510,"height":520},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[117]],[[{"name":"5","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[118]],[[{"name":"SoundOff","rect":{"x":7,"y":0,"width":265,"height":239},"offset":{"x":-1.5,"y":0},"originalSize":{"width":282,"height":239},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[119]],[[{"name":"TouchSymbol","rect":{"x":0,"y":0,"width":108,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":108},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[120]],[[[23,"KeyboardLook"],[50,"KeyboardLook",33554432,[-7,-8,-9,-10,-11,-12,-13],[[54,true,-2,[0,"4a+tnOstRClKmdBwVC1nyb"],[7],8],[70,false,-3,[0,"eeX9DAPhFNSYkCkyxYkayF"]],[33,0,-4,[0,"fbm+Zl9GtE/btkSV6fNldw"]],[2,-5,[0,"a0SVQ/Yn9FfKCPmytgMWPF"],[5,980,600]],[151,45,-28.758000000000003,28.758000000000003,false,100,100,-6,[0,"0baD/uhShPB4QVxRBnF1jZ"]]],[1,"aePLkHWnRMTpDOIuiYA4i4",-1,0],[1,-28.758000000000038,0,0]],[21,"Strelica",33554432,1,[[2,-14,[0,"84G+k4rWVLj7/VcDOkIM2P"],[5,245,172]],[15,-15,[0,"bds+uUWdhAnJeDtEs8iujc"],3],[152,8,205.01800000000003,-16,[0,"b6qMOSjFhPN4GlqVYdYaks"]]],[1,"f0NBumnvJHKKYeDzRx7JnV",1,0],[1,-223.73199999999997,0,0],[1,0.5,0.5,0.5]],[51,"Strelica-001",33554432,1,[[2,-17,[0,"6eOUAVSb1PAa/xwSMlKOPw"],[5,245,172]],[15,-18,[0,"065K8gUxdAvKLPt56+PYbN"],4],[98,32,143.099,-19,[0,"18DVpWWgxIrLAbzvRlA42R"]]],[1,"12mOAz+dtAqKwLHx0JHiKc",1,0],[1,285.651,0,0],[3,0,0,1,6.123233995736766e-17],[1,0.5,0.5,0.5],[1,0,0,180]],[51,"Strelica-002",33554432,1,[[2,-20,[0,"1ayVd8cJhOjZwm8PqOUuXD"],[5,245,172]],[15,-21,[0,"78fz4PjqBJO4fohGGT80Rh"],5],[42,4,27.80000000000001,-22,[0,"db1jXk6pRMIp9JftvlUXoh"]]],[1,"73kvNt6RJNBa2NjtN4TL8h",1,0],[1,48.045,-229.2,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.5,0.5,0.5],[1,0,0,90]],[56,"Background",33554432,1,[[2,-23,[0,"f50Z+Ou7VJhZzLAA6ZLI00"],[5,2000,2000]],[8,0,-24,[0,"a95+CbDDpIqLsS2Ssxg8k2"],0]],[1,"25+gaBZllFF6Gt8JrU8ph7",1,0]],[21,"MouseClick",33554432,1,[[2,-25,[0,"69BruQRihLw5g9knGdvWkF"],[5,56,84]],[15,-26,[0,"e79SHWZQlFbZWMVyzOJwMO"],1]],[1,"0cfd38Bn5PIJ2Oom4SiXwx",1,0],[1,-1.726,4.16,0],[1,0.8,0.8,0.8]],[21,"MouseMove white 2",33554432,1,[[2,-27,[0,"dfoORJnJVFEZBPc4iIfPS9"],[5,124,194]],[15,-28,[0,"7aTtbxSNdLaqYavnVksDhy"],2]],[1,"61WFvBVahAaJWi5b9sqe28",1,0],[1,20.03,-36.007,0],[1,0.8,0.8,0.8]],[51,"Strelica-003",33554432,1,[[2,-29,[0,"86G7marXlFq7MZHp7ffEpK"],[5,245,172]],[15,-30,[0,"daWQe0yw9Fu7ovg/FBpZag"],6]],[1,"2dhBFPvP1NFYiDbUYZzdea",1,0],[1,48.045,191.206,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.5,0.5,0.5],[1,0,0,-90]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,6,0,-3,7,0,-4,2,0,-5,3,0,-6,4,0,-7,8,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,11,1,30],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,-1,12],[15,121,122,6,6,6,6,42,42]],[[[23,"KeyboardTouch"],[92,"KeyboardTouch",false,33554432,[-7,-8,-9,-10,-11,-12,-13],[[54,true,-2,[0,"f7HCRUk2FPWrMzigGg2oKf"],[7],8],[70,false,-3,[0,"acxUpzG6lNg5q2hkZ/P1Pm"]],[88,-4,[0,"eemhkRNx9Fy6V1d2ObcfNA"]],[2,-5,[0,"7cYR+ts6VMJ6HuPqqc2klQ"],[5,1100,650]],[78,45,100,100,-6,[0,"e3Sd7APwNC74xXSjOKSz99"]]],[1,"29cWjhO6hGV6b6m/7SAPZL",-1,0]],[56,"Background",33554432,1,[[2,-14,[0,"fcib7WiWpAZpUzfBZF4KcM"],[5,2000,2000]],[8,0,-15,[0,"12mlJdZIdJ45mtwe8cYADT"],0]],[1,"76zzfn3+1MDZ0fc3Mnd7WR",1,0]],[13,"TouchSymbol",33554432,1,[[2,-16,[0,"3baRkdRTZHIYSxMyPNv1zk"],[5,108,108]],[15,-17,[0,"35YxqPIw5L+68d+j38W4jE"],1]],[1,"a7jZBz/chIRbtdWyfPn5dT",1,0],[1,-31.177,21.775,-25.454]],[13,"MouseMove white 2",33554432,1,[[2,-18,[0,"7dKsT29MlK+Y+zOHqHma/f"],[5,113,122]],[15,-19,[0,"8fQtC0gipCj7IWLeBOSsfU"],2]],[1,"0de9WQdI9Ki6Ggc4yFexa+",1,0],[1,20.03,-36.007,0]],[21,"Strelica",33554432,1,[[2,-20,[0,"96h4B61wRP5KI5e2gSrju4"],[5,245,172]],[15,-21,[0,"67sRJWggJLGK+YOBs50gX8"],3]],[1,"011v8XvqpMEqOZo1TfLWMb",1,0],[1,-250.02,0,0],[1,0.5,0.5,0.5]],[51,"Strelica-001",33554432,1,[[2,-22,[0,"c5OfIGCcpMJrET3ekAwY/w"],[5,245,172]],[15,-23,[0,"73oP6c2xlJ4Y2GBoSjGuEa"],4]],[1,"e5bTm1sYxKR4VywB+awhon",1,0],[1,282.983,0,0],[3,0,0,1,6.123233995736766e-17],[1,0.5,0.5,0.5],[1,0,0,180]],[51,"Strelica-002",33554432,1,[[2,-24,[0,"e9saJIv99E1r7P5YN7gJTr"],[5,245,172]],[15,-25,[0,"53U1LvAiRIUbMNNBUiEsro"],5]],[1,"00nV91SFFBh5GRNRp8WJXG",1,0],[1,9.703,-194.381,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0.5,0.5,0.5],[1,0,0,90]],[51,"Strelica-003",33554432,1,[[2,-26,[0,"14qtir0FJCxb1YAMSSdBHr"],[5,245,172]],[15,-27,[0,"b5XUZV4fFHLo9mI4hP0URc"],6]],[1,"ec4xPEo6ZINowAlfgR2EN3",1,0],[1,9.703,163.225,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.5,0.5,0.5],[1,0,0,-90]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,11,1,27],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,-1,12],[15,123,124,6,6,6,6,43,43]],[[{"name":"listen 1","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[125]],[[[49,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{},{},{},{}],[[[{},"mainColor",8,[4,4281497934]],{},{},{}],11,0,0,0]]],0,0,[0],[10],[1]],[[{"name":"JoystickGlow","rect":{"x":0,"y":0,"width":244,"height":251},"offset":{"x":0,"y":0},"originalSize":{"width":244,"height":251},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[126]],[[[6,".bin",1979104879,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":1296,"count":324,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.058886528015137,-0.5000004172325134,-2.348930835723877],"maxPosition",8,[1,6.058886528015137,0.5000003576278687,2.348930835723877]]],-1],0,0,[],[],[]],[[{"name":"zec 1","rect":{"x":0,"y":0,"width":172,"height":184},"offset":{"x":0,"y":0},"originalSize":{"width":172,"height":184},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[127]],[[{"name":"6","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[128]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[0],0,[0],[2],[129]],[[{"name":"TogetherOn","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[130]],[[{"name":"glavni panel","rect":{"x":0,"y":0,"width":1800,"height":867},"offset":{"x":0,"y":0},"originalSize":{"width":1800,"height":867},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[131]],[[[23,"keyboard pun"],[92,"keyboard pun",false,33554432,[-6,-7,-8,-9,-10,-11,-12],[[2,-2,[0,"8eRA6fnqNM6aNCo3hSmcng"],[5,188,124]],[31,-3,[0,"c937DH/OpPAp83xL6mhlQ2"]],[33,0,-4,[0,"0308YYv9VEbJWMapNQpKOV"]],[54,true,-5,[0,"c8wUMrPp9KlrrZzNjPVrJC"],[7],8]],[1,"ddnY0F06xALYrGESIBwYGV",-1,0]],[21,"Background",33554432,1,[[2,-13,[0,"80HrCUk9NN+KikME11HKcv"],[5,2000,2000]],[8,0,-14,[0,"eaHWwNJwhJQoHseuKDh8Bm"],0]],[1,"8cfdWlJLJFS608aURctmH/",1,0],[1,246.08857142857136,244.8640000000001,0],[1,1.4285714285714288,1.4285714285714288,1]],[13,"praznoDugme",33554432,1,[[2,-15,[0,"f1mmdvDkRH6rs7tqDIw0J0"],[5,56,56]],[15,-16,[0,"fbTgguI/tCB5ccCr59+juo"],1]],[1,"38xlsdmPpA2ahc7J7u/kHq",1,0],[1,-58.755,-33.422,0]],[13,"PunoDugme",33554432,1,[[2,-17,[0,"0bka/vE9VE5bAty+XgNJ1b"],[5,56,56]],[81,-18,[0,"d53/muo+ROOYAxPJaRiaV2"],[4,16777215],2]],[1,"ecXPwVQcNNYacNFQaqCHhq",1,0],[1,-58.755,-33.422,0]],[13,"praznoDugme-001",33554432,1,[[2,-19,[0,"a89IHKmJVDPIktcDc5qbcp"],[5,56,56]],[15,-20,[0,"d1WRqLTlRAo4QOgMbMHg6Y"],3]],[1,"3fenRBauJM+plSXUxPAK2I",1,0],[1,68.718,-33.422,0]],[13,"PunoDugme-001",33554432,1,[[2,-21,[0,"2an+K96hZJ/KdqPkFjgn6/"],[5,56,56]],[81,-22,[0,"fb9yZgqLtC34LHqPPTgHJ/"],[4,16777215],4]],[1,"5bvnHT3rxJZ5tOhWXd8Qhn",1,0],[1,68.167,-33.422,0]],[13,"keyboard pun-001",33554432,1,[[2,-23,[0,"admBpnH1JEv7A+o8cuJUd0"],[5,188,124]],[15,-24,[0,"c0lIQBOepJjqvYOWorw2qg"],5]],[1,"6bCEDaXLxHqaB3hTJBVbZu",1,0],[1,5.384,-1.198,0]],[13,"Moving Symbol white",33554432,1,[[2,-25,[0,"bbXYUcCmlBaZq3lpZ1kHky"],[5,129.81,129.81]],[8,0,-26,[0,"8bPSc2/ZFDkbTXZowIg5M4"],6]],[1,"56D1DYJgdGlLJriPIFnobF",1,0],[1,170.883,0,0]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,11,1,26],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,-1,12],[15,44,45,44,45,132,133,46,46]],[[{"name":"ProgressSlider","rect":{"x":0,"y":0,"width":792,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":792,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[134]],[[[184,"RaziganiGrad"],[121,"Razigrani grad 26. maj",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[[185,true,-6,[141],[[63,"Animirani_objekti/Group049",-1],[63,"Animirani_objekti/Group104/Bone483/Bone484",-2],[63,"Animirani_objekti/Group115",-3],[63,"Cizme",-4],[63,"Teretana",-5]],142],[109,-7]]],[140,"Animirani_objekti",1,[[-28,-29,[11,"Grocery",-30,[1,-3.6123790740966797,1.276284098625183,-8.437661170959473],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[65,"Group026",-31,[1,5.132018566131592,0.9996206164360046,-8.247476577758789],[3,-0.6123724438871999,0.35355337640534307,0.35355337640534307,0.6123724438871999],[1,0.7517704963684082,0.7517704963684082,0.7517704963684082],[1,-90.00000000000001,59.99999734505181,0]],[11,"Group028",-32,[1,4.472064971923828,0.9603766798973083,-5.402996063232422],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]],[11,"Group031",-33,[1,12.233104705810547,0.819469153881073,0.43735894560813904],[3,-0.5,-0.5,-0.5,0.5],[1,-90,-90,0]],[11,"Group032",-34,[1,-5.076495170593262,0.747179388999939,4.561645030975342],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[11,"Group040",-35,[1,5.996960639953613,1.0382757186889648,4.261744499206543],[3,-0.5,-0.5,-0.5,0.5],[1,-90,-90,0]],-36,[11,"Group052",-37,[1,8.197509765625,1.0336952209472656,3.5965099334716797],[3,0.3535533540536005,0.6123724567919833,0.6123724567919833,-0.3535533540536005],[1,-90,-120.00000683756782,0]],-38,-39,-40,-41,-42,-43,-44,-45,-46,[11,"Group116",-47,[1,11.65698528289795,0.8457489609718323,-2.6347012519836426],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[11,"Group117",-48,[1,-11.777107238769531,1.232293725013733,0.07988935708999634],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[11,"Group118",-49,[1,-1.370085597038269,0.8457487225532532,4.303985118865967],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[11,"A_PIZZA001",-50,[1,-9.27151107788086,0.7505730986595154,2.9475839138031006],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]],[11,"A_RAMEN001",-51,[1,-0.16658517718315125,0.9815287590026855,0.347004771232605],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]]],1,1,4,4,4,4,4,4,1,4,1,1,1,1,1,1,1,1,1,4,4,4,4,4]],[122,"Canvas",33554432,"42QC2jHcNHNIsnbuqtHztE",[-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[[96,-52,[5,920,600]],[186,-54,-53],[153,45,5.684341886080802e-14,5.684341886080802e-14,-55],[187,-56]],[1,460.00000000000006,300,0]],[123,"Tasks","caD7yQ+h5EvasMTi9UbQY+",[-82,-83,-84,-85,-86,-87,-88,-89],[[188,-81,-80,-79,-78,-77,3,-76,-75,-74,-73]]],[141,"Group049",2,[[-90,[11,"Bone336",-91,[1,0.29759928584098816,0.13775670528411865,-0.038304928690195084],[3,-0.4795389032001881,0.5196560788806003,-0.5196560788806003,-0.4795389032001881],[1,90,-94.59832368216652,0]],-92,-93,-94,-95,-96,-97,-98],1,4,1,1,1,1,1,1,1],[1,8.702157020568848,0.8914170861244202,-2.7926623821258545],[3,-0.2705980436662191,0.6532814850920046,0.6532814850920046,0.2705980436662191],[1,1.0483750104904175,1.0483750104904175,1.0483750104904175],[1,-90,135.00000112382537,0]],[124,"Player","05lA5UR7FO2o0ztZxC2riP",[-106,-107],[[189,0.2,2,45,-99],[190,55,0.95,1,-100,[1,0,0,0]],[191,null,-101],[192,5.5,-103,[1,-41,-63,0],-102],[193,1,-104],[194,0.1,0.4,-105,[1,0,-0.24,-0.23]]],[1,-6.249,0.726,6.581]],[37,"Bone484 Socket",1,[-108,-109,-110,-111,-112,-113,-114,-115],[1,1.2838718539849765,0.1210981011390686,-4.34596417190048],[3,0.49871833711770214,0.5012784537629107,0.49871826895860294,0.5012783859519121],[1,0.9079382419586182,1.1016534566879272,1.1016533374786377],[1,0.000007790539977768547,90,89.70663190192776]],[195,"RaziganiGrad",true,[-138,-139,4,-140,-141,6,3,-142],[160,[[89,["_target"],-133,[3,["21d4xBOWdBOoTIgmzHVWIg"]],-132,[3,["4dxJFwWldIdLr125eAnRDv"]]],[89,["_textLabel"],-135,[3,["07LWQV6VtJ25W4STKnI07r"]],-134,[3,["045VkOOjlHMJw8jbwZo3Oj"]]],[89,["_placeholderLabel"],-137,[3,["07LWQV6VtJ25W4STKnI07r"]],-136,[3,["045VkOOjlHMJw8jbwZo3Oj"]]]],[-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131]],[196,[197,2,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,1,1,1,2],[2,1,1,1,1]],[198,0.1,1,30,1,[4,4283190348]],[199,true,false,164,165],[200,2,0.01,5,0.04,[4,4290308863]],[201]]],[4,"Group115",2,[-143,-144,-145,-146,-147,-148,-149,-150],[1,6.382638931274414,1.081346035003662,1.2592569589614868],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[37,"Cizme",1,[-151,-152,-153,-154,-155,-156,-157,-158],[1,6.650427341461182,1.0990575551986694,-11.47336196899414],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.0773999691009521,1.0773999691009521,1.0773999691009521],[1,-90.00000000000003,0,0]],[24,0,null,3,[25,"82H1Rqs2tL2p+4NBLalKFh",-164,[43,"a6Zug4jvlCE57ru3C9TqFr",[[45,"GenericUI-Input",["_name"],-159],[20,["_lpos"],-160,[1,0,35,0]],[20,["_lrot"],-161,[3,0,0,0,1]],[20,["_euler"],-162,[1,0,0,0]],[45,false,["_active"],-163],[22,0,["_opacity"],[3,["11xijk/wBHR6peFn5kt0Ar"]]],[22,"",["_string"],[3,["2bnT4mQuJIK4Q9cUaiz9CB"]]],[22,false,["_active"],[3,["5f193dSxBOXb17cF/rqxk7"]]],[22,"",["_string"],[3,["21pNKKRu5LT5hBp2K0lzNU"]]],[22,"",["_string"],[3,["045VkOOjlHMJw8jbwZo3Oj"]]],[22,true,["_active"],[3,["d9+7srBw1CSI6eJYB8b/sZ"]]],[7,["_contentSize"],[3,["4ddOpv5exMkLAEDJ7WxUqx"]],[5,1300,360]]]],10]],[93,"Casovnicar",false,[-168,-169,-170],[[110,1,1,-165],[104,-166,[152],153],[202,-167]],[1,1.274,0.607,-3.571],[3,0.4999999999999999,0.5,0.5,0.5000000000000001],[1,0.5,0.5,0.5],[1,0,89.99999999999997,90]],[93,"Obucar",false,[-175,-176,-177],[[110,1,1,-171],[104,-172,[162],163],[34,-174,-173]],[1,6.531,0.43,-11.025],[3,0.49999999999999983,0.4999999999999999,0.5000000000000001,0.5000000000000001],[1,0.4,0.4,0.4],[1,0,89.99999999999997,90]],[125,"Managers","eduICRu2ZHNrZXhuRZYLBK",8,[[203,-178],[204,"3_playfulcity","HRV",-179,3,1,4,6],[205,-181,-180],[206,true,false,-182,143]]],[126,"WorldParent","9aYV/1lp9Bjb1QE0B8hx7x",8,[-183,-184,1,-185,-186]],[38,"Checkpoint8",4,[-188,-189,-190,-191],[[46,-187]]],[24,0,{},3,[25,"f6VGb22FVCIIE43GrTTgcc",-196,[43,"72tnIEAqZCp59HT8lrB6CN",[[45,"LoadingPanel",["_name"],-192],[20,["_lpos"],-193,[1,5.764,13.706,0]],[20,["_lrot"],-194,[3,0,0,0,1]],[20,["_euler"],-195,[1,0,0,0]]]],0]],[3,["82H1Rqs2tL2p+4NBLalKFh"]],[24,0,{},3,[25,"efVuuN4VNA451kUZLxLIN7",-197,[44,"28byhdyipKeJ9g++At3zpB",null,[[22,"BottomUI",["_name"],[3,["efVuuN4VNA451kUZLxLIN7"]]],[7,["_lpos"],[3,["efVuuN4VNA451kUZLxLIN7"]],[1,0,-255.73299999999995,0]],[7,["_lrot"],[3,["efVuuN4VNA451kUZLxLIN7"]],[3,0,0,0,1]],[7,["_euler"],[3,["efVuuN4VNA451kUZLxLIN7"]],[1,0,0,0]]]],11]],[38,"Checkpoint1",4,[-199,-200,-201],[[46,-198]]],[16,"Task1-1",20,[[47,"3_hotspot1_0.txt",-203,[-202]],[35,-204],[36,-205]],[1,1.166,0,-4.11],[1,7,7,7]],[39,"Task2",[[47,"3_hotspot2_0.txt",-207,[-206]],[35,-208],[36,-209]],[1,1.166,0,-4.11],[1,7,7,7]],[39,"Task2ABC",[[72,true,"questions2",10,-210,[22]]],[1,6.324,0,-12.01],[1,7,7,7]],[39,"Task4",[[47,"3_hotspot4_0.txt",-212,[-211]],[35,-213],[36,-214]],[1,1.166,0,-4.11],[1,7,7,7]],[39,"Task5",[[47,"3_hotspot5_0.txt",-216,[-215]],[35,-217],[36,-218]],[1,1.166,0,-4.11],[1,7,7,7]],[39,"Task6",[[47,"3_hotspot6_0.txt",-220,[-219]],[35,-221],[36,-222]],[1,1.166,0,-4.11],[1,7,7,7]],[39,"Task7",[[47,"3_hotspot7_0.txt",-224,[-223]],[35,-225],[36,-226]],[1,1.166,0,-4.11],[1,7,7,7]],[16,"Task8",16,[[47,"3_hotspot8_0.txt",-228,[-227]],[35,-229],[36,-230]],[1,1.166,0,-4.11],[1,7,7,7]],[16,"Task8ABC",16,[[73,true,"questions8",10,-231,[28]]],[1,6.324,0,-12.01],[1,7,7,7]],[16,"Task9",16,[[208,"3_hotspot9_0.txt",true,1,-232,[29]],[35,-233],[36,-234]],[1,1.166,0,-4.11],[1,7,7,7]],[127,"Arrow","cdtKQH5IRNFZDjlktQGs/q",8,[-238],[[177,-235,[84,85]],[210,0.36,-237,-236]],[1,-9.617,0.721,-0.365],[1,0,0,0]],[39,"Task3",[[47,"3_hotspot3_0.txt",-239,[23]],[35,-240],[36,-241]],[1,1.166,0,-4.11],[1,7,7,7]],[3,["f6VGb22FVCIIE43GrTTgcc"]],[142,"Camera",3,[[-242,[96,-243,[5,60,60]],[154,45,430,430,270,270,100,100,-244]],1,4,4],[1,0,0,1000]],[3,["aePLkHWnRMTpDOIuiYA4i4"]],[3,["29cWjhO6hGV6b6m/7SAPZL"]],[24,0,{},3,[25,"b4+vvl3pxAlJnTi89jX8bm",-245,[44,"d3Rz21FvhFm4xNY9t8eHTG",null,[[22,"GenericUI",["_name"],[3,["b4+vvl3pxAlJnTi89jX8bm"]]],[7,["_lpos"],[3,["b4+vvl3pxAlJnTi89jX8bm"]],[1,0,33.364000000000004,0]],[7,["_lrot"],[3,["b4+vvl3pxAlJnTi89jX8bm"]],[3,0,0,0,1]],[7,["_euler"],[3,["b4+vvl3pxAlJnTi89jX8bm"]],[1,0,0,0]]]],7]],[24,0,{},3,[25,"e9ZWNyzJVGBIYNRgbu0cSz",-250,[43,"ee43Wr8kFCIaYJPIFoMVWT",[[45,"GenericUI-Image",["_name"],-246],[20,["_lpos"],-247,[1,0,0,0]],[20,["_lrot"],-248,[3,0,0,0,1]],[20,["_euler"],-249,[1,0,0,0]]]],8]],[3,["e9ZWNyzJVGBIYNRgbu0cSz"]],[24,0,{},3,[25,"92X+fL2EtL56hsWYSdqLWJ",-251,[44,"21dFYr+3tA3LWNsm/LVr68",null,[[22,"GenericUI-ABC",["_name"],[3,["92X+fL2EtL56hsWYSdqLWJ"]]],[7,["_lpos"],[3,["92X+fL2EtL56hsWYSdqLWJ"]],[1,0,0,0]],[7,["_lrot"],[3,["92X+fL2EtL56hsWYSdqLWJ"]],[3,0,0,0,1]],[7,["_euler"],[3,["92X+fL2EtL56hsWYSdqLWJ"]],[1,0,0,0]]]],9]],[24,512,{},3,[25,"07XhdicltKCZw4lMcf/Mjx",-252,[44,"eeThLKd85GIqKAWjn4Fs1q",null,[[22,"Subtitle",["_name"],[3,["07XhdicltKCZw4lMcf/Mjx"]]],[7,["_lpos"],[3,["07XhdicltKCZw4lMcf/Mjx"]],[1,0,251.378,0]],[7,["_lrot"],[3,["07XhdicltKCZw4lMcf/Mjx"]],[3,0,0,0,1]],[7,["_euler"],[3,["07XhdicltKCZw4lMcf/Mjx"]],[1,0,0,0]]]],12]],[16,"OgradaKolijder",15,[[111,false,-253,[17],[5],18],[213,-254,19],[109,-255]],[1,0.43,-5.809,0.557],[1,1775.5789794921875,16775.578979,1775.5789794921875]],[24,0,{},15,[25,"0462goSltaDYp42aEklYQK",-260,[43,"2eIANtkMdPSrZbQbHGJo2H",[[45,"Pin",["_name"],-256],[20,["_lpos"],-257,[1,-2.518,1.803,1.236]],[20,["_lrot"],-258,[3,0,0,0,1]],[20,["_euler"],-259,[1,0,0,0]]]],22]],[3,["0462goSltaDYp42aEklYQK"]],[39,"Task3ABC",[[72,true,"questions3",10,-261,[32]]],[1,6.324,0,-12.01],[1,7,7,7]],[38,"Checkpoint3",4,[32,45],[[46,-262]]],[16,"Task1ABC",20,[[72,true,"questions1",10,-263,[21]]],[1,6.324,0,-12.01],[1,7,7,7]],[38,"Checkpoint2",4,[22,23],[[46,-264]]],[38,"Checkpoint4",4,[24,-266],[[46,-265]]],[16,"Task4ABC",49,[[72,true,"questions3",10,-267,[24]]],[1,6.324,0,-12.01],[1,7,7,7]],[38,"Checkpoint5",4,[25,-269],[[46,-268]]],[16,"Task5ABC",51,[[73,true,"questions5",10,-270,[25]]],[1,6.324,0,-12.01],[1,7,7,7]],[38,"Checkpoint6",4,[26,-272],[[46,-271]]],[16,"Task6ABC",53,[[73,true,"questions6",10,-273,[26]]],[1,6.324,0,-12.01],[1,7,7,7]],[38,"Checkpoint7",4,[27,-275],[[46,-274]]],[16,"Task7ABC",55,[[73,true,"questions7",10,-276,[27]]],[1,6.324,0,-12.01],[1,7,7,7]],[4,"Group115 Socket",1,[-277,-278],[1,6.382638931274414,1.081346035003662,1.2592569589614868],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[24,0,{},3,[25,"85m//k/gVF7qrlOlAZV1vZ",-279,[44,"64jndseHZEiLpcNd3eYj+Y",null,[[22,"Settings",["_name"],[3,["85m//k/gVF7qrlOlAZV1vZ"]]],[7,["_lpos"],[3,["85m//k/gVF7qrlOlAZV1vZ"]],[1,0,36.98700000000002,0]],[7,["_lrot"],[3,["85m//k/gVF7qrlOlAZV1vZ"]],[3,0,0,0,1]],[7,["_euler"],[3,["85m//k/gVF7qrlOlAZV1vZ"]],[1,0,0,0]]]],1]],[24,0,null,3,[25,"ddnY0F06xALYrGESIBwYGV",-282,[43,"8bD4Csi6JIgqpUlmyPlSNS",[[22,"DesktopMoveTutorial",["_name"],[3,["ddnY0F06xALYrGESIBwYGV"]]],[7,["_lpos"],[3,["ddnY0F06xALYrGESIBwYGV"]],[1,0,0,0]],[7,["_lrot"],[3,["ddnY0F06xALYrGESIBwYGV"]],[3,0,0,0,1]],[20,["_euler"],-280,[1,0,0,0]],[45,false,["_active"],-281],[22,0,["_opacity"],[3,["0308YYv9VEbJWMapNQpKOV"]]]]],2]],[24,0,null,3,[25,"aePLkHWnRMTpDOIuiYA4i4",-283,[43,"85a89IaxRO8YhIkN1MOipG",[[45,"DesktopLookTutorial",["_name"],35],[20,["_lpos"],35,[1,-28.75799999999998,0,0]],[20,["_lrot"],35,[3,0,0,0,1]],[20,["_euler"],35,[1,0,0,0]],[7,["_contentSize"],[3,["a0SVQ/Yn9FfKCPmytgMWPF"]],[5,920,600]],[7,["_lpos"],[3,["f0NBumnvJHKKYeDzRx7JnV"]],[1,-193.73199999999997,0,0]],[7,["_lpos"],[3,["12mOAz+dtAqKwLHx0JHiKc"]],[1,255.651,0,0]]]],3]],[24,0,null,3,[25,"0eOh/S3hhMw7mXjWvEnsJ2",-284,[43,"92tXW3HKZM7pwOSzANLMgm",[[22,"MobileMoveTutorial",["_name"],[3,["0eOh/S3hhMw7mXjWvEnsJ2"]]],[7,["_lpos"],[3,["0eOh/S3hhMw7mXjWvEnsJ2"]],[1,0,0,0]],[7,["_lrot"],[3,["0eOh/S3hhMw7mXjWvEnsJ2"]],[3,0,0,0,1]],[7,["_euler"],[3,["0eOh/S3hhMw7mXjWvEnsJ2"]],[1,0,0,0]]]],4]],[24,0,null,3,[25,"29cWjhO6hGV6b6m/7SAPZL",-285,[43,"74hsZIWaBCFLlmN5hbb5u7",[[45,"MobileLookTutorial",["_name"],36],[20,["_lpos"],36,[1,0,0,0]],[20,["_lrot"],36,[3,0,0,0,1]],[20,["_euler"],36,[1,0,0,0]]]],5]],[24,0,{},3,[25,"25qsuhIsVODojuoEld1t71",-286,[44,"313M3LWFNC6JWN5bM+7R4j",null,[[22,"joystick",["_name"],[3,["25qsuhIsVODojuoEld1t71"]]],[7,["_lpos"],[3,["25qsuhIsVODojuoEld1t71"]],[1,-343.79999999999995,-187.00299999999993,0]],[7,["_lrot"],[3,["25qsuhIsVODojuoEld1t71"]],[3,0,0,0,1]],[7,["_euler"],[3,["25qsuhIsVODojuoEld1t71"]],[1,0,0,0]]]],6]],[24,0,{},3,[25,"812dUT1G1HFZz7Ztko9i1Y",-287,[44,"37Vh7241ZEY7GXhfPD0qSS",null,[[22,"BackButton",["_name"],[3,["812dUT1G1HFZz7Ztko9i1Y"]]],[7,["_lpos"],[3,["812dUT1G1HFZz7Ztko9i1Y"]],[1,-417.564,257.74,0]],[7,["_lrot"],[3,["812dUT1G1HFZz7Ztko9i1Y"]],[3,0,0,0,1]],[7,["_euler"],[3,["812dUT1G1HFZz7Ztko9i1Y"]],[1,0,0,0]]]],13]],[24,0,{},3,[25,"4bRSrhdtVD265lDC/FjBAq",-288,[44,"7bOzxENvNHU4eln7V6jBBa",null,[[22,"HelpPanel",["_name"],[3,["4bRSrhdtVD265lDC/FjBAq"]]],[7,["_lpos"],[3,["4bRSrhdtVD265lDC/FjBAq"]],[1,420,-250,0]],[7,["_lrot"],[3,["4bRSrhdtVD265lDC/FjBAq"]],[3,0,0,0,1]],[7,["_euler"],[3,["4bRSrhdtVD265lDC/FjBAq"]],[1,0,0,0]]]],14]],[4,"BlueBuilding",2,[-289,-290],[1,-8.096761703491211,1.9867435693740845,7.070703029632568],[3,-0.2705980436662191,0.6532814850920046,0.6532814850920046,0.2705980436662191],[1,-90,135.00000112382537,0]],[4,"Group062",2,[-291,-292],[1,13.012343406677246,2.0183069705963135,-7.164257049560547],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Group064",2,[-293,-294],[1,14.427010536193848,1.503471851348877,-0.23504020273685455],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Group069",2,[-295,-296],[1,-1.2500290870666504,1.436326026916504,-11.047966003417969],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]],[4,"Group096",2,[-297,-298],[1,9.456022262573242,2.191470146179199,8.018088340759277],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Group097",2,[-299,-300],[1,7.653287887573242,1.5682361125946045,13.497503280639648],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Group098",2,[-301,-302],[1,-2.5780205726623535,1.5682361125946045,10.863090515136719],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Group104",2,[-303,-304],[1,1.311867117881775,2.4603865146636963,-4.347107887268066],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]],[4,"Group105",2,[-305,-306],[1,1.4231911897659302,1.5682361125946045,-7.741477012634277],[3,-0.6532814850920046,-0.2705980436662191,-0.2705980436662191,0.6532814850920046],[1,-90,-44.999998876174644,0]],[52,"Akvarijum",1,[[12,-307,[78],[5],79],[34,-308,45]],[1,6.297811985015869,1.1875211000442505,1.2783701419830322],[3,-0.00017263940860291947,0,0,0.9999999850978172],[1,-0.01978301907943366,0,0]],[16,"Task1",20,[[209,true,"3_hotspot0_0.txt",-309]],[1,1.203,0,-4.178],[1,7,7,7]],[128,"Arrow5",31,[[12,-310,[80],[5],81],[84,true,-311,[82],83]],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0.0254,0.0154,0.0154],[1,0,90,0]],[4,"Zelena_zgrada",1,[-312,-313],[1,8.594603538513184,1.966347098350525,-10.097567558288574],[3,-0.5,-0.5,-0.5,0.5],[1,-90,-90,0]],[27,"Akvarijum-001",1,[[111,false,-314,[89],[5],90],[34,-315,50]],[1,7.785,0.191,13.555],[3,-0.00017263940860291952,0,0,0.9999999850978172],[1,0.9999998807907104,5,0.9999999999999999],[1,-0.019783019079433663,0,0]],[4,"Teretana",1,[-316,-317],[1,-0.7522485852241516,1.0754996538162231,7.6444573402404785],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Bone375",80,[-318,-319],[1,0.0016991209704428911,0.0492401123046875,0.8022284507751465],[3,0.7067079388611924,0.023746350257777896,-0.023746350257777896,0.7067079388611924],[1,90,3.8489844836989615,0]],[17,"Object501",80,[[18,-320,[91],[5],1,92,93],[34,-321,29]],[1,0,0.04845208302140236,0.6565775275230408]],[27,"Lubenica",1,[[12,-322,[96],[5],97],[34,-323,23]],[1,-6.150408744812012,1.0352736711502075,-8.12747573852539],[3,-0.4778501615745083,0.01028398315395856,-0.00991400967896245,0.8783252103781326],[1,2.554490089416504,2.5544910430908203,2.5544869899749756],[1,-57.08982526416939,0.49239057308531875,-1.561151088420649]],[16,"Cube",1,[[112,"Cube<ModelComponent>",false,-324,[100],[5],101],[34,-325,52]],[1,-6.98,0.289,0.829],[1,2,3,2]],[52,"Suncobran",1,[[12,-326,[104],[5],105],[34,-327,54]],[1,-2.996788263320923,0.8169321417808533,-4.241025447845459],[3,-0.6946181230631996,-0.13712446730630629,-0.17052859489558636,0.6852901151345002],[1,-91.32768109614838,-25.165984275143217,-2.4773727964220855]],[16,"Cube",1,[[112,"Cube<ModelComponent>",false,-328,[106],[5],107],[34,-329,56]],[1,9.137,0.82,0.578],[1,2,3,2]],[37,"Group049 Socket",1,[-330],[1,8.702157020568848,0.8914170861244202,-2.7926623821258545],[3,-0.2705980436662191,0.6532814850920046,0.6532814850920046,0.2705980436662191],[1,1.0483750104904175,1.0483750104904175,1.0483750104904175],[1,-90,135.00000112382537,0]],[37,"Cizme Socket",1,[-331],[1,6.650427341461182,1.0990575551986694,-11.47336196899414],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.0773999691009521,1.0773999691009521,1.0773999691009521],[1,-90.00000000000003,0,0]],[52,"ShoeHouse_001",88,[[12,-332,[137],[5],138],[34,-333,47]],[1,-0.09985824674367905,0.15933601558208466,-1.052169919013977],[3,0.7069847003370651,0,0,0.7072288409626054],[1,89.98021765892676,0,0]],[4,"Teretana Socket",1,[-334],[1,-0.7522485852241516,1.0754996538162231,7.6444573402404785],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[16,"Fitness_Center001",90,[[12,-335,[139],[5],140],[34,-336,29]],[1,0.0009425781900063157,9.689330937590057e-8,-1.0754719972610474],[1,1.0288159847259521,1.0288159847259521,0.9730116724967957]],[129,"3D buttons",false,"67huejYh5JkZlkuzXb/GdJ",8,[12,13]],[27,"3Ddugme",12,[[113,"Plane<ModelComponent>",0,-337,[148],[5],149],[84,true,-338,[150],151]],[1,0.07000000000000006,0.48600000000000065,0.020000000000000018],[3,-7.850462293418873e-17,-0.7071067811865476,7.85046229341888e-17,0.7071067811865475],[1,0.184,2.5340000000000003,0.26800000000000007],[1,6.356025069192229e-30,-90.00000000000003,1.2722218725854067e-14]],[27,"3Ddugme",13,[[113,"Plane<ModelComponent>",0,-339,[158],[5],159],[84,true,-340,[160],161]],[1,0.07000000000000006,0.48600000000000065,0.020000000000000018],[3,-7.850462293418873e-17,-0.7071067811865476,7.85046229341888e-17,0.7071067811865475],[1,0.184,2.5340000000000003,0.26800000000000007],[1,6.356025069192229e-30,-90.00000000000003,1.2722218725854067e-14]],[214,0,1073741824,428.14189189189193,2000,6,41943040,34,[4,4278190080]],[3,["ddnY0F06xALYrGESIBwYGV"]],[16,"Podloga",15,[[211,"Plane<ModelComponent>",-341,[15],[5],16]],[1,0,-0.242,0],[1,444,444,444]],[130,"Razigrani grad samo putevi 20. april",15,[-342]],[57,"Putevi",98,[[12,-343,[20],[5],21]]],[17,"BlueHouse002",66,[[18,-344,[23],[5],1,24,25]],[1,0,0,-2.055464744567871]],[4,"Bone431",66,[-345],[1,-0.0019351531518623233,0.0031137634068727493,-2.020362377166748],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[59,"Bone432",101,[[30,"Bone433",-346,[1,2.7773935794830322,-0.0000018894195363827748,-0.0000015502929500144091]]],[1,0.15471678972244263,-1.3248128816201188e-8,7.02478075709223e-7],[3,-5.060473360289155e-7,8.048857585405149e-10,-0.0015905172121693611,0.999998735126571],[1,0.9087943434715271,1.100432276725769,1.100432276725769],[1,-0.000057988826523700624,8.872107800462479e-13,-0.18225992384570316]],[14,"Fashion",2,[[30,"group5",-347,[1,0,0.048460591584444046,0.05465134233236313]]],[1,-7.10543966293335,1.072173833847046,1.1078882217407227],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,"Bone329",5,[-348],[1,-0.0900239646434784,0.23873738944530487,-0.05150455981492996],[3,0.6322525053721596,-0.31663345840358387,0.6489596274604935,0.2808049579269401],[1,129.9559255338809,-92.4552073390121,-2.058646713418973]],[4,"Bone330",104,[-349],[1,0.16748149693012238,-0.0002309888950549066,-2.566071088949684e-8],[3,-0.007328423244940716,0.02476406483179962,0.28364405187608177,0.9585818103537476],[1,-1.9181561772770521,3.5264354968664566,32.91737867825188]],[4,"Bone331",105,[-350],[1,0.49558448791503906,-0.000027459040211397223,1.2975380059288e-7],[3,0.04866463788528776,0.09174763595162105,-0.4653408024590409,0.8790176686981658],[1,16.912953010089687,20.584041441534612,-54.01353687212669]],[4,"Bone332",106,[-351],[1,0.24268199503421783,0.000012974979654245544,-1.0983940512687695e-7],[3,0.03474830051037177,0.07211996531991151,-0.4326645682167197,0.8979936734875892],[1,11.325618364526315,14.543087557856685,-50.538155132965244]],[14,"Bone333",107,[[11,"Bone334",-352,[1,0.13294389843940735,0.0006992009002715349,4.6132649345054233e-7],[3,0.011654455825474965,0.09938889468502292,-0.09775687485248213,0.9901664580724685],[1,2.4823295954341282,11.70349074410115,-11.02717249374565]]],[1,0.19317340850830078,-0.00000377315018340596,-1.7558060960709554e-7],[3,0.031794670425725535,0.0992102158991255,-0.2968559214389909,0.9492223100519583],[1,8.258012295916151,14.451626857493903,-33.86623068717623]],[4,"Bone343",5,[-353],[1,0.30396130681037903,-0.10718879848718643,-0.038304880261421204],[3,0.31562293165686905,-0.6327574967381369,0.3753720294054916,0.599246155493728],[1,58.69338046450383,-94.742498104384,2.8920829926538576]],[4,"Bone344",109,[-354],[1,0.12464900314807892,-0.0001714546961011365,1.9927969674427004e-7],[3,0.006851330133127395,-0.02774313545453512,0.23969177108787984,0.9704283758131321],[1,1.7213979545679965,-3.6995376804254745,27.699041729000008]],[4,"Bone345",110,[-355],[1,0.388633131980896,-0.00002171281084883958,7.176006988629524e-8],[3,0.046389557068585045,0.08307965781718016,-0.4853130542104499,0.8691472941135385],[1,17.087839990507632,20.191177746072047,-56.710608319672815]],[4,"Bone346",111,[-356],[1,0.19295579195022583,0.000010287830264132936,-3.096004874691971e-8],[3,0.11905998268925864,0.1438500318660146,-0.42402280364793715,0.8861921636082789],[1,28.549908288021097,30.717790310346935,-45.83018606675684]],[14,"Bone347",112,[[11,"Bone348",-357,[1,0.10336919873952866,0.0005439406959339976,4.4539103782881284e-7],[3,-0.13303451450573173,0.18215649118176816,-0.12888330425117836,0.965665534517966],[1,-12.704910028051522,19.424114916246513,-17.300459468184545]]],[1,0.1537702977657318,-0.000002782242063403828,5.307275685595414e-8],[3,-0.05687379553845914,0.15930377197164552,-0.3149280895588636,0.9339207557515037],[1,-0.4245936891845359,19.216738331898792,-37.32649477329701]],[4,"Bone350",5,[-358],[1,0.486430823802948,-0.020570840686559677,-0.05150514096021652],[3,0.5605592733969663,-0.43101427007544096,0.43101427007544096,0.5605592733969663],[1,90,-75.11339880268471,0]],[4,"Bone351",114,[-359],[1,0.23860090970993042,-1.1368683518051719e-15,9.980441362245074e-9],[3,-5.825407211862806e-16,-2.9699105706165406e-15,-0.37786293395658194,0.9258615464213446],[1,-2.665055748278839e-13,-4.763447219297084e-13,-44.40274108229977]],[14,"Bone352",115,[[11,"Bone353",-360,[1,0.24010320007801056,-0.000012402339962136466,3.8864659046566885e-8],[3,3.787997475921341e-8,-1.3454974040423986e-8,-0.33471235674176686,0.9423203479944444],[1,0.0000046064221823573935,-2.880587462688716e-14,-39.11009492182007]]],[1,0.24989479780197144,-0.000021704099708586,4.3994969445293464e-8],[3,3.574631186290965e-15,2.7214197435498283e-15,-0.2584120112134752,0.9660347987834634],[1,5.497118405175633e-13,4.698628600600827e-13,-29.951714702021587]],[4,"Bone355",5,[-361],[1,0.2652164101600647,0.20104040205478668,-0.05150514096021652],[3,0.7056772342261483,-0.04494038742850148,0.6038338142244004,0.36794663671777533],[1,141.6584386333285,-73.23299019471324,22.391327267831844]],[4,"Bone356",117,[-362],[1,0.2623380124568939,-7.645487443141974e-8,1.2875780441845563e-7],[3,-2.6340114230434658e-8,1.0330083510430842e-8,-0.3651067336017218,0.9309656669709581],[1,-0.0000032421762270922854,2.466178441019101e-15,-42.8283028362233]],[14,"Bone357",118,[[11,"Bone358",-363,[1,0.27296140789985657,-0.000014158060366753489,7.247248277053586e-7],[3,-1.9116314007434928e-7,-6.853601399661604e-7,-0.30844176045082716,0.9512432288376554],[1,-0.000055650292163148496,-0.00010060661470823197,-35.93069761970175]]],[1,0.27460789680480957,-0.0000239894197875401,3.890341417900345e-7],[3,1.9181369060601813e-8,1.2690376536990934e-8,-0.39371868308865915,0.9192309821731053],[1,0.000003758186568677153,0.000003191666029019256,-46.372171082020216]],[4,"Bone360",5,[-364],[1,0.47170960903167725,-0.2692897617816925,-0.047576457262039185],[3,0.35176619984919955,-0.6134008186187845,0.18500384739691147,0.682476045594128],[1,45.948769944262914,-79.51571691493177,-10.313029966918268]],[4,"Bone361",120,[-365],[1,0.23559018969535828,-1.5063879743593134e-7,2.913287033834422e-8],[3,3.3671569692718165e-15,-1.4926276095987538e-15,-0.38433498662004606,0.9231937056001676],[1,4.1227027661185425e-13,-1.3640294022338946e-14,-45.204923251066255]],[14,"Bone362",121,[[11,"Bone363",-366,[1,0.24557149410247803,-0.00001267135939997388,7.839375939511228e-7],[3,-8.429610641853826e-7,-0.000002483441427050794,-0.3225901694487019,0.9465387380177209],[1,-0.00023139526316852245,-0.0003795167039666271,-37.63927978177708]]],[1,0.24831119179725647,-0.000021737410861533135,2.749208931618341e-7],[3,-3.7112062469760944e-16,-3.01242308109053e-15,-0.2385499144209816,0.9711302375735925],[1,-1.3952634218966753e-13,-3.8973377581470117e-13,-27.601941872706142]],[4,"Bone365",5,[-367],[1,0.2596973180770874,-0.18697309494018555,-0.047576408833265305],[3,0.12630297397999304,-0.6957352842506894,-0.057958197557164345,0.7047274794900127],[1,5.783372366678319,-88.50641414847499,-14.91799783623305]],[4,"Bone366",123,[-368],[1,0.24891358613967896,-1.7296970611369034e-7,-1.1679919964535657e-7],[3,-3.458817912400359e-15,-4.087482369248174e-15,-0.276715006675287,0.9609520305825342],[1,-6.027996068499397e-13,-6.610056009064181e-13,-32.12848693909053]],[14,"Bone367",124,[[11,"Bone368",-369,[1,0.26201629638671875,-0.000013536960068449844,6.31981265541981e-7],[3,0.0000029222460652395116,0.000008534842055853239,-0.3220418421629576,0.9467254363409201],[1,0.000797383368842583,0.001304297548961287,-37.57290374986003]]],[1,0.2691552937030792,-0.00002356588993279729,3.1027607860778517e-7],[3,-0.2148297706183839,-0.6007105649613763,-0.2593105410114862,0.7250882912584969],[1,-38.86311132664013,-81.67311219354546,-6.7735202794008185]],[4,"Bone370",5,[-370],[1,-0.006568591110408306,0.32020682096481323,-0.0515051893889904],[3,0.6725822486610917,0.20425038920804395,0.7106550720040561,-0.029736609242844398],[1,-160.14693916332715,-95.5164611179723,13.443443561605104]],[4,"Bone371",126,[-371],[1,0.24126051366329193,-7.569792570549794e-10,3.3640350238783867e-7],[3,0.002834391538135972,0.008640140266889605,-0.37633174535258485,0.9264403551447089],[1,0.9396057274016747,1.4502747797392124,-44.206693689248894]],[14,"Bone372",127,[[11,"Bone373",-372,[1,0.24070090055465698,-0.000012465479812817648,6.529610914185469e-7],[3,-0.0027622969431197087,0.003665290317306575,-0.3085243412373643,0.9512053754192825],[1,-0.21183794495265132,0.3728437082213294,-35.941595357494805]]],[1,0.24770599603652954,-0.000021586010916507803,6.058240842321538e-7],[3,0.002277983319956312,0.011313090870377913,-0.20743125380386912,0.9781815269735507],[1,0.573603030308457,1.44684515070912,-23.938717483189414]],[17,"Object482",5,[[18,-373,[26,27],[5],1,28,29]],[1,-0.09231839329004288,-0.0634193867444992,-0.8498353362083435]],[17,"BlueHouse001",67,[[18,-374,[30],[5],1,31,32]],[1,0,0,-2.055464744567871]],[4,"Bone412",67,[-375],[1,-0.0019347656052559614,0.003112988080829382,-2.020362377166748],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[59,"Bone413",131,[[30,"Bone414",-376,[1,2.7773935794830322,-0.0000015502929500144091,-0.0000011627197409325163]]],[1,0.15471678972244263,-1.3248129704379608e-8,7.02478075709223e-7],[3,-5.060473360289155e-7,8.048780424905954e-10,-0.0015905172121693611,0.999998735126571],[1,0.9087943434715271,1.100432276725769,1.100432276725769],[1,-0.00005798882652510694,3.0132350485869424e-15,-0.18225992384570316]],[4,"Bone418",68,[-377],[1,-0.0014882811810821295,0.03630476072430611,-1.4496458768844604],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[4,"Bone419",133,[-378],[1,0.07921996712684631,-0.0000015502929500144091,-3.572940840967931e-7],[3,5.9604449465066705e-8,-1.5258691555281514e-10,-0.002559983641003339,0.9999967232365086],[1,0.0000068301891700127425,0,-0.29335283692007574]],[14,"Bone420",134,[[11,"Bone421",-379,[1,1.1052290201187134,6.535598373602625e-8,-1.9378660454094643e-7],[3,0.0000024160968279091553,1.2737072821296126e-7,0.05264445878017431,0.9986133190348949],[1,0.0002772487578684582,-4.859417819581213e-13,6.0354005887407665]]],[1,0.9862333536148071,6.63821997370917e-10,-3.552713599391162e-17],[3,1.986725052140617e-23,-3.029061946706469e-25,0.026394186592104928,0.9996516127702397],[1,2.279918845981579e-21,-9.492016549519194e-23,3.0249022780845354]],[17,"PinkHouse001",68,[[18,-380,[33],[5],1,34,35]],[1,0,-5.684341759025859e-16,-1.4515849351882935]],[4,"Bone434",69,[-381],[1,-0.0014882811810821295,0.03630476072430611,-1.4496458768844604],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[4,"Bone435",137,[-382],[1,0.07921996712684631,-0.0000015502929500144091,-3.572940840967931e-7],[3,5.9604449465066705e-8,-1.5258691555281514e-10,-0.002559983641003339,0.9999967232365086],[1,0.0000068301891700127425,0,-0.29335283692007574]],[14,"Bone436",138,[[11,"Bone437",-383,[1,1.1052290201187134,6.535597663059889e-8,-1.9378660454094643e-7],[3,0.0000024160968279091553,1.2737072821296126e-7,0.05264445878017431,0.9986133190348949],[1,0.0002772487578684582,-4.859417819581213e-13,6.0354005887407665]]],[1,0.9862333536148071,6.63817445456516e-10,-2.8421708795129297e-16],[3,6.626056118785128e-24,-2.3878412890473266e-25,0.026394186592104928,0.9996516127702397],[1,7.608078268859888e-22,-4.746008383259126e-23,3.0249022780845354]],[17,"PinkHouse002",69,[[18,-384,[36],[5],1,37,38]],[1,0,-2.8421708795129297e-16,-1.4515849351882935]],[4,"Bone428",70,[-385],[1,-0.003889685031026602,0.007001122925430536,-2.2125279903411865],[3,0.00048273452907110904,-0.707106595390268,-0.0005408128529824991,0.707106595390268],[1,-0.00470600133592604,-90.00000340600369,-0.08293648392880618]],[59,"Bone429",141,[[30,"Bone430",-386,[1,3.295729875564575,-1.1368683518051719e-15,-1.1368683518051719e-15]]],[1,0.1111668050289154,1.1368683518051719e-15,1.4404031301040732e-9],[3,-6.456552145655438e-17,-2.246812008183235e-16,0.000727649700769356,0.9999997352629214],[1,0.879338800907135,1.1473660469055176,1.147367000579834],[1,-7.379935136021052e-15,-2.5741205892700692e-14,0.08338252099423116]],[52,"Fat001",70,[[18,-387,[39],[5],1,40,41]],[1,-0.0000015502929500144091,0.0000062011718000576366,-2.214588165283203],[3,0,-2.003070430090749e-16,-0.7071067215818992,0.7071068407911908],[1,0,0,-90]],[14,"Bone425",71,[[65,"Bone426",-388,[1,0.21674729883670807,-0.0013084469828754663,-4.636496964138814e-9],[3,0.0000019440126076089744,9.654198711748312e-8,-0.002767782382270487,0.9999961696811123],[1,1.002118468284607,0.9981305599212646,0.9981305599212646],[1,0.0002228006154749765,0.00001167960517011583,-0.31716490315489576]]],[1,1.0020623207092285,23.58294105529785,-1.6012811660766602],[3,0.49849516875583094,-0.5015003157796568,0.5015003157796568,0.49849516875583094],[1,89.99999999999999,-90.34436500088583,0]],[17,"Yellow_fat_004",71,[[18,-389,[42],[5],1,43,44]],[1,0.00000930175792746013,0.0000031005859000288183,-1.6017389297485352]],[4,"Bone422",72,[-390],[1,0.00012208556290715933,-0.00013332520029507577,-1.6012811660766602],[3,0.49849516875583094,-0.5015003157796568,0.5015003157796568,0.49849516875583094],[1,89.99999999999999,-90.34436500088583,0]],[59,"Bone423",146,[[30,"Bone424",-391,[1,2.8588085174560547,-0.000005813598363602068,-2.2737367036103438e-15]]],[1,0.21674729883670807,-0.0013084469828754663,-4.636496964138814e-9],[3,0.0000019440126076089744,9.654198711748312e-8,-0.002767782382270487,0.9999961696811123],[1,1.0017051696777344,0.9984211325645447,0.9984211325645447],[1,0.0002228006154749765,0.00001167960517011583,-0.31716490315489576]],[17,"Yellow_3_003",72,[[18,-392,[45],[5],1,46,47]],[1,0.000022866821382194757,0,-1.5975921154022217]],[17,"Big_Ben_Clock_017",73,[[18,-393,[48],[5],1,49,50]],[1,-0.0011437286157160997,-0.0020952208433300257,-0.1470239758491516]],[14,"Bone483",73,[[65,"Bone484",-394,[1,0.15471678972244263,-1.3248129704379608e-8,7.02478075709223e-7],[3,6.798504878001034e-8,-1.74050232760123e-10,-0.002560116819258847,0.999996722895564],[1,0.9079382419586182,1.1016534566879272,1.1016533374786377],[1,0.000007790538260580028,5.111428623730102e-16,-0.2933680980740127]]],[1,-0.0011437286157160997,0.027995966374874115,-2.4940052032470703],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[14,"Bone486",74,[[65,"Bone487",-395,[1,0.21674729883670807,-0.0013084469828754663,-4.636496964138814e-9],[3,0.0000019440126076089744,9.654198711748312e-8,-0.002767782382270487,0.9999961696811123],[1,1.002118468284607,0.9981305599212646,0.9981305599212646],[1,0.0002228006154749765,0.00001167960517011583,-0.31716490315489576]]],[1,0.0014475859934464097,-0.00013255004887469113,-1.6012811660766602],[3,-0.49849516875583094,0.5015003157796568,-0.5015003157796568,-0.49849516875583094],[1,89.99999999999999,-90.34436500088583,0]],[17,"Yellow_fat_005",74,[[18,-396,[51],[5],1,52,53]],[1,0.000009689330909168348,0.0000031005859000288183,-1.6017389297485352]],[17,"adw004",9,[[18,-397,[54],[5],1,55,56]],[1,-0.2695409059524536,-0.050450216978788376,0.5633927583694458]],[4,"Bone468",9,[-398],[1,0.03471338003873825,0.12882719933986664,0.11759710311889648],[3,0.5397476546150334,-0.500090717549752,0.45662781530478175,0.5000727765517005],[1,89.98119829415845,-85.23389261961195,-4.769726062059494]],[14,"Bone469",154,[[30,"Bone470",-399,[1,0.3935946524143219,0,-2.8421708795129297e-16]]],[1,0.3910582363605499,-0.000012014770618407056,2.8421708795129297e-16],[3,0.007826495748057424,0.09184061539204108,-0.08587553168226618,0.9920329835176879],[1,1.8199352633516137,10.73338618598054,-9.726492906907515]],[17,"Object556",9,[[18,-400,[57],[5],1,58,59]],[1,0.057484086602926254,0.37972506880760193,0.7023438811302185]],[17,"Object557",9,[[18,-401,[60],[5],1,61,62]],[1,0.17116397619247437,-0.27404895424842834,0.5316252708435059]],[17,"Object558",9,[[18,-402,[63],[5],1,64,65]],[1,-0.04163544252514839,-0.053606610745191574,-0.039834391325712204]],[4,"Point010",9,[-403],[1,-0.4408418536186218,-0.060413211584091187,0.6765326857566833],[3,0.5118725849739406,0.4878387705219357,0.487838591708003,0.5118723465553637],[1,90.00008300407401,-0.00005909150507464308,87.24566594325528]],[4,"Bone471",159,[-404],[1,0,-0.0000015502929500144091,-1.1368683518051719e-15],[3,0.00990879997038373,-0.13015004936032182,0.07526051965494016,0.9885841565167436],[1,2.2699307701327895,-15.166931226602578,8.40813306500151]],[4,"Bone472",160,[-405],[1,0.06773540377616882,8.526512638538789e-16,4.48346776371622e-10],[3,0.010729678801719319,0.12583176668786525,-0.08427479780867986,0.9884073041713769],[1,2.4645328585623787,14.713690911842603,-9.433071012956106]],[14,"Bone473",161,[[11,"Bone474",-406,[1,0.07606358081102371,-7.751464750072046e-7,1.1974418123728015e-9],[3,0.00016088969959997276,0.04361800837098378,-0.004752490656044327,0.999036964928134],[1,0.04217490906473673,5.000098344918066,-0.543274821979759]]],[1,0.09906992316246033,0.000010658260180207435,6.221557491414842e-9],[3,-0.011199642813316705,0.13369171213019415,0.0797120028233089,0.98774849567815],[1,-2.519894449126126,15.612116011632823,8.886420171761626]],[4,"Point011",9,[-407],[1,-0.16938725113868713,-0.26727259159088135,0.48482632637023926],[3,0.706394673688869,-0.03173892950870057,-0.0317390971467643,0.7063935412006161],[1,90.00009265435295,0.00001776021508123789,-5.145255984518605]],[74,"Bone475",163,[-408],[3,9.300841925912737e-9,9.209002678086419e-8,0.06990331450040906,0.9975537712934819],[1,3.287319862828513e-7,0.000010555581651005661,8.016867887178432]],[4,"Bone476",164,[-409],[1,0.12233050167560577,2.8421708795129297e-16,7.457980344405257e-10],[3,-0.01039406625700637,-0.12585402643518667,-0.08164912959705002,0.9886284170772862],[1,-2.3860232756045834,-14.700368157608608,-9.138703309109149]],[14,"Bone477",165,[[11,"Bone478",-410,[1,0.14158520102500916,-7.751464750072046e-7,8.505378623624438e-10],[3,0.0028750384662044335,-0.1258358527414112,-0.02237806503107505,0.9917944819992319],[1,0.004070355590770594,-14.461664650498795,-2.5856304352454083]]],[1,0.1885775923728943,-9.689330937590057e-8,1.1471584793198986e-9],[3,0.005299353167051348,-0.101213479964102,0.05205176522210167,0.9934879778169591],[1,1.2134772076668583,-11.696361676904008,5.874675604018438]],[4,"Point012",9,[-411],[1,-0.5559000968933105,0.006421604659408331,0.5823482275009155],[3,0.5989663684901615,-0.3758183770420471,-0.3758182280304331,0.5989661896762246],[1,90.00001346048943,-0.000005808404274120885,-64.21200722809603]],[74,"Bone479",167,[-412],[3,9.072634382786782e-8,1.3397832988904267e-7,0.07163350148332191,0.997431020905813],[1,0.000009366112830689131,0.000014719672771981362,8.215631080608958]],[4,"Bone480",168,[-413],[1,0.12742990255355835,-7.796883494393114e-8,9.188914629199019e-10],[3,0.006047471421486169,0.12613730122273528,-0.047505177518653456,0.9908562294493448],[1,1.3793666233701283,14.573629282465493,-5.314120413173182]],[14,"Bone481",169,[[11,"Bone482",-414,[1,0.12073060125112534,0.00000387573300031363,6.132705898664881e-9],[3,0.0001885250411900773,0.1264100539582288,0.01450737306763476,0.9918719669610906],[1,-0.18879793283143975,14.528642753708974,1.651869986472673]]],[1,0.17957371473312378,0.0000015502939731959486,5.518411949623214e-9],[3,0.002362103156980433,0.10197425441694195,-0.0228729541764082,0.9945212415388766],[1,0.5370256677904724,11.720936077655754,-2.579957058698436]],[4,"Bone438",10,[-415],[1,0.5491815209388733,-0.19854110479354858,-0.3960965871810913],[3,0.7435612259085748,0.2774433857533424,0.580467595535737,0.18220659033092013],[1,-176.247863562873,-77.2704276674023,38.61779782552282]],[14,"Bone439",171,[[11,"Bone440",-416,[1,0.32908007502555847,-0.0000041262887862103526,6.71552484732274e-8],[3,-0.00000135604148354903,-0.0000017299834143947554,0.04379889753022315,0.9990403678382098],[1,-0.00014712349738587072,-0.00019198188154610608,5.020590027856067]]],[1,0.3352887034416199,0.0000036932769944542088,5.514857903676784e-8],[3,-0.000002861717788064671,-0.0000010910113075331027,0.35623284986324133,0.9343972156791424],[1,-0.0003509521377718344,-6.893154374247387e-12,41.738043658574945]],[14,"Bone442",10,[[11,"Bone443",-417,[1,0.2896575927734375,1.2669939053466805e-7,3.3616669270486454e-7],[3,-5.9203532819402655e-8,-2.3126210665260996e-7,-0.19902703191721843,0.9799940002704943],[1,-0.000012948693751307575,-0.000029671432091929878,-22.960136562338626]]],[1,-0.5519481897354126,0.4293617010116577,-0.2934595048427582],[3,0.30641304903829353,-0.4913387509569004,0.6684991002870839,-0.466697148161984],[1,102.4013397184622,172.596103896123,-67.68018859148268]],[17,"Boot003",10,[[18,-418,[66],[5],1,67,68]],[1,0.1446915566921234,0.036718688905239105,0.3386097848415375]],[17,"Boot004",10,[[18,-419,[69],[5],1,70,71]],[1,-0.3160555064678192,0.11424574255943298,0.3796197474002838]],[37,"Circle020",10,[-420],[1,0.07804125547409058,0.7044580578804016,0.3765549957752228],[3,0.24900409718066938,-0.020780781399802564,-0.02403775243448249,0.9679810458730853],[1,1.856806993484497,1.856806993484497,1.856806993484497],[1,28.80588521399231,-1.6220104610956905,-3.2610409151776945]],[37,"Bone445",176,[-421],[1,0.006529834121465683,-0.004346245899796486,0.3642914891242981],[3,-0.6968138155220148,0.006280856150492065,0.7172043855022481,-0.0053783603459888795],[1,0.5385587811470032,0.5385587811470032,0.5385587811470032],[1,-179.9132490640531,91.65304475561483,-0.9435862222528443]],[4,"Bone446",177,[-422],[1,0.40680739283561707,1.2263059545603028e-7,-7.221127162893026e-8],[3,1.7780406555748595e-7,4.679383207167973e-8,0.25450998143890513,0.9670701470668684],[1,0.00002106863172829903,1.1372388588788378e-12,29.489102396455095]],[14,"Bone447",178,[[30,"Bone448",-423,[1,0.39517590403556824,-0.0000015502929500144091,0.000002131652991010924]]],[1,0.3657020330429077,0.0000010887249572988367,-2.422319056449851e-8],[3,-9.651478958851082e-9,1.6288002448928498e-8,0.5097726705763225,0.8603091446296987],[1,-0.000003962317740054811,0.000004517386470112641,61.29737726209384]],[37,"Circle021",10,[-424],[1,-0.3111504912376404,-0.2698584794998169,-0.017059853300452232],[3,0.08088378042779745,-0.0016295473685993254,0.003921005961942311,0.9967144949037953],[1,1.8568079471588135,1.8568079471588135,1.8568079471588135],[1,9.27965847115511,-0.2224679974003503,0.43273845592334875]],[37,"Bone449",180,[-425],[1,-0.0048059080727398396,0.021270789206027985,0.36406201124191284],[3,0.7110602503041572,-0.020596896071967036,-0.7024717571398306,0.022416929550421273],[1,0.5385587811470032,0.5385587811470032,0.5385587811470032],[1,179.83111757870722,89.2986229964787,-3.4849174312417]],[4,"Bone450",181,[-426],[1,0.40065109729766846,1.207381927770257e-7,-6.475384850546106e-8],[3,1.680822808931294e-7,7.451366472918486e-8,0.4052772828550779,0.9141938109621894],[1,0.000021068629332149018,1.7595391902683582e-13,47.81700855236051]],[14,"Bone451",182,[[30,"Bone452",-427,[1,0.40600311756134033,-0.0000023254390271176817,6.782531727367314e-7]]],[1,0.3712955117225647,0.0000010993229579980834,5.824021087619258e-8],[3,-8.546971359374708e-8,1.5291665307073385e-7,0.4878935145510944,0.8729031552577583],[1,-0.00003263599455848332,0.000038315645396618406,58.404444367519844]],[17,"Sandal001",10,[[18,-428,[72],[5],1,73,74]],[1,-0.5512535572052002,0.42673829197883606,-0.29392296075820923]],[17,"Shoe001",10,[[18,-429,[75],[5],1,76,77]],[1,0.54201340675354,0.32603126764297485,-0.37270182371139526]],[16,"Task8end",16,[[216,-430,[30]]],[1,6.324,0,-12.01],[1,7,7,7]],[30,"TackaOkretanja",6,[1,0,-1.7763568394002505e-15,-1.004999999999999]],[57,"Camera",6,[[215,320,0.1,14,1822425087,-431,[4,4294955909]]]],[4,"Bone415",78,[-432],[1,23.594846725463867,-0.8828998804092407,-1.9812350273132324],[3,0.5,-0.5,0.5,0.5],[1,90,-90,0]],[59,"Bone416",189,[[30,"Bone417",-433,[1,2.7773935794830322,-0.0000015502929500144091,-0.0000015502929500144091]]],[1,0.15471678972244263,-1.3248129704379608e-8,7.02478075709223e-7],[3,-5.060473360289155e-7,8.048782645351973e-10,-0.0015905172121693611,0.999998735126571],[1,0.9087943434715271,1.100432276725769,1.100432276725769],[1,-0.00005798882652506648,2.8457768712555145e-14,-0.18225992384570316]],[17,"GreenHouse001",78,[[18,-434,[86],[5],1,87,88]],[1,0,0,-1.9964356422424316]],[74,"Bone274_mirrored_001",81,[-435],[3,-9.689522042791462e-9,1.3280504120841939e-7,0.997348961044625,-0.07276709354639362],[1,-179.99998474121162,-179.99999999999977,-8.34587107599479]],[4,"Bone275_mirrored_001",192,[-436],[1,0.4645422101020813,-8.542247087461874e-7,0],[3,-5.691401651160675e-9,1.330363961897943e-7,0.04274171277537111,0.9990861554385637],[1,-0.0000013079604130498473,0.000015314747813906586,4.899332002621721]],[14,"Bone276_mirrored_001",193,[[11,"Bone277_mirrored_001",-437,[1,0.38765379786491394,-0.0000016225529861912946,-3.8757320908189286e-7],[3,-5.1015362605806526e-20,-2.6645352586105392e-15,0.000019174758559642413,0.9999999998161644],[1,8.761402589479234e-21,-3.053332494206657e-13,0.002197265477434365]]],[1,0.42774441838264465,0.000009225173016602639,3.8757320908189286e-7],[3,-3.909908384177112e-15,4.990459862481598e-15,-0.08142244950117308,0.9966796800964837],[1,-4.053670941834086e-13,5.406537375092421e-13,-9.34066571767535]],[4,"Bone376",81,[-438],[1,0.46454840898513794,7.751464750072046e-7,3.0836826425684194e-9],[3,9.459199928004652e-17,8.954231847416852e-16,-0.044774110678495335,0.9989971366390146],[1,1.5484838955347602e-14,1.0340495966634213e-13,-5.132450977073772]],[14,"Bone377",195,[[30,"Bone378",-439,[1,0.38766011595726013,0.0000015502929500144091,1.8046861782750057e-8]]],[1,0.42773202061653137,-0.000010852049854293,1.865695864466943e-8],[3,5.613690345642813e-17,5.588681201558769e-18,0.06919034572666866,0.9976034763663487],[1,6.434698019370669e-15,1.9566562848282426e-16,7.9349693802430945]],[16,"Ograda",1,[[12,-440,[94],[5],95]],[1,0.4304172098636627,-0.6525676250457764,0.556809663772583],[1,1775.5789794921875,1775.5789794921875,1775.5789794921875]],[16,"Pod",1,[[12,-441,[98],[5],99]],[1,0.05457809939980507,-0.027366064488887787,0.5705034732818604],[1,0.6133763194084167,0.6133763194084167,0.6133763194084167]],[57,"Kuca_sa_sesirom",1,[[12,-442,[102],[5],103]]],[57,"Kuca_sa_instrumentima",1,[[12,-443,[108],[5],109]]],[57,"Scena",1,[[12,-444,[110,111,112,113],[5],114]]],[17,"Object481",87,[[12,-445,[115],[5],116]],[1,-0.09231839329004288,-0.0634193867444992,-0.8498353362083435]],[27,"Big_Ben_Clock_018",7,[[12,-446,[117],[5],118]],[1,3.78947377204895,0.9311525225639343,-0.018576769158244133],[3,-0.6664617672004013,0.739886404676072,0.06150641305570076,-0.06792482748344247],[1,0.8255499005317688,1.2062182426452637,1.0189131498336792],[1,-0.2625108903506223,-169.74586665930613,-84.0251192918334]],[27,"Big_Ben_Clock_019",7,[[12,-447,[119],[5],120]],[1,3.7887179851531982,-0.9311245679855347,-0.032430969178676605],[3,0.4871542953769921,-0.4551193028368696,-0.5481912981676366,0.5050083299256654],[1,0.8241904973983765,1.0009770393371582,1.2218539714813232],[1,-174.75135256753424,101.61210935757347,-85.64220221552216]],[27,"Big_Ben_Clock_020",7,[[12,-448,[121],[5],122]],[1,3.7887179851531982,-0.9311245679855347,-0.032430969178676605],[3,-0.5053072467316643,0.5484616643082163,-0.45475851549568336,0.4868768650992658],[1,0.8241902589797974,1.0010900497436523,1.221799612045288],[1,5.124552576374696,101.55736195258095,-85.64002911408546]],[27,"Big_Ben_Clock_021",7,[[12,-449,[123],[5],124]],[1,3.789585828781128,0.00004030761920148507,-0.9311330914497375],[3,-0.43790549049795807,0.5968243481085487,-0.5692597628933895,0.35774683960464365],[1,0.8418952226638794,1.0055092573165894,1.2191439867019653],[1,94.93778946908918,-168.77605078854054,-68.43591865014999]],[27,"Big_Ben_Clock_022",7,[[12,-450,[125],[5],126]],[1,3.789585828781128,0.00004030761920148507,-0.9311330914497375],[3,-0.5968906820236671,-0.437797810266366,0.35765024664995526,0.5693337264825635],[1,0.8419284820556641,1.0055094957351685,1.219152569770813],[1,-85.06970223391471,-11.215572038305702,68.41604876918763]],[27,"Big_Ben_Clock_023",7,[[12,-451,[127],[5],128]],[1,3.789400100708008,0.000011627200365182944,0.9311369061470032],[3,0.511446171209135,-0.47444965809231465,0.525514416911212,-0.48698555780440816],[1,0.8241603970527649,1.000150203704834,1.213629961013794],[1,179.6003958963505,-91.92504286383871,-85.67079459151326]],[27,"Big_Ben_Clock_024",7,[[12,-452,[129],[5],130]],[1,3.78947377204895,0.9311525225639343,-0.018576769158244133],[3,-0.06779347431124215,0.061435778337313035,-0.7398845034828858,0.6664837668591658],[1,0.8255492448806763,1.2063188552856445,1.0188227891921997],[1,179.70030252737052,-169.7995227485729,-84.02747835417152]],[27,"Big_Ben_Clock_025",7,[[12,-453,[131],[5],132]],[1,3.789400100708008,0.000011627200365182944,0.9311369061470032],[3,-0.4754168316422491,-0.5122262754905552,0.4859972221675275,0.5247949875272878],[1,0.824160635471344,1.0000640153884888,1.2136948108673096],[1,-0.8427570776647239,-87.82991794278732,85.66549475323575]],[52,"Fish_Shop002",57,[[12,-454,[133],[5],134]],[1,-0.16305935382843018,0.07326952368021011,-1.0683425664901733],[3,-1.1759244922220803e-16,2.965459124232109e-17,0.3826834370613369,0.9238795305660377],[1,-1.9445143618524693e-14,1.1732590536115122e-14,45.000000582489676]],[52,"Object559",57,[[12,-455,[135],[5],136]],[1,-0.0006945312488824129,0.0798654705286026,0.07896320521831512],[3,0.7069847003370651,0,0,0.7072288409626054],[1,89.98021765892676,0,0]],[94,"button_1",12,[[12,-456,[144],[5],145]],[1,100,100,100]],[16,"button2",12,[[12,-457,[146],[5],147]],[1,0,0.136,0],[1,100,100,100]],[94,"button_1",13,[[12,-458,[154],[5],155]],[1,100,100,100]],[16,"button2",13,[[12,-459,[156],[5],157]],[1,0,0.136,0],[1,100,100,100]],[131,"Main Light-002","bc4i5URQ5FDZ6LSzUAVOI7",8,[[217,265000,6.901041666666667,-460,[218]]],[3,-0.9038820210812151,-0.09126413761597746,-0.24219445760172256,0.34060239849178586],[1,-138.705,-30,0]]],0,[0,18,87,0,18,7,0,18,57,0,18,88,0,18,90,0,0,1,0,0,1,0,-1,2,0,-2,10,0,-3,75,0,-4,78,0,-5,79,0,-6,80,0,-7,197,0,-8,83,0,-9,198,0,-10,84,0,-11,199,0,-12,85,0,-13,86,0,-14,200,0,-15,201,0,-16,87,0,-17,7,0,-18,57,0,-19,88,0,-20,90,0,-1,66,0,-2,103,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,-9,5,0,3,2,0,-11,67,0,-12,68,0,-13,69,0,-14,70,0,-15,71,0,-16,72,0,-17,73,0,-18,74,0,-19,9,0,3,2,0,3,2,0,3,2,0,3,2,0,3,2,0,0,3,0,26,95,0,0,3,0,0,3,0,0,3,0,-1,17,0,-2,34,0,-3,58,0,-4,59,0,-5,60,0,-6,61,0,-7,62,0,-8,63,0,-9,37,0,-10,38,0,-11,40,0,-12,11,0,-13,19,0,-14,41,0,-15,64,0,-16,65,0,23,17,0,27,31,0,28,41,0,29,14,0,30,11,0,31,40,0,32,38,0,33,37,0,0,4,0,-1,20,0,-2,48,0,-3,46,0,-4,49,0,-5,51,0,-6,53,0,-7,55,0,-8,16,0,-1,104,0,3,5,0,-3,109,0,-4,114,0,-5,117,0,-6,120,0,-7,123,0,-8,126,0,-9,129,0,0,6,0,0,6,0,0,6,0,34,43,0,0,6,0,0,6,0,0,6,0,-1,187,0,-2,188,0,-1,203,0,-2,204,0,-3,205,0,-4,206,0,-5,207,0,-6,208,0,-7,209,0,-8,210,0,-1,43,0,-2,17,0,-3,58,0,-4,59,0,-5,60,0,-6,61,0,-7,62,0,-8,63,0,-9,37,0,-10,38,0,-11,40,0,-12,11,0,-13,19,0,-14,41,0,-15,64,0,-16,65,0,18,19,0,22,19,0,18,11,0,22,11,0,18,11,0,22,11,0,-1,14,0,-2,15,0,-4,92,0,-5,31,0,-8,217,0,-1,153,0,-2,154,0,-3,156,0,-4,157,0,-5,158,0,-6,159,0,-7,163,0,-8,167,0,-1,171,0,-2,173,0,-3,174,0,-4,175,0,-5,176,0,-6,180,0,-7,184,0,-8,185,0,9,18,0,9,18,0,9,18,0,9,18,0,9,18,0,6,11,0,0,12,0,0,12,0,0,12,0,-1,213,0,-2,214,0,-3,93,0,0,13,0,0,13,0,35,23,0,0,13,0,-1,215,0,-2,216,0,-3,94,0,0,14,0,0,14,0,23,17,0,0,14,0,0,14,0,-1,97,0,-2,42,0,-4,98,0,-5,43,0,0,16,0,-1,28,0,-2,29,0,-3,30,0,-4,186,0,9,33,0,9,33,0,9,33,0,9,33,0,6,17,0,6,19,0,0,20,0,-1,76,0,-2,21,0,-3,47,0,-1,76,0,0,21,0,0,21,0,0,21,0,-1,47,0,0,22,0,0,22,0,0,22,0,0,23,0,-1,45,0,0,24,0,0,24,0,0,24,0,-1,50,0,0,25,0,0,25,0,0,25,0,-1,52,0,0,26,0,0,26,0,0,26,0,-1,54,0,0,27,0,0,27,0,0,27,0,-1,56,0,0,28,0,0,28,0,0,28,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,36,187,0,0,31,0,-1,77,0,0,32,0,0,32,0,0,32,0,-1,95,0,0,34,0,0,34,0,6,37,0,9,39,0,9,39,0,9,39,0,9,39,0,6,38,0,6,40,0,6,41,0,0,42,0,0,42,0,0,42,0,9,44,0,9,44,0,9,44,0,9,44,0,6,43,0,0,45,0,0,46,0,0,47,0,0,48,0,0,49,0,-2,50,0,0,50,0,0,51,0,-2,52,0,0,52,0,0,53,0,-2,54,0,0,54,0,0,55,0,-2,56,0,0,56,0,-1,211,0,-2,212,0,6,58,0,9,96,0,9,96,0,6,59,0,6,60,0,6,61,0,6,62,0,6,63,0,6,64,0,6,65,0,-1,100,0,-2,101,0,-1,130,0,-2,131,0,-1,133,0,-2,136,0,-1,137,0,-2,140,0,-1,141,0,-2,143,0,-1,144,0,-2,145,0,-1,146,0,-2,148,0,-1,149,0,-2,150,0,-1,151,0,-2,152,0,0,75,0,0,75,0,0,76,0,0,77,0,0,77,0,-1,189,0,-2,191,0,0,79,0,0,79,0,-1,81,0,-2,82,0,-1,192,0,-2,195,0,0,82,0,0,82,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,-1,202,0,-1,89,0,0,89,0,0,89,0,-1,91,0,0,91,0,0,91,0,0,93,0,0,93,0,0,94,0,0,94,0,0,97,0,-1,99,0,0,99,0,0,100,0,-1,102,0,3,102,0,3,103,0,-1,105,0,-1,106,0,-1,107,0,-1,108,0,3,108,0,-1,110,0,-1,111,0,-1,112,0,-1,113,0,3,113,0,-1,115,0,-1,116,0,3,116,0,-1,118,0,-1,119,0,3,119,0,-1,121,0,-1,122,0,3,122,0,-1,124,0,-1,125,0,3,125,0,-1,127,0,-1,128,0,3,128,0,0,129,0,0,130,0,-1,132,0,3,132,0,-1,134,0,-1,135,0,3,135,0,0,136,0,-1,138,0,-1,139,0,3,139,0,0,140,0,-1,142,0,3,142,0,0,143,0,3,144,0,0,145,0,-1,147,0,3,147,0,0,148,0,0,149,0,3,150,0,3,151,0,0,152,0,0,153,0,-1,155,0,3,155,0,0,156,0,0,157,0,0,158,0,-1,160,0,-1,161,0,-1,162,0,3,162,0,-1,164,0,-1,165,0,-1,166,0,3,166,0,-1,168,0,-1,169,0,-1,170,0,3,170,0,-1,172,0,3,172,0,3,173,0,0,174,0,0,175,0,-1,177,0,-1,178,0,-1,179,0,3,179,0,-1,181,0,-1,182,0,-1,183,0,3,183,0,0,184,0,0,185,0,0,186,0,0,188,0,-1,190,0,3,190,0,0,191,0,-1,193,0,-1,194,0,3,194,0,-1,196,0,3,196,0,0,197,0,0,198,0,0,199,0,0,200,0,0,201,0,0,202,0,0,203,0,0,204,0,0,205,0,0,206,0,0,207,0,0,208,0,0,209,0,0,210,0,0,211,0,0,212,0,0,213,0,0,214,0,0,215,0,0,216,0,0,217,0,37,8,1,3,15,3,3,8,4,3,8,6,3,8,12,3,92,13,3,92,22,3,48,23,3,48,24,3,49,25,3,51,26,3,53,27,3,55,32,3,46,45,3,46,460],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-1,4,-1,4,4,-1,4,14,-1,4,8,-1,-2,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,8,-1,4,-1,4,-1,12,-1,-2,-1,4,8,-1,4,-1,4,8,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,-2,-3,-4,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,12,38,-1,4,-1,4,-1,4,-1,12,-1,12,-1,4,-1,4,-1,4,-1,12,-1,12,39,40],[135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,24,151,47,47,3,152,153,10,154,155,7,16,156,157,10,158,159,3,160,161,3,162,163,10,164,165,10,166,167,10,168,169,8,170,171,10,172,173,7,174,175,7,176,177,7,178,179,16,180,181,3,182,183,3,184,185,3,186,187,3,188,189,16,48,190,191,49,49,192,193,10,194,195,196,48,3,197,198,199,200,3,201,202,203,50,51,3,204,7,205,50,51,3,206,3,7,16,10,207,7,208,8,209,8,210,8,211,8,212,8,213,8,214,8,215,8,216,7,217,7,218,3,219,3,220,52,52,221,53,54,55,56,57,24,17,17,18,18,53,54,55,56,57,24,17,17,18,18,222,223]],[[[6,".bin",3407101079,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8136,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8136,"count":113,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.329715371131897,-0.08263560384511948,-0.18713758885860443],"maxPosition",8,[1,0.32971543073654175,0.08263560384511948,0.18713760375976562]]],-1],0,0,[],[],[]],[[[6,".bin",1414516282,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":9864,"length":2208,"count":552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9864,"count":137,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.20661140978336334,-0.40709713101387024,-0.4875231683254242],"maxPosition",8,[1,0.20661258697509766,0.4070975184440613,0.4875231683254242]]],-1],0,0,[],[],[]],[[[6,".bin",1183935537,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18336,"length":4368,"count":1092,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18336,"count":382,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.87967848777771,-1.1440129280090332,0.0000405982973461505],"maxPosition",8,[1,0.8796785473823547,1.144012689590454,1.379875659942627]]],-1],0,0,[],[],[]],[[[19,"Skin-15",1728080913,["Cizme/Circle021/Bone449","Cizme/Circle021/Bone449/Bone450","Cizme/Circle021/Bone449/Bone450/Bone451","Cizme/Circle021/Bone449/Bone450/Bone451/Bone452"],[[[7,0.012970022857189178,0.014645620249211788,-0.9998089075088501,0,0.353016197681427,-0.9355721473693848,-0.009125168435275555,0,-0.9355270266532898,-0.352830171585083,-0.017304552718997,0,0.3620513677597046,0.1090620756149292,0.0017707212828099728,1],[7,0.019224170595407486,0.003603209275752306,-0.9998089075088501,0,-0.2952924370765686,-0.9553629159927368,-0.009120877832174301,0,-0.9552132487297058,0.29541122913360596,-0.017302075400948524,0,0.036390889436006546,0.10982003062963486,0.0017704833298921585,1],[7,0.014358950778841972,-0.013292301446199417,-0.9998089075088501,0,-0.9430685639381409,-0.3324737846851349,-0.009123881347477436,0,-0.33228883147239685,0.9430191516876221,-0.0173095241189003,0,-0.1114877387881279,0.3343346118927002,0.0017669685184955597,1],[7,0.014358464628458023,-0.013291281647980213,-0.9998089075088501,0,-0.9430674910545349,-0.33247485756874084,-0.009123743511736393,0,-0.3322899043560028,0.9430180788040161,-0.017308425158262253,0,-0.5174886584281921,0.3343336284160614,0.0017683332553133368,1]],8,8,8,8]]],0,0,[],[],[]],[[[19,"Skin-16",4024874828,["Cizme/Bone442","Cizme/Bone442/Bone443"],[[[7,-0.6787859201431274,0.3816937208175659,0.627342939376831,0,-0.6855287551879883,-0.023118069395422935,-0.727678120136261,0,-0.2632470428943634,-0.9239997863769531,0.27735435962677,0,0.0014404503162950277,0.0007543512620031834,0.0022105795796960592,1],[7,-0.6647645235061646,0.40561309456825256,0.6273484230041504,0,-0.6859232783317566,0.0012987194349989295,-0.7276727557182312,0,-0.2959684133529663,-0.9140435457229614,0.27735626697540283,0,-0.2880014479160309,0.01100815087556839,0.002212511608377099,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",2637859791,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":272016,"length":53616,"count":13404,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":272016,"count":3778,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-1.2168424129486084,-1.2161531448364258,0.0010266568278893828],"maxPosition",8,[1,1.2168426513671875,1.2161527872085571,2.8016748428344727]]],-1],0,0,[],[],[]],[[[19,"Skin-14",3872861470,["Cizme/Circle020/Bone445","Cizme/Circle020/Bone445/Bone446","Cizme/Circle020/Bone445/Bone446/Bone447","Cizme/Circle020/Bone445/Bone446/Bone447/Bone448"],[[[7,-0.030960483476519585,-0.1484905630350113,-0.9884293675422668,0,0.4717915952205658,-0.8739771842956543,0.11651873588562012,0,-0.8811665177345276,-0.4627249836921692,0.09711537510156631,0,0.38574835658073425,0.0878562182188034,0.01258643064647913,1],[7,-0.11895547807216644,-0.09412667155265808,-0.9884282946586609,0,-0.19812718033790588,-0.9732261896133423,0.11652315407991409,0,-0.9729321599006653,0.20969544351100922,0.09712142497301102,0,0.04012997820973396,0.08091160655021667,0.012607226148247719,1],[7,-0.14756134152412415,0.035103172063827515,-0.9884304404258728,0,-0.8868539929389954,-0.4471178650856018,0.11651819944381714,0,-0.4378546178340912,0.8937861919403076,0.09710869938135147,0,-0.13807187974452972,0.3057074546813965,0.012601158581674099,1],[7,-0.147565558552742,0.035106904804706573,-0.9884293675422668,0,-0.886851966381073,-0.44711893796920776,0.11652033776044846,0,-0.4378544092178345,0.8937851190567017,0.09711411595344543,0,-0.5332373976707458,0.30571305751800537,0.01260415930300951,1]],8,8,8,8]]],0,0,[],[],[]],[[[19,"Skin-4",1997024306,["Animirani_objekti/Group069/Bone434/Bone435/Bone436","Animirani_objekti/Group069/Bone434/Bone435","Animirani_objekti/Group069/Bone434/Bone435/Bone436/Bone437","Animirani_objekti/Group069/Bone434"],[[[7,7.630430332028482e-7,-1,1.6292085547320312e-7,0,-1.8185387773428374e-7,-1.6292099758175027e-7,-1,0,1,7.630429763594293e-7,-1.8185400563197618e-7,0,-1.0673933029174805,-0.0015142953488975763,0.03630490228533745,1],[7,6.503699800930463e-10,-1,1.6292099758175027e-7,0,2.5002111492256063e-10,-1.6292099758175027e-7,-1,0,1,6.503699800930463e-10,2.5002100390025817e-10,0,-0.08115902543067932,-0.001513483701273799,0.03630470857024193,1],[7,3.7493993930529855e-33,-1,0.000005001820227334974,0,0,-0.000005001820227334974,-1,0,1,3.7494464128270184e-33,-1.875382117399182e-38,0,-2.172621965408325,-0.001512532471679151,0.03630470857024193,1],[7,-0.000019624400010798126,-1,4.379989348990421e-8,0,-0.000004509320660872618,-4.3711398944878965e-8,-1,0,1,-0.000019624400010798126,-0.000004509320206125267,0,-0.0019389265216886997,-0.0015134451678022742,0.03630472347140312,1]],8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2463647552,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":272520,"length":53616,"count":13404,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":272520,"count":3785,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-1.2437636852264404,-1.2437634468078613,-0.0036850511096417904],"maxPosition",8,[1,1.2437626123428345,1.243762731552124,3.0688388347625732]]],-1],0,0,[],[],[]],[[[6,".bin",504498606,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004402832128107548,0.01667029969394207,-0.000607327267061919],"maxPosition",8,[1,0.004402832128107548,0.21975944936275482,0.130776509642601]]],-1],0,0,[],[],[]],[[[19,"Skin-12",3072889142,["Animirani_objekti/Group115/Point011/Bone475","Animirani_objekti/Group115/Point011/Bone475/Bone476","Animirani_objekti/Group115/Point011/Bone475/Bone476/Bone477","Animirani_objekti/Group115/Point011/Bone475/Bone476/Bone477/Bone478"],[[[7,0.9902269840240479,-0.1394670009613037,-0.00001181900006486103,0,-0.000011992343388556037,-4.024986708373035e-7,-1,0,0.1394670009613037,0.9902269840240479,-0.0000020710999706352595,0,0.12674501538276672,0.0312509685754776,-0.00007037002069409937,1],[7,0.9996910095214844,0.024879800155758858,0.000002288310042786179,0,0.000002300132791788201,-4.465306915335532e-7,-1,0,-0.024879800155758858,0.9996910095214844,-5.036189918428136e-7,0,-0.0007691628416068852,0.031552787870168686,-0.00007032518624328077,1],[7,0.9911760091781616,-0.13255499303340912,-1.549710049175701e-7,0,-2.10168593639537e-7,-4.024213637876528e-7,-1,0,0.13255499303340912,0.9911760091781616,-4.267290023562964e-7,0,-0.18203815817832947,0.060919225215911865,-0.00006986394873820245,1],[7,0.9911749958992004,-0.1325560063123703,-2.0854000126746541e-7,0,-2.6471289515939134e-7,-4.061454887960281e-7,-1,0,0.1325560063123703,0.9911749958992004,-4.376510105430498e-7,0,-0.3236299455165863,0.060921333730220795,-0.00006945264613023028,1]],8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3537067310,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":563904,"length":74664,"count":18666,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":563904,"count":7832,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.9492939710617065,-0.9561780691146851,-0.0029903999529778957],"maxPosition",8,[1,0.9492939710617065,0.9561780691146851,3.991368055343628]]],-1],0,0,[],[],[]],[[[6,".bin",199197100,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4080,"length":1584,"count":396,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6298502683639526,-0.623744547367096,-0.19135236740112305],"maxPosition",8,[1,0.6259438395500183,0.6318567395210266,0.39019036293029785]]],-1],0,0,[],[],[]],[[[19,"Skin-8",4163078278,["Animirani_objekti/Group104/Bone483/Bone484","Animirani_objekti/Group104/Bone483"],[[[7,3.7494052705247397e-33,-1,5.885349878553825e-7,0,-1.232595164407831e-32,-5.885349878553825e-7,-1,0,1,3.7493935155812314e-33,-2.206652717741576e-39,0,2.463423490524292,0.000005993312697682995,0.030092718079686165,1],[7,-1.1207705341576002e-7,-1,4.525644783370808e-7,0,0.000004540389909379883,-4.5256498992785055e-7,-1,0,1,-1.1207499994725367e-7,0.000004540389909379883,0,2.6181399822235107,0.000005705383046006318,0.030104611068964005,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",4014823420,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1872,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1872,"count":39,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28844010829925537,0.0017556097591295838,-0.37427303194999695],"maxPosition",8,[1,0.28844010829925537,0.3429609537124634,0.37427300214767456]]],-1],0,0,[],[],[]],[[[19,"Skin-0",1748370278,["Animirani_objekti/BlueBuilding/Bone431","Animirani_objekti/BlueBuilding/Bone431/Bone432","Animirani_objekti/BlueBuilding/Bone431/Bone432/Bone433"],[[[7,-0.00000707698609403451,-0.9999999403953552,7.071010372783348e-7,0,0.0000016924061583267758,-7.071129743962956e-7,-0.9999999403953552,0,1,-0.000007076980182318948,0.0000016924100236792583,0,-0.03510214388370514,-0.0018979660235345364,0.003140196669846773,1],[7,0.0000027623952973954147,-0.9060437679290771,-7.071068353070586e-7,0,1.7274911101594626e-7,7.071071763675718e-7,-0.9060437679290771,0,1.103700041770935,0.0000022676899789075833,1.4181399876633805e-7,0,-0.20950311422348022,-0.0017162722069770098,0.002838131971657276,1],[7,2.431118275580957e-7,-0.9060437679290771,-7.071070058373152e-7,0,-1.896838263716616e-13,7.071070058373152e-7,-0.9060437679290771,0,1.103700041770935,1.9957400354542187e-7,4.0070240219901914e-17,0,-2.9868969917297363,-0.0017099600518122315,0.0028437618166208267,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",2290464305,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":119040,"length":28560,"count":7140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":119040,"count":2480,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,8.19336223602295,0.005494298413395882,-0.05811630189418793],"maxPosition",8,[1,10.044912338256836,1.8955636024475098,1.7616276741027832]]],-1],0,0,[],[],[]],[[[6,".bin",4239142958,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":48432,"length":16392,"count":4098,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":48432,"count":1009,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-7.81485652923584,0.10593551397323608,0.18590843677520752],"maxPosition",8,[1,-6.396026611328125,2.0950119495391846,1.9812513589859009]]],-1],0,0,[],[],[]],[[[6,".bin",1148052187,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.026441795751452446,-0.004400506615638733,-0.25399458408355713],"maxPosition",8,[1,0.02670224756002426,0.004400506615638733,-0.020680520683526993]]],-1],0,0,[],[],[]],[[[6,".bin",762053379,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":308376,"length":35088,"count":8772,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":308376,"count":4283,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-1.2537546157836914,-1.2254927158355713,-2.6233794689178467],"maxPosition",8,[1,1.2558382749557495,1.2349486351013184,2.6233792304992676]]],-1],0,0,[],[],[]],[[[6,".bin",2296514225,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1968,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1968,"count":41,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2587898075580597,-0.09396257251501083,-0.0075526731088757515],"maxPosition",8,[1,0.26079079508781433,0.10495147854089737,0.1848984658718109]]],-1],0,0,[],[],[]],[[[6,".bin",4056926671,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":321984,"length":44016,"count":11004,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":321984,"count":6708,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-12.334485054016113,-0.03806082159280777,-11.432409286499023],"maxPosition",8,[1,14.925572395324707,0.04562545195221901,12.582701683044434]]],-1],0,0,[],[],[]],[[[6,".bin",1875525735,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":2160,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2160,"count":30,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2]]},"minPosition",8,[1,-0.39128226041793823,0.05020900070667267,0.15537123382091522],"maxPosition",8,[1,0.4109962582588196,0.36460286378860474,1.0386499166488647]]],-1],0,0,[],[],[]],[[[6,".bin",2736892322,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004402832128107548,-0.026474351063370705,-0.25395485758781433],"maxPosition",8,[1,0.004402832128107548,0.026665039360523224,-0.020638080313801765]]],-1],0,0,[],[],[]],[[[6,".bin",2511891024,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":564048,"length":74664,"count":18666,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":564048,"count":7834,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.9492939710617065,-0.956177294254303,-0.000743637967389077],"maxPosition",8,[1,0.9492939710617065,0.9561788439750671,3.993614435195923]]],-1],0,0,[],[],[]],[[[19,"Skin-19",2844378765,["Teretana/Bone375/Bone274_mirrored_001/Bone275_mirrored_001","Teretana/Bone375/Bone274_mirrored_001","Teretana/Bone375/Bone274_mirrored_001/Bone275_mirrored_001/Bone276_mirrored_001","Teretana/Bone375/Bone274_mirrored_001/Bone275_mirrored_001/Bone276_mirrored_001/Bone277_mirrored_001","Teretana/Bone375","Teretana/Bone375/Bone376/Bone377","Teretana/Bone375/Bone376","Teretana/Bone375/Bone376/Bone377/Bone378"],[[[7,-0.974137008190155,0.22595800459384918,-0.0000011235199508519145,0,0.0000011232259566895664,-1.298645884162397e-7,-1,0,-0.22595800459384918,-0.974137008190155,-1.2729600484817638e-7,0,-0.4220876395702362,0.21756377816200256,0.0007875546580180526,1],[7,-0.9945859909057617,0.10391300171613693,-3.53838998989886e-7,0,3.5072400805802317e-7,-4.8247386530420044e-8,-1,0,-0.10391300171613693,-0.9945859909057617,1.1541399835834909e-8,0,0.01881248503923416,0.16376625001430511,0.0007878861506469548,1],[7,-0.9669250249862671,0.2550620138645172,1.5215699988857523e-7,0,-2.1735139910106227e-7,-2.27416890652421e-7,-1,0,-0.2550620138645172,-0.9669250249862671,2.7533300794857496e-7,0,-0.8429307341575623,0.24293451011180878,0.0007882724166847765,1],[7,-0.9669150114059448,0.25509700179100037,-4.664090056394343e-7,0,3.993028485638206e-7,-3.1484751161769964e-7,-1,0,-0.25509700179100037,-0.9669150114059448,2.0257000699075434e-7,0,-1.2305721044540405,0.2429821640253067,0.0007896916940808296,1],[7,0.9945859909057617,0.10391200333833694,-1.4334499809365298e-8,0,1.4901125666710868e-8,-2.80573345889934e-7,-1,0,-0.10391200333833694,0.9945859909057617,-2.806029897328699e-7,0,0.015445136465132236,-0.16411839425563812,0.0007878847536630929,1],[7,0.9669250249862671,0.25506100058555603,3.073909837780775e-8,0,1.043257071842163e-7,-2.7497748078531004e-7,-1,0,-0.25506100058555603,0.9669250249862671,-2.924919897395739e-7,0,-0.8461979627609253,-0.24379804730415344,0.000787840283010155,1],[7,0.974137008190155,0.22595800459384918,2.8122800088681288e-8,0,9.302518577669616e-8,-2.7658450107992394e-7,-1,0,-0.22595800459384918,0.974137008190155,-2.9045099836366717e-7,0,-0.42539262771606445,-0.2183302789926529,0.0007878657779656351,1],[7,0.9669259190559387,0.25505900382995605,-1.433440388609597e-8,0,5.7710085599183e-8,-2.749781913280458e-7,-1,0,-0.25505924224853516,0.9669250249862671,-2.8060301815457933e-7,0,-1.233852505683899,-0.2437976747751236,0.000789694779086858,1]],8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[19,"Skin-13",2502622622,["Animirani_objekti/Group115/Bone468","Animirani_objekti/Group115/Bone468/Bone469/Bone470","Animirani_objekti/Group115/Bone468/Bone469"],[[[7,-0.000030697527108713984,-0.9999989867210388,0.000017567599570611492,0,-2.971642913962569e-7,-0.000017567574104759842,-1,0,1,-0.000030697501642862335,-2.9662498945981497e-7,0,-0.15743239223957062,0.017644252628087997,0.18243257701396942,1],[7,5.840426098302487e-8,-1,0.00001757119935064111,0,-9.165633585439537e-9,-0.00001757119935064111,-1,0,1,5.8404101110909323e-8,-9.16666031969271e-9,0,-0.9420855045318604,0.017627129331231117,0.18243275582790375,1],[7,-0.00003138923057122156,-0.9999989867210388,0.00001757119935064111,0,-1.708404617772885e-8,-0.000017571181160747074,-1,0,1,-0.000031389201467391104,-1.653249981359295e-8,0,-0.5484911203384399,0.017657266929745674,0.1824324131011963,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",603629377,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":276768,"length":24552,"count":6138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":276768,"count":3844,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3]]},"minPosition",8,[1,-0.9309385418891907,-0.9658759236335754,0.0019434465793892741],"maxPosition",8,[1,0.9309385418891907,0.9658759236335754,2.901231288909912]]],-1],0,0,[],[],[]],[[[6,".bin",2582225585,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46368,"length":8544,"count":2136,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46368,"count":966,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.2862757444381714,-0.6862751245498657,0.0003579238837119192],"maxPosition",8,[1,1.2862670421600342,0.6862749457359314,1.829614281654358]]],-1],0,0,[],[],[]],[[[6,".bin",2261367344,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":23544,"length":5184,"count":1296,"stride":4}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":32328,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23544,"count":327,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":28728,"length":3600,"count":50,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,5,6,7,8,9,10,11,12,13,14,15,16],[0,1,2,3,4,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]]},"minPosition",8,[1,-0.4670625627040863,-0.9781478643417358,0.7952922582626343],"maxPosition",8,[1,1.3314850330352783,1.1944876909255981,1.74550461769104]]],-1],0,0,[],[],[]],[[[6,".bin",4030526122,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":6336,"length":1308,"count":327,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6336,"count":88,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.246405690908432,-0.05570255592465401,-0.1420876532793045],"maxPosition",8,[1,0.2464056760072708,0.055702511221170425,0.1420876383781433]]],-1],0,0,[],[],[]],[[[6,".bin",4259248539,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004402832128107548,-0.21995709836483002,-0.0007332885870710015],"maxPosition",8,[1,0.004402832128107548,-0.01687183789908886,0.13064822554588318]]],-1],0,0,[],[],[]],[[[19,"Skin-5",3695302741,["Animirani_objekti/Group096/Bone428/Bone429","Animirani_objekti/Group096/Bone428/Bone429/Bone430","Animirani_objekti/Group096/Bone428"],[[[7,-0.000007815719982318114,-1,-2.0866433203536872e-7,0,3.9781911098657474e-9,2.0866430361365929e-7,-1,0,1,-0.000007815719982318114,3.976559970197968e-9,0,-0.11322619020938873,-0.006836485117673874,-0.0038903953973203897,1],[7,-2.594590098325966e-10,-1,-0.0000021160080905247014,0,6.011029131892042e-16,0.0000021160080905247014,-1,0,1,-2.594590098325966e-10,5.208561102621853e-17,0,-3.408956289291382,-0.0068655903451144695,-0.0038898286875337362,1],[7,0.0014659500448033214,-0.9999989867210388,-2.0863541294602328e-7,0,1.3247037244923376e-8,2.086550665580944e-7,-1,0,0.9999989867210388,0.0014659500448033214,1.3552900135493928e-8,0,-0.0020491722971200943,-0.00700489804148674,-0.0038903953973203897,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",1954064749,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22992,"length":6000,"count":1500,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22992,"count":479,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8684066534042358,-0.8665246367454529,-0.0018581229960545897],"maxPosition",8,[1,0.8684055209159851,0.8665246367454529,1.4690204858779907]]],-1],0,0,[],[],[]],[[[6,".bin",3357395444,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1429776,"length":334824,"count":83706,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2021112,"length":62520,"count":15630,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":2092080,"length":2880,"count":720,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":2633280,"length":196080,"count":49020,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1429776,"count":29787,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":1764600,"length":256512,"count":5344,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2083632,"length":8448,"count":176,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2094960,"length":538320,"count":11215,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-13.137657165527344,-0.09973856061697006,-11.694645881652832],"maxPosition",8,[1,15.317126274108887,2.5309576988220215,10.266925811767578]]],-1],0,0,[],[],[]],[[[19,"Skin-2",2501785061,["Animirani_objekti/Group062/Bone412","Animirani_objekti/Group062/Bone412/Bone413","Animirani_objekti/Group062/Bone412/Bone413/Bone414"],[[[7,1.168469054846355e-7,-1,4.5256498992785055e-7,0,0.000011257699952693656,-4.5256368252921675e-7,-1,0,1,1.168520000760509e-7,0.000011257699952693656,0,-0.03510216623544693,-0.0018978166626766324,0.0031099305488169193,1],[7,0.000002481404180798563,-0.9060429930686951,-5.069840085525357e-7,0,-1.0109709336347805e-7,5.069838380222791e-7,-0.9060429930686951,0,1.103700041770935,0.0000020370200672914507,-8.299090126229203e-8,0,-0.20950311422348022,-0.0017162817530333996,0.002820999827235937,1],[7,6.758213173579516e-17,-0.9060440063476562,-6.545960218318214e-7,0,6.758213173579516e-17,6.545967039528477e-7,-0.9060429930686951,0,1.103700041770935,5.5479152576441826e-17,5.547917242877653e-17,0,-2.9868967533111572,-0.001717710867524147,0.0028232058975845575,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",3809611278,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":27648,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27648,"count":384,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,4,5,6]]},"minPosition",8,[1,-1.3605841398239136,-0.42725512385368347,-0.43673524260520935],"maxPosition",8,[1,1.3605841398239136,0.4272550642490387,0.436735063791275]]],-1],0,0,[],[],[]],[[[6,".bin",2528604833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.026671240106225014,-0.004400506615638733,-0.2541825473308563],"maxPosition",8,[1,0.026472801342606544,0.004400506615638733,-0.020868491381406784]]],-1],0,0,[],[],[]],[[[6,".bin",1545478507,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":11376,"length":2544,"count":636,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11376,"count":158,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.12576155364513397,-0.5279500484466553,-0.03523389622569084],"maxPosition",8,[1,0.3023373484611511,0.14477503299713135,0.6245459914207458]]],-1],0,0,[],[],[]],[[[19,"Skin-6",2739405924,["Animirani_objekti/Group097/Bone425/Bone426","Animirani_objekti/Group097/Bone425"],[[[7,-2.1469198641099752e-10,-1,-2.6182600532109745e-9,0,6.179446148632493e-17,2.6182600532109745e-9,-1,0,1,-2.1469198641099752e-10,6.123234262925839e-17,0,-0.21720844507217407,0.0014509246684610844,-0.00013214003411121666,1],[7,-0.006008659955114126,-0.9999819993972778,-0.000003863990059471689,0,-0.00000437177368439734,0.000003890329026035033,-1,0,0.9999819993972778,-0.006008659955114126,-0.0000043950699364359025,0,-0.0004484901437535882,0.0014475065981969237,-0.0001344050106126815,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",2582518873,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21976952254772186,-0.004400506615638733,-0.0008352203876711428],"maxPosition",8,[1,-0.0166749507188797,0.004400506615638733,0.13054628670215607]]],-1],0,0,[],[],[]],[[[6,".bin",1769873514,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":1490328,"length":115044,"count":28761,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1490328,"count":20699,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,2]]},"minPosition",8,[1,-0.9342190027236938,-0.9239490032196045,-0.015246852301061153],"maxPosition",8,[1,0.9342190027236938,0.9239482283592224,4.444424152374268]]],-1],0,0,[],[],[]],[[[19,"Skin-9",1978623947,["Animirani_objekti/Group105/Bone486/Bone487","Animirani_objekti/Group105/Bone486"],[[[7,-8.471889856309645e-8,-1.0000005960464478,1.2212453270876722e-15,0,-3.4897698952818246e-8,1.887379141862766e-15,-1.0000005960464478,0,1,-8.471889856309645e-8,-3.4897698952818246e-8,0,-0.21720854938030243,0.0014425667468458414,-0.00012516941933427006,1],[7,-0.0060109421610832214,-0.9999822378158569,-0.000004242590421199566,0,-4.176605283845447e-9,0.000004242690920364112,-1.0000005960464478,0,0.9999819993972778,-0.006010939832776785,-2.96790911846756e-8,0,-0.00044834951404482126,0.0014391738222911954,-0.00012152478302596137,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",603629377,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":276768,"length":24552,"count":6138,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":276768,"count":3844,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3]]},"minPosition",8,[1,-0.9309385418891907,-0.9658759236335754,0.0019434465793892741],"maxPosition",8,[1,0.9309385418891907,0.9658759236335754,2.901231288909912]]],-1],0,0,[],[],[]],[[[6,".bin",60612883,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":9864,"length":2208,"count":552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9864,"count":137,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.24727283418178558,-0.3876696825027466,-0.5098848342895508],"maxPosition",8,[1,0.2472711056470871,0.38766974210739136,0.5098848342895508]]],-1],0,0,[],[],[]],[[[6,".bin",1968831104,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":14112,"length":2496,"count":624,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14112,"count":196,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.47547775506973267,-0.5117020010948181,-0.2016581892967224],"maxPosition",8,[1,0.04048236459493637,0.13719353079795837,0.29758140444755554]]],-1],0,0,[],[],[]],[[[6,".bin",1453399395,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":563904,"length":74664,"count":18666,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":563904,"count":7832,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.9492939710617065,-0.9561780691146851,-0.0029903999529778957],"maxPosition",8,[1,0.9492939710617065,0.9561780691146851,3.991368055343628]]],-1],0,0,[],[],[]],[[[19,"Skin-18",2268638371,["Zelena_zgrada/Bone415","Zelena_zgrada/Bone415/Bone416","Zelena_zgrada/Bone415/Bone416/Bone417"],[[[7,-0.000006570680852746591,-1,4.5253517555465805e-7,0,0.0000016461769973830087,-4.5254600422595104e-7,-1,0,1,-0.000006570679943251889,0.0000016461799532407895,0,-0.015200603753328323,-0.00245561171323061,-0.016122838482260704,1],[7,0.0000024800399387459038,-0.9060429930686951,-5.06984690673562e-7,0,1.736476917812979e-7,5.069849748906563e-7,-0.9060429930686951,0,1.103700041770935,0.0000020359000245662173,1.4255100211357785e-7,0,-0.1875377893447876,-0.0022289969492703676,-0.014606035314500332,1],[7,4.13820149642715e-33,-0.9060440063476562,-6.545960218318214e-7,0,1.351642634715903e-16,6.545960218318214e-7,-0.9060440063476562,0,1.103700041770935,-8.016489084744962e-23,1.1095839117966736e-16,0,-2.9649317264556885,-0.0022153796162456274,-0.014609725214540958,1]],8,8,8]]],0,0,[],[],[]],[[[19,"Skin-3",1148937647,["Animirani_objekti/Group064/Bone418/Bone419/Bone420","Animirani_objekti/Group064/Bone418/Bone419","Animirani_objekti/Group064/Bone418/Bone419/Bone420/Bone421","Animirani_objekti/Group064/Bone418"],[[[7,0.0000016259200492640957,-1,1.629200028219202e-7,0,-1.8185473038556665e-7,-1.6292030124986923e-7,-1,0,1,0.0000016259200492640957,-1.8185500039180624e-7,0,-1.06739342212677,-0.0015152216656133533,0.03630495443940163,1],[7,6.503742544516911e-10,-1,1.6292099758175027e-7,0,1.535920013395753e-8,-1.6292099758175027e-7,-1,0,1,6.503767524534965e-10,1.535920013395753e-8,0,-0.08115880936384201,-0.0015134868444874883,0.036304738372564316,1],[7,6.123234262925839e-17,-1,0.000005001820227334974,0,6.123234262925839e-17,-0.000005001820227334974,-1,0,1,6.123264703172381e-17,6.123203160934807e-17,0,-2.172621965408325,-0.0015115737915039062,0.03630471229553223,1],[7,-0.000019624400010798126,-1,4.3799900595331565e-8,0,-0.000004509320660872618,-4.371140605030632e-8,-1,0,1,-0.000019624400010798126,-0.000004509320206125267,0,-0.0019386839121580124,-0.0015134477289393544,0.03630475327372551,1]],8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",858381451,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12480,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12480,"count":260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.812549352645874,-0.00011171798541909084,-0.4208372235298157],"maxPosition",8,[1,0.8133522868156433,1.2815535068511963,0.5937392115592957]]],-1],0,0,[],[],[]],[[[6,".bin",3729142594,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004402832128107548,-0.026866577565670013,-0.2540806233882904],"maxPosition",8,[1,0.004402832128107548,0.026278240606188774,-0.02076656185090542]]],-1],0,0,[],[],[]],[[[19,"Skin-10",1718480966,["Animirani_objekti/Group115/Point012/Bone479","Animirani_objekti/Group115/Point012/Bone479/Bone480","Animirani_objekti/Group115/Point012/Bone479/Bone480/Bone481","Animirani_objekti/Group115/Point012/Bone479/Bone480/Bone481/Bone482"],[[[7,0.9897369742393494,-0.14290200173854828,-1.87316999245013e-7,0,-2.62937192019308e-7,-5.102910449750198e-7,-1,0,0.14290200173854828,0.9897369742393494,-5.426280154097185e-7,0,0.18220621347427368,-0.019840626046061516,0.00002207243232987821,1],[7,0.998869001865387,-0.04755900055170059,-0.000005518480065802578,0,-0.000005550004061660729,-5.307205128701753e-7,-1,0,0.04755900055170059,0.998869001865387,-7.940719797261409e-7,0,0.05642694979906082,-0.014505675993859768,0.000021768948499811813,1],[7,0.9991649985313416,0.04087530076503754,0.0000019695301034516888,0,0.000001993630576180294,-5.488159331434872e-7,-1,0,-0.04087530076503754,0.9991649985313416,-6.298470225374331e-7,0,-0.12138154357671738,-0.02532998099923134,0.00002083399704133626,1],[7,0.9991639852523804,0.040874700993299484,-1.947539942648291e-7,0,-1.9382767391107336e-7,-2.6624094928706654e-8,-1,0,-0.040874700993299484,0.9991639852523804,-1.867920040865556e-8,0,-0.24211572110652924,-0.025334557518363,0.000021688727429136634,1]],8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2637859791,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":272016,"length":53616,"count":13404,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":272016,"count":3778,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-1.2168424129486084,-1.2161531448364258,0.0010266568278893828],"maxPosition",8,[1,1.2168426513671875,1.2161527872085571,2.8016748428344727]]],-1],0,0,[],[],[]],[[[19,"Skin-7",2582840175,["Animirani_objekti/Group098/Bone422/Bone423","Animirani_objekti/Group098/Bone422","Animirani_objekti/Group098/Bone422/Bone423/Bone424"],[[[7,-0.0004728150088340044,-1,-2.6182600532109745e-9,0,-3.3277675015597197e-7,2.7756024145730862e-9,-1,0,1,-0.0004728150088340044,-3.327780007111869e-7,0,-0.2130618393421173,0.0002250198449473828,-0.0001347334764432162,1],[7,-0.006008000113070011,-0.9999819993972778,-0.000003890269908879418,0,3.0781075466279617e-9,0.000003890321750077419,-1,0,0.9999819993972778,-0.006008000113070011,-2.029499945876978e-8,0,0.0036900455597788095,0.00009574647265253589,-0.00013481029600370675,1],[7,-1.7917706207626338e-10,-1,-0.000001909970023916685,0,4.034550276670241e-16,0.000001909970023916685,-1,0,1,-1.7917706207626338e-10,6.123223013269509e-17,0,-3.0718698501586914,-0.0012217682087793946,-0.00013316610420588404,1]],8,8,8]]],0,0,[],[],[]],[[[19,"Skin-17",1848756047,["Cizme/Bone438/Bone439/Bone440","Cizme/Bone438","Cizme/Bone438/Bone439"],[[[7,0.25891247391700745,-0.006703232880681753,0.9658772349357605,0,-0.01718784309923649,-0.999849796295166,-0.0023316366132348776,0,0.9657478928565979,-0.015997665002942085,-0.2589886486530304,0,-0.2807174026966095,-0.008722717873752117,-0.007236529141664505,1],[7,-0.000057426201237831265,0.25899940729141235,0.9658771753311157,0,0.9999575614929199,0.008918329142034054,-0.0023319909814745188,0,-0.009217998012900352,0.9658362865447998,-0.2589888274669647,0,0.5245786905288696,-0.0005831574671901762,-0.007234189193695784,1],[7,0.22016888856887817,0.13640213012695312,0.9658783078193665,0,0.5340189933776855,-0.8454691767692566,-0.0023302410263568163,0,0.8163015842437744,0.5163105130195618,-0.25898757576942444,0,0.09912209212779999,-0.1612512320280075,-0.007231551222503185,1]],8,8,8]]],0,0,[],[],[]],[[[6,".bin",2673145494,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11568,"length":5280,"count":1320,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11568,"count":241,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-34.21344757080078,-2.4421143531799316,-34.21344757080078],"maxPosition",8,[1,34.21345138549805,0.0333402119576931,34.21344757080078]]],-1],0,0,[],[],[]],[[[6,".bin",881458677,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13632,"length":4752,"count":1188,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13632,"count":284,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7728363871574402,-0.05309462547302246,-0.809776246547699],"maxPosition",8,[1,0.711395263671875,0.8854876160621643,0.6788660287857056]]],-1],0,0,[],[],[]],[[[19,"Skin-11",1518809421,["Animirani_objekti/Group115/Point010/Bone471","Animirani_objekti/Group115/Point010/Bone471/Bone472","Animirani_objekti/Group115/Point010/Bone471/Bone472/Bone473","Animirani_objekti/Group115/Point010/Bone471/Bone472/Bone473/Bone474"],[[[7,0.9884740114212036,-0.15139000117778778,0.000013943100384494755,0,0.000014072106750973035,-2.1920321557900024e-7,-1,0,0.15139000117778778,0.9884740114212036,0.0000019137000890623312,0,0.06759250164031982,0.016569646075367928,0.000014238729818316642,1],[7,0.9995409846305847,0.030290400609374046,-0.000004917810201732209,0,-0.000004913298653264064,-2.2333917115702207e-7,-1,0,-0.030290400609374046,0.9995409846305847,-7.44108987760228e-8,0,-0.0031443426851183176,0.016272831708192825,0.000014245971215132158,1],[7,0.9898070096969604,-0.1424199938774109,1.1092600260553809e-7,0,1.5004336262336437e-7,2.639223737332941e-7,-1,0,0.1424199938774109,0.9898070096969604,2.8260100748411787e-7,0,-0.09787890315055847,0.033634647727012634,0.000013738449524680618,1],[7,0.9898059964179993,-0.14242200553417206,-3.1857400051293894e-10,0,3.594674069518078e-8,2.5205989118148864e-7,-1,0,0.14242200553417206,0.9898059964179993,2.546100006384222e-7,0,-0.1739455759525299,0.03363705053925514,0.000014092093806539197,1]],8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1348711192,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5904,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5904,"count":123,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.016712158918380737,-0.004400506615638733,-0.0006472473032772541],"maxPosition",8,[1,0.21979433298110962,0.004400506615638733,0.13073426485061646]]],-1],0,0,[],[],[]],[[[6,".bin",3405016491,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010204548947513103,0.0000015714671235400601,-0.009956910274922848],"maxPosition",8,[1,0.009748633950948715,0.0006218045018613338,0.00995690282434225]]],-1],0,0,[],[],[]],[[[19,"Skin-1",1565258400,["Animirani_objekti/Group049/Bone336","Animirani_objekti/Group049/Bone370","Animirani_objekti/Group049/Bone370/Bone371","Animirani_objekti/Group049/Bone370/Bone371/Bone372","Animirani_objekti/Group049/Bone370/Bone371/Bone372/Bone373","Animirani_objekti/Group049/Bone343/Bone344/Bone345/Bone346/Bone347","Animirani_objekti/Group049/Bone343/Bone344/Bone345/Bone346","Animirani_objekti/Group049/Bone343/Bone344/Bone345/Bone346/Bone347/Bone348","Animirani_objekti/Group049/Bone343/Bone344/Bone345","Animirani_objekti/Group049/Bone343/Bone344","Animirani_objekti/Group049/Bone343","Animirani_objekti/Group049/Bone329/Bone330/Bone331/Bone332","Animirani_objekti/Group049/Bone329/Bone330/Bone331/Bone332/Bone333","Animirani_objekti/Group049/Bone329/Bone330/Bone331/Bone332/Bone333/Bone334","Animirani_objekti/Group049/Bone329/Bone330/Bone331","Animirani_objekti/Group049/Bone329/Bone330","Animirani_objekti/Group049/Bone329","Animirani_objekti/Group049/Bone355","Animirani_objekti/Group049/Bone355/Bone356","Animirani_objekti/Group049/Bone355/Bone356/Bone357","Animirani_objekti/Group049/Bone355/Bone356/Bone357/Bone358","Animirani_objekti/Group049/Bone365","Animirani_objekti/Group049/Bone365/Bone366","Animirani_objekti/Group049/Bone365/Bone366/Bone367","Animirani_objekti/Group049/Bone365/Bone366/Bone367/Bone368","Animirani_objekti/Group049/Bone350","Animirani_objekti/Group049/Bone350/Bone351","Animirani_objekti/Group049/Bone350/Bone351/Bone352","Animirani_objekti/Group049/Bone350/Bone351/Bone352/Bone353","Animirani_objekti/Group049/Bone360","Animirani_objekti/Group049/Bone360/Bone361","Animirani_objekti/Group049/Bone360/Bone361/Bone362","Animirani_objekti/Group049/Bone360/Bone361/Bone362/Bone363"],[[[7,-0.0801624059677124,-0.9967813491821289,0.0000015836619695619447,0,-0.0000025705783173179952,-0.0000013820448430124088,-1.0000001192092896,0,0.9967813491821289,-0.0801624208688736,-0.0000024515195491403574,0,-0.7776622176170349,0.4537216126918793,0.2011900693178177,1],[7,-0.09350857883691788,0.31701433658599854,0.943799614906311,0,0.23248517513275146,-0.9147943258285522,0.3303055167198181,0,0.9680946469306946,0.25030583143234253,0.011839985847473145,0,-0.8540250658988953,0.12392927706241608,-0.21708941459655762,1],[7,-0.2953364849090576,0.17824190855026245,0.9386193156242371,0,0.7684919834136963,-0.5393746495246887,0.34423184394836426,0,0.5676246881484985,0.8229848742485046,0.022319532930850983,0,-0.9049851298332214,-0.623323917388916,-0.2337009310722351,1],[7,-0.3608129620552063,0.06382059305906296,0.9304516315460205,0,0.9010185599327087,-0.23372285068035126,0.36543020606040955,0,0.24079005420207977,0.9702060222625732,0.02682669460773468,0,-0.8536266088485718,-0.9896482229232788,-0.2524334788322449,1],[7,-0.343195378780365,-0.14773355424404144,0.9275721907615662,0,0.8829455375671387,0.2860775589942932,0.3722461462020874,0,-0.320351243019104,0.9467496871948242,0.03226012736558914,0,-0.3868761956691742,-1.4215056896209717,-0.26516661047935486,1],[7,0.8039756417274475,0.28594258427619934,-0.5214020013809204,0,-0.49125388264656067,-0.17472735047340393,-0.8533111810684204,0,-0.33510130643844604,0.9421819448471069,-0.000006125298568804283,0,0.18466296792030334,-1.5067001581192017,0.16928745806217194,1],[7,0.8068259358406067,-0.2777746915817261,-0.5214144587516785,0,-0.4930144250392914,0.1697353571653366,-0.853303074836731,0,0.32552891969680786,0.9455314874649048,-4.030486522310639e-8,0,-0.6413713693618774,-1.2930508852005005,0.16927991807460785,1],[7,0.6963459253311157,0.4932085871696472,-0.5213900208473206,0,-0.4254858195781708,-0.30134570598602295,-0.8533186316490173,0,-0.5779828429222107,0.816048800945282,0.000012400982996041421,0,0.4868655204772949,-1.4287669658660889,0.1692579984664917,1],[7,0.2895113527774811,-0.8026944398880005,-0.5214061141014099,0,-0.17690397799015045,0.49047863483428955,-0.853308379650116,0,0.9406847357749939,0.3392814099788666,-7.094236593729875e-7,0,-1.2164969444274902,-0.3111323416233063,0.16927900910377502,1],[7,-0.5018352270126343,-0.6901428699493408,-0.5214056968688965,0,0.30664071440696716,0.4217051863670349,-0.853308916091919,0,0.808784544467926,-0.5881048440933228,-6.007109050187864e-7,0,-0.5516640543937683,0.8321607708930969,0.1692824363708496,1],[7,-0.08583993464708328,-0.8489805459976196,-0.5214048027992249,0,0.05246366560459137,0.518758237361908,-0.8533098101615906,0,0.9949267506599426,-0.10060279816389084,0.000010460116754984483,0,-0.771099865436554,0.44078677892684937,0.16927367448806763,1],[7,0.726267397403717,-0.24363768100738525,0.6427874565124512,0,0.6094108819961548,-0.20443710684776306,-0.7660437822341919,0,0.3180469870567322,0.9480748772621155,-5.655699624185218e-7,0,-0.4854508936405182,-1.518126368522644,0.22999371588230133,1],[7,0.7237131595611572,0.25115859508514404,0.6427741646766663,0,0.6072431802749634,0.2107475996017456,-0.7660555839538574,0,-0.32786449790000916,0.9447253346443176,0.000006460729764512507,0,0.390999972820282,-1.6162782907485962,0.22998595237731934,1],[7,0.6230607628822327,0.4456651210784912,0.6427881121635437,0,0.5228090286254883,0.3739616572856903,-0.7660431265830994,0,-0.5817767977714539,0.8133481740951538,0.0000030900544061296387,0,0.7050304412841797,-1.4778813123703003,0.22998455166816711,1],[7,0.262056440114975,-0.7198262810707092,0.6427874565124512,0,0.21989253163337708,-0.6040059924125671,-0.7660437822341919,0,0.939666748046875,0.34209105372428894,7.703623055022035e-7,0,-1.2470964193344116,-0.5664168000221252,0.2299903780221939,1],[7,-0.45211073756217957,-0.6184007525444031,0.6427876949310303,0,-0.3793679475784302,-0.5188994407653809,-0.7660435438156128,0,0.8072645664215088,-0.590190052986145,-0.0000014187291981215822,0,-0.6691783666610718,0.7207108736038208,0.22999395430088043,1],[7,-0.04282292351126671,-0.7648457884788513,0.6427887678146362,0,-0.03592599928379059,-0.6417837738990784,-0.7660439610481262,0,0.998436689376831,-0.055897049605846405,0.000005209123173699481,0,-0.7861279249191284,0.24030523002147675,0.22999002039432526,1],[7,0.15064886212348938,-0.5534372925758362,0.8191538453102112,0,0.21516281366348267,-0.7903910875320435,-0.5735746026039124,0,0.9648886322975159,0.26265987753868103,0.0000076068827183917165,0,-0.881048858165741,0.1972160041332245,-0.14119559526443481,1],[7,0.46676141023635864,-0.3333471715450287,0.8191538453102112,0,0.6666116118431091,-0.47607022523880005,-0.573573112487793,0,0.5811737179756165,0.8137801289558411,0.0000018991086108144373,0,-1.010319471359253,-0.5705176591873169,-0.14118988811969757,1],[7,0.55747389793396,-0.13494275510311127,0.8191538453102112,0,0.7961620092391968,-0.19271761178970337,-0.5735731720924377,0,0.23526504635810852,0.9719316959381104,0.000001261370130123396,0,-0.9789760112762451,-1.009033441543579,-0.1411854475736618,1],[7,0.5431885123252869,0.18422196805477142,0.8191508650779724,0,0.7757509350776672,0.2630952000617981,-0.5735775828361511,0,-0.32118040323257446,0.9470180869102478,-6.153879184012112e-8,0,-0.5179320573806763,-1.52223801612854,-0.1411803811788559,1],[7,0.025190724059939384,-0.0940571129322052,-0.9952475428581238,0,-0.25743934512138367,0.9613754749298096,-0.09737203270196915,0,0.9659664630889893,0.2586687207221985,0.000003741263299161801,0,-0.8156241178512573,-0.05563418194651604,0.33832234144210815,1],[7,0.07911169528961182,-0.05675085633993149,-0.9952490329742432,0,-0.8087279200553894,0.5800693035125732,-0.09736176580190659,0,0.5828389525413513,0.812588095664978,-0.00000573705619899556,0,-0.7878063321113586,-0.7181161046028137,0.33832892775535583,1],[7,0.09473887085914612,-0.022504666820168495,-0.9952475428581238,0,-0.9683045148849487,0.2300063818693161,-0.09737516939640045,0,0.23110462725162506,0.9729287028312683,-8.250877385762578e-7,0,-0.7056604623794556,-1.0653258562088013,0.3383036255836487,1],[7,0.09219598770141602,0.03137523680925369,-0.9952460527420044,0,-0.9421553015708923,-0.3207165598869324,-0.0973883792757988,0,-0.322247713804245,0.9466553926467896,-0.000008433104994765017,0,-0.25212007761001587,-1.4169307947158813,0.33832302689552307,1],[7,0.2569092810153961,-0.9664356708526611,1.7578611277713208e-7,0,-8.687846388966136e-7,-4.12842155128601e-7,-1.0000001192092896,0,0.966434895992279,0.2569095492362976,-9.456881002734008e-7,0,-0.9202280044555664,0.3542477786540985,0.042863402515649796,1],[7,0.8117561340332031,-0.5839959979057312,-0.0000014874958651489578,0,-0.000001966721129065263,-1.8664914591681736e-7,-1.0000001192092896,0,0.5839964151382446,0.8117557168006897,-0.0000013000721992284525,0,-1.120442271232605,-0.461462140083313,0.04285726696252823,1],[7,0.9729139804840088,-0.23116882145404816,2.540708976539463e-8,0,-2.2080361361531686e-7,-0.0000010391972864454146,-1.0000001192092896,0,0.23116886615753174,0.9729140400886536,-0.0000010620919965731446,0,-1.091678261756897,-0.9481523036956787,0.0428566113114357,1],[7,0.9497171640396118,0.313106894493103,-2.9895747388763994e-7,0,4.6988790813884407e-7,-0.000002380076239205664,-1.0000001192092896,0,-0.3131067752838135,0.94971764087677,-0.0000024075275177892763,0,-0.6371610164642334,-1.5055243968963623,0.042858872562646866,1],[7,0.17901834845542908,-0.684069812297821,-0.7071070671081543,0,-0.17902396619319916,0.6840692758560181,-0.7071061134338379,0,0.9674205183982849,0.25317418575286865,-0.0000039453288991353475,0,-0.9139478206634521,0.32355189323425293,0.25326305627822876,1],[7,0.5755034685134888,-0.41084548830986023,-0.7071077227592468,0,-0.5755065679550171,0.4108451306819916,-0.7071054577827454,0,0.5810230374336243,0.8138870596885681,-0.0000014911552170815412,0,-1.0901768207550049,-0.487480491399765,0.25326108932495117,1],[7,0.688105583190918,-0.16282802820205688,-0.7071048021316528,0,-0.6881019473075867,0.16282780468463898,-0.7071083784103394,0,0.23027347028255463,0.9731258153915405,4.3491377255122643e-7,0,-1.0549290180206299,-0.9572312235832214,0.2532551884651184,1],[7,0.66884845495224,0.2294282615184784,-0.707109808921814,0,-0.6688553094863892,-0.22942817211151123,-0.7071033716201782,0,-0.32446053624153137,0.945899486541748,0.0000016322982219207915,0,-0.5891857147216797,-1.5034732818603516,0.2532619833946228,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2134849220,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8064,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8064,"count":112,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2]]},"minPosition",8,[1,-0.17997072637081146,-0.045105528086423874,-0.10214655101299286],"maxPosition",8,[1,0.17997074127197266,0.04510555788874626,0.10214655846357346]]],-1],0,0,[],[],[]],[[[23,"joystickMove"],[132,"joystickMove",false,33554432,[-7,-8,-9],[[2,-2,[0,"f5P4HQlQ5MEpLCqyxWtuWH"],[5,244.99999999999994,171.99999999999997]],[31,-3,[0,"d0Hm5y0SNHiIvIWD0Kd5EW"]],[88,-4,[0,"a11qnUDC9I34896b5qANXN"]],[54,true,-5,[0,"afvZilpjlF0JQX38SVQrUv"],[3],4],[97,12,263.111,74.77200000000002,-6,[0,"1dISD45JxJhLKdfMeki5TK"]]],[1,"0eOh/S3hhMw7mXjWvEnsJ2",-1,0],[1,-201.13900000000004,-190.028,0],[1,0.7,0.7,1]],[13,"joystickMove-001",33554432,1,[[2,-10,[0,"90yB32yJtG+rgBrbLbUKyH"],[5,245,172]],[81,-11,[0,"50tl+EqHVHi6Y+ORw1nDTt"],[4,4294955700],1],[88,-12,[0,"d9Tdjj9wlGw6g5/mje6Ixf"]]],[1,"132zblS4JHIpqHHPbRY8Kx",1,0],[1,-3.015999999999977,0.646000000000015,0]],[21,"Background",33554432,1,[[2,-13,[0,"14cAuhd6NHQ7VNPXbMENQW"],[5,2000,2000]],[8,0,-14,[0,"76Dq2DqYxGUb/K25Z6Vadj"],0]],[1,"1dZpZjuphAKr16l6hMIvty",1,0],[1,180.88857142857142,257.93000000000006,0],[1,3,3,1]],[21,"Moving Symbol white",33554432,1,[[2,-15,[0,"aaZzdgsIJJQJmtA769KWuk"],[5,100,129.81]],[8,0,-16,[0,"f6/KRWvbpH8LEyWzjbOxOr"],2]],[1,"6dOcdFuPZN+o1rmbIBMFr9",1,0],[1,296.529,0,0],[1,1.2,1.2,1]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,2,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,11,1,16],[0,0,0,0,0],[1,1,1,-1,12],[15,6,224,58,58]],[[[86,"Play-Bold","Play-Bold.ttf"],-1],0,0,[],[],[]],[[[106,"builtin-unlit",[{"hash":3319190198,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 13) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[23,"Pin"],[133,"Pin",false,[-3],[[54,true,-2,[0,"a5m3+gBaFNqZtztpim/p8T"],[2],3]],[1,"0462goSltaDYp42aEklYQK",-1,0],[1,-2.518,1.803,1.236]],[134,"Pin",1,[[212,-4,[0,"3aNlMrn8VdN78CVtn36caW"],[0],[5],1]],[1,"63f9AZs6dZVLOHktvKZzGx",1,0],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,88,88,88],[1,90,90,0]]],0,[0,6,1,0,0,1,0,-1,2,0,0,2,0,11,1,4],[0,0,0,0],[-1,4,-1,12],[225,226,59,59]],[[{"name":"Rectangle 4 (1)","rect":{"x":1,"y":1,"width":510,"height":138},"offset":{"x":0,"y":-0.5},"originalSize":{"width":512,"height":139},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[227]],[[{"name":"PozadinaTastature","rect":{"x":0,"y":0,"width":1600,"height":234},"offset":{"x":0,"y":0},"originalSize":{"width":1600,"height":234},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[228]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"PraznoDugme","rect":{"x":1,"y":1,"width":510,"height":520},"offset":{"x":0,"y":1},"originalSize":{"width":512,"height":524},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[229]],[[[219,"Razigrani Grad",".mp3",78.027755],-1],0,0,[],[],[]],[[[48,"T_BG_01_Diff",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[230,1]],[[{"name":"SeekPng.com_white-circle-png_197364","rect":{"x":0,"y":0,"width":400,"height":400},"offset":{"x":0,"y":0},"originalSize":{"width":400,"height":400},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[231]],[[[49,[{"rasterizerState":{"cullMode":0},"depthStencilState":{"depthWrite":false},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[19,10],[232,1]],[[{"name":"Group 1728home","rect":{"x":1,"y":1,"width":126,"height":135},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":137},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[233]],[[{"name":"SlideMove white2","rect":{"x":79,"y":61,"width":113,"height":122},"offset":{"x":35.5,"y":-22},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[234]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"1","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[235]],[[[23,"Settings"],[50,"Settings",33554432,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[[2,-2,[0,"33pydLMRRP6ZTETs1EBy1n"],[5,800,510]],[9,1,0,-3,[0,"11tez3oq1BGovdFMb6oI42"],18],[33,0,-4,[0,"cdRtIkTAxHAIDalBTid35n"]],[31,-5,[0,"79qqHvQdZOF5/4n4BRHM1R"]],[61,5,8.012999999999998,81.98700000000002,500,-6,[0,"04uhuANJNBSKvWrp4Wr90c"]],[220,-14,[0,"34sVTtZSxF4bjCOAIOPwCN"],-13,-12,-11,-10,-9,-8,-7]],[1,"85m//k/gVF7qrlOlAZV1vZ",-1,0],[1,0,36.98700000000002,0]],[13,"GenericButton",33554432,1,[[2,-28,[0,"90GwJL0JxK7L7svo4YtgXw"],[5,120,120]],[9,1,0,-29,[0,"46/gzKQUpO2KBunxCV/Y0U"],0],[178,-31,[0,"8cRZWWvwNPELt1+4s9xkGz"],[[29,"861c4VLRgZKYJDhIb2CRjAR","turnOffSetting",1]],[4,4292269782],-30,1,2,3,4],[99,36,28,31.418000000000006,-32,[0,"e3+MWhUoVCJL3dMK6UzKi+"],1]],[1,"ddS6/iS5hGDYSqXai1+c+Q",1,0],[1,312,-163.582,0]],[77,"SpeedSlider",33554432,1,[-37],[[[2,-33,[0,"7bdg52DdpJkpNaPzhLQU7V"],[5,240,20]],[166,1,0,-34,[0,"38elkIFJ5BM4orSJljbZT7"],[4,4294965950],7],-35,[100,-36,[0,"07rPdx1U9P4pj3RFqy70VG"]]],4,4,1,4],[1,"8cnX1DlbRFqrywt6Q9eWot",1,0],[1,28,85.038,0],[1,2,1,1]],[77,"Inverzno",33554432,1,[-41],[[[2,-38,[0,"1debJlqdJB/Ynm4PLzQEN6"],[5,30,30]],[68,0,-39,[0,"a58LZFdjBFX7vP9ZHRV+kV"],[4,16775116],12],-40],4,4,1],[1,"78BphpIP9NDYQGe0nadsPY",1,0],[1,-61.252,-11.98,0],[1,2,2,1]],[77,"ZvukCheck",33554432,1,[-45],[[[2,-42,[0,"231o6BXPFEQr4NDCe5NjDq"],[5,30,30]],[68,0,-43,[0,"27XRa2FQlFM5PhntNB1ST4"],[4,16775116],15],-44],4,4,1],[1,"2bgCJvtjVDM5BSYfswV+K2",1,0],[1,-63.887,-111.477,0],[1,2,2,1]],[40,"SpeedTekst",512,33554432,1,[[2,-46,[0,"44dfpqcyJO67ocIIfx0MiP"],[5,2800,44]],[82,"Izaberi željenu brzinu:",0,112,112,44,3,false,false,true,2,-47,[0,"ce/q37vHdNjqv5XoMsv3+x"],5],[79,18,49.29199999999999,15.643,142.999,-48,[0,"8cTh9MxqhCKaUZ+4l5o791"],1],[100,-49,[0,"52moQ6eoVLVLdyRgZdshj2"]]],[1,"81aHtPzChNjLi8/XxTBvv/",1,0],[1,15.643,142.999,0],[1,0.25,0.25,1]],[143,"Handle",33554432,3,[[[2,-50,[0,"7aH7aBQzFHn4kWAtM1R/AF"],[5,32,32]],-51,[179,-53,[0,"fcNHXXtlpI2I89+jZx9etm"],[4,4292269782],-52,6]],4,1,4],[1,"f33DHGsCpBdoX1qtaaxL8s",1,0],[1,-117,-4,0],[1,1,2,1]],[41,"4 1",false,33554432,1,[[2,-54,[0,"a88HzGxm1DYpNIf0Zd971x"],[5,50,50]],[8,0,-55,[0,"8e2bz2231K/Zn7l8rYDM8w"],10]],[1,"82fy2tX6NKkIRdDY5akJ3C",1,0],[1,-62.516,-12.583,0]],[13,"5 1",33554432,1,[[2,-56,[0,"22bRUGAjtBh7O9BAmaZMeq"],[5,50,50]],[8,0,-57,[0,"c5zoT6XNpDq6NWulsV4h+5"],11]],[1,"c4IUyteNdKsa1Fec5fy5KM",1,0],[1,-62.516,-12.583,0]],[40,"Inverse",512,33554432,1,[[2,-58,[0,"84sEvana1KrIXUYu/BRdBM"],[5,2800,44]],[82,"Način okretanja:",0,112,112,44,3,false,false,true,2,-59,[0,"31VPhQnydMfogEFKbPUpzT"],13],[155,18,258.898,15.484,-10.787,-60,[0,"55KQcvY1NBkLUr5xG84iaO"]]],[1,"2eKXy8Dm9CE4Id7nt6/C2e",1,0],[1,15.484,-10.787,0],[1,0.25,0.25,1]],[40,"Zvuk",512,33554432,1,[[2,-61,[0,"79eP7haDtIu6+dZsW8RpCw"],[5,2800,44]],[82,"Gašenje zvuka:",0,112,112,44,3,false,false,true,2,-62,[0,"2fVIdhMaJNNYlhU5BzKdcj"],14],[79,18,358.898,17.484,-107.56,-63,[0,"3fqMLRyIZFdK8jgTS+09gp"],1]],[1,"4b3IwfBbFNv5f9cJ3SEDrz",1,0],[1,17.484,-107.56,0],[1,0.25,0.25,0.25]],[64,"SoundOff",false,33554432,1,[[2,-64,[0,"54J5pDGSpCPrzLwkj2ywej"],[5,265,239]],[15,-65,[0,"45xd9Zf8JBVo/IGnkC8Cvu"],16]],[1,"7aOPc1Gx9BIZhpQ041+MX8",1,0],[1,-63,-110.883,0],[1,0.2,0.2,1]],[21,"SoundOn",33554432,1,[[2,-66,[0,"d2sNRdAZ5JvI/GQiOxueIa"],[5,275,239]],[15,-67,[0,"ab/MP9py5CS5oV7m+uw2lO"],17]],[1,"47dB3q3rRJ8qlGNcrwX3vH",1,0],[1,-63,-110.883,0],[1,0.2,0.2,1]],[21,"kornajca 1",33554432,1,[[2,-68,[0,"75Q2/1s1BG4JkCMgNDyLCy"],[5,272,136]],[8,0,-69,[0,"adCN1b+3ROh56FZH0xL5pl"],8]],[1,"d780Ok/m5GvZebDD0FkNoD",1,0],[1,-288,85.038,0],[1,0.3,0.3,0.3]],[21,"zec 1",33554432,1,[[2,-70,[0,"6cP4WBIEJLJ4zIHMBitnDn"],[5,172,184]],[15,-71,[0,"24l6TlLOtIcqEnnizGuKvR"],9]],[1,"f6Akdlds9LsbH4vF6pBieI",1,0],[1,316,89.038,0],[1,0.3,0.3,0.3]],[144,"Checkmark",false,33554432,4,[[[2,-72,[0,"024yHVHG9Gs4vsV8C2cglM"],[5,30,30]],-73],4,1],[1,"4buzcrFv5Fg4XwUXUFq5Ey",1,0]],[145,"Checkmark",33554432,5,[[[2,-74,[0,"8a7Kj5DGhJc6gfaZjGIBid"],[5,30,30]],-75],4,1],[1,"28oq7RqKdOHY1jd+sdzbAE",1,0]],[102,0,7,[0,"699vAQEj9Jb7H9Q8tB9Aqp"]],[221,0,3,[0,"d5oDE/gDpDo7CgX37Kop/5"],[[29,"861c4VLRgZKYJDhIb2CRjAR","sliderChanged",1]],18],[167,0,16,[0,"a9nEjBjc5MwI33UFFQ04RB"],[4,16777215]],[222,false,4,[0,"66svu8IetG7Y7GqGE/kk9O"],[[29,"861c4VLRgZKYJDhIb2CRjAR","toggleChanged",1]],[4,4292269782],4,[[29,"861c4VLRgZKYJDhIb2CRjAR","toggleChecked",1]],20],[102,0,17,[0,"b1tcWCYo5LrJ+oc5hDEH6A"]],[223,5,[0,"b3wqeGzDlLwqCLteJl6vRy"],[[29,"861c4VLRgZKYJDhIb2CRjAR","toggleChanged",1]],[4,4292269782],5,[[29,"861c4VLRgZKYJDhIb2CRjAR","toggleCheckedMute",1]],22]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,41,23,0,42,21,0,43,19,0,44,12,0,45,13,0,46,8,0,47,9,0,0,1,0,-1,2,0,-2,6,0,-3,3,0,-4,14,0,-5,15,0,-6,8,0,-7,9,0,-8,4,0,-9,10,0,-10,11,0,-11,5,0,-12,12,0,-13,13,0,0,2,0,0,2,0,7,2,0,0,2,0,0,2,0,0,3,0,0,3,0,-3,19,0,0,3,0,-1,7,0,0,4,0,0,4,0,-3,21,0,-1,16,0,0,5,0,0,5,0,-3,23,0,-1,17,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,-2,18,0,7,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,-2,20,0,0,17,0,-2,22,0,11,1,75],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,20,21,22,23],[1,5,15,16,17,13,5,1,1,1,1,1,1,13,13,1,1,1,1,1,1,5,1,5],[60,60,0,4,5,2,61,236,237,238,239,240,19,2,2,19,241,242,14,61,62,19,62,19]],[[[23,"GenericUI-Image"],[66,"GenericUI-Image",false,33554432,[-13,-14,-15,-16],[[2,-2,[0,"13GRExacNEPoA0ZsMSyo9s"],[5,815,506.129]],[9,1,0,-3,[0,"efLprIuWRFBLI0BVaRHw6F"],9],[33,0,-4,[0,"59A4dxKwtKXpT5PBW/dRI8"]],[31,-5,[0,"02gUNRHI1OQK+dW0sBULeC"]],[224,-9,[0,"75wBTzAIJC+Z9kFVFvfpqO"],-8,-7,-6],[207,-10,[0,"fbwqgeqIlCjqxr+SvvAO93"]],[71,-11,[0,"6flFQYMnpH0YVfEv0EDzxE"],[10],11],[61,5,11.935499999999998,81.93550000000002,500,-12,[0,"04uhuANJNBSKvWrp4Wr90c"]]],[1,"e9ZWNyzJVGBIYNRgbu0cSz",-1,0],[1,0,35.00000000000003,0]],[26,"GenericButton",33554432,1,[-22],[[2,-17,[0,"6bqMvpVv5LJ4586cvWuA3W"],[5,120,120]],[9,1,0,-18,[0,"c20g8Jei9IRJl/tY53PlQz"],3],[55,-20,[0,"99r324KUVK4JVDVWz0EdB9"],[[29,"27b26tXhJpAmqyX0ZVyBte1","turnOffGenericTask",1]],[4,4292269782],-19,4],[99,36,20.817000000000036,19.444500000000005,-21,[0,"92S63XAMROtqZGdqOhhAuL"],1]],[1,"36qa0+CgFOK4uhnYCGleHt",1,0],[1,326.683,-173.62,0]],[26,"SoundButtons",33554432,1,[-27],[[2,-23,[0,"569uK3H3pJqpTMVF4fIAu0"],[5,74,74]],[8,0,-24,[0,"1aTJH8+ipBvZ8OGZtlLTkp"],7],[156,36,717.3009999999999,506.847,17.590000000000003,92,-25,[0,"7dq2z0MR1F3bVpDdzGnUrQ"]],[32,-26,[0,"366rg/yXdAMqtQ/Pv1NZFw"],[[10,"27b26tXhJpAmqyX0ZVyBte1","soundButtonClicked","3",1]],8]],[1,"ceOuVQs2VAwLlJ5t/dilOv",1,0],[1,-346.80099999999993,-198.4745,0]],[58,"SoundButtonOff",false,33554432,3,[[2,-28,[0,"e3cBuPZadJ1KE+oOWzUC7f"],[5,74,74]],[8,0,-29,[0,"8enGRRjepLbqN0lO80s4Fn"],5],[67,9,3,857.1700000000001,3,483.313,320,-205,74,74,-30,[0,"96q2iZ4itJKLptX+3EEX+U"]],[32,-31,[0,"366rg/yXdAMqtQ/Pv1NZFw"],[[10,"27b26tXhJpAmqyX0ZVyBte1","soundButtonClicked","3",1]],6]],[1,"6ffE2ngupKrYtT+dGCsizI",1,0]],[40,"Image",512,33554432,1,[[2,-32,[0,"6eq9r2DtVBYaEFlqGOdx6W"],[5,600,400]],[157,18,49.29199999999999,-63.719,-33,[0,"8acVHoqjFJormZsqdTSILa"]],[168,0,false,-34,[0,"45Bozxr5JBM4zBoopLzHs/"],0]],[1,"62ZaGHcq9LXK0RGztcMGe+",1,0],[1,0,-63.719,0],[1,0.6,0.6,0.7]],[40,"Tekst",512,33554432,1,[[2,-35,[0,"3afQ0OYNlP4ovL4DPZp3y0"],[5,2800,500]],[83,"Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:Resi rebus:",86,86,100,2,false,2,-36,[0,"c056rkr5dEhasgDOga2ZRy"],1],[80,17,27.779500000000027,399.438,-37,[0,"a95qHZZaxJ24DU6x2zxs4f"],1]],[1,"19P8j0sKdE2IwivHN9RJwW",1,0],[1,0,162.78499999999997,0],[1,0.25,0.25,0.25]],[75,"Label",512,false,33554432,2,[[2,-38,[0,"c9rNzl0sdPE7BnY/SJOSZ0"],[5,100,60]],[53,"Izađi",33,33,1,false,false,-39,[0,"38+0c5EsFIr7MRVGWZNYNj"],2]],[1,"9d1nSyaQhGD65T4AeNp6FA",1,0]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,20,4,0,48,5,0,21,6,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,6,0,-3,2,0,-4,3,0,0,2,0,0,2,0,7,2,0,0,2,0,0,2,0,-1,7,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,11,1,39],[0,0,0,0,0,0,0,0,0,0,0,0],[1,13,13,1,5,1,5,1,5,1,-1,12],[243,2,2,20,20,11,9,9,9,14,63,63]],[[{"name":"CheckAnswer","rect":{"x":0,"y":0,"width":510,"height":520},"offset":{"x":0,"y":0},"originalSize":{"width":510,"height":520},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[244]],[[{"name":"Group 1727settings","rect":{"x":1,"y":1,"width":126,"height":133},"offset":{"x":0,"y":-0.5},"originalSize":{"width":128,"height":134},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[245]],[[{"name":"4 1","rect":{"x":0,"y":0,"width":128,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":104},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[246]],[[{"name":"panel za trofeje","rect":{"x":0,"y":0,"width":1800,"height":262},"offset":{"x":0,"y":0},"originalSize":{"width":1800,"height":262},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[247]],[[[48,"ograda",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":true}}],[{"USE_ALBEDO_MAP":true}],[[[{},"albedoScale",8,[1,0.800000011920929,0.800000011920929,0.800000011920929],"mainTexture",6,0]],11]]],0,0,[0,0],[19,10],[248,1]],[[{"name":"Group 2zvezda","rect":{"x":1,"y":1,"width":510,"height":511},"offset":{"x":0,"y":-0.5},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[249]],[[[23,"GenericUI-Input"],[66,"GenericUI-Input",false,33554432,[-12,-13,-14,-15,-16,-17,-18,-19],[[2,-2,[0,"13GRExacNEPoA0ZsMSyo9s"],[5,815,506.129]],[9,1,0,-3,[0,"3clpndbdRM+rQZ3zb47GwB"],17],[33,0,-4,[0,"11xijk/wBHR6peFn5kt0Ar"]],[31,-5,[0,"7a/ux13DVPIJPBTApISTCl"]],[61,5,11.93549999999997,81.93549999999999,500,-6,[0,"a2NkWv7XxA+qARtADZxDem"]],[90,false,-7,[0,"0b6vw/UPlMraPQBctvCr9q"]],[226,-10,[0,"85PI2fjWZLPJFCtFTw3bIL"],-9,-8],[71,-11,[0,"c36CLT6oVEd7LkXVwBU51r"],[18,19,20],21]],[1,"82H1Rqs2tL2p+4NBLalKFh",-1,0],[1,0,35,0]],[26,"GenericButton",33554432,1,[-25],[[2,-20,[0,"730tTEteFFqbtQD1YtJOcT"],[5,120,120]],[9,1,0,-21,[0,"54iX3frbpOsqGD7B6wvbm+"],2],[55,-23,[0,"b9vz4jdwRFIqZC3+qPWaRD"],[[10,"6be17T1cABOeK5AD2965d47","answered","0",1]],[4,4292269782],-22,3],[62,4,19.444000000000017,-24,[0,"8987sFACJJ4rHgCkHVAZVF"],1]],[1,"16fS1dJx5Gd65JOciNOeDm",1,0],[1,316.683,-173.6205,0]],[26,"EditBox",33554432,1,[-29,-30,-31],[[2,-26,[0,"d5gRT6tBNIWId7YsouniWj"],[5,331,90]],[9,1,0,-27,[0,"9cKSgnL2RFXILVsrTsyu7c"],8],[42,4,38.98250000000003,-28,[0,"4bPW8Z0rNAiJdvnS0IiLzi"]]],[1,"c9IwirT8JBMJlvDlsbytq9",1,0],[1,0,-169.082,0]],[135,"EditBoxPC",33554432,1,[-38,-39],[[2,-32,[0,"4ddOpv5exMkLAEDJ7WxUqx"],[5,1314,360]],[9,1,0,-33,[0,"efrQ+xPt9DyrB7n8paXXg3"],9],[227,6,8,-36,[0,"07LWQV6VtJ25W4STKnI07r"],-35,-34,10],[42,4,38.98250000000003,-37,[0,"1a07ozOeBLpb6FCf62ExBl"]]],[1,"88vLB9xxBHZJbA7CVSIru1",1,0],[1,0,-169.082,0],[1,0.25,0.25,0.25]],[136,"Next",false,33554432,1,[-45],[[2,-40,[0,"f6euuyshZAx7R0zjaUFqTz"],[5,100,40]],[9,1,0,-41,[0,"b9xhlMi+BBfZatBePq+A5w"],12],[28,2,-43,[0,"447r5SB/tIyZFcYpsnX5ZW"],[[29,"6be17T1cABOeK5AD2965d47","rightAnwer",1]],[4,4292269782],-42,13,14,15,16],[158,1,37.684500000000014,19.444000000000017,40,-44,[0,"8987sFACJJ4rHgCkHVAZVF"],1]],[1,"15NP1JoMFCGoMUochXpVDp",1,0],[1,317,195.38,0]],[91,"Wrong",512,false,33554432,1,[[2,-46,[0,"85pKvV3G5FKpQlsAuNfMi+"],[5,699.55,55.44]],[170,"Pokušaj ponovo!",36,36,44,3,false,-47,[0,"b4tmnDE19EcbIwOsUGEU1V"],[4,4278190335]],[101,20,49.29199999999999,253.545,-57.557,-48,[0,"2ev9bV0mdONZAbjPtvQLAF"],1],[31,-49,[0,"92gKXlB5dNP5ybpUPyb36P"]],[33,0,-50,[0,"e0+XLrwXxI8KMobaFieFda"]]],[1,"9fFfbT7uBJ1bNV9+jxfdLN",1,0],[1,0,31.264999999999986,0]],[26,"SoundButtons",33554432,1,[-55],[[2,-51,[0,"36qTXn7RNED7TN6rxZH8G9"],[5,74,74]],[8,0,-52,[0,"dfpJfMaAROJ6turR7UK86J"],6],[67,12,23.699000000000012,857.1700000000001,403.562,17.590000000000003,320,-205,74,74,-53,[0,"9f1qKuPp1Ou5UZmq9k4yOg"]],[32,-54,[0,"de3+rEHoNKkKtARz/hvzxl"],[[10,"6be17T1cABOeK5AD2965d47","soundButtonClicked","0",1]],7]],[1,"105bHxgD1Os4dsvIHnwD+g",1,0],[1,-346.801,-198.4745,0]],[58,"SoundButtonOff",false,33554432,7,[[2,-56,[0,"934Wt/xdpNqLj7N3udwqBI"],[5,74,74]],[8,0,-57,[0,"ffgM/F/RJMdLecNvNPmSXZ"],4],[32,-58,[0,"195oEF+KVFs75Vw+yzulQg"],[[10,"6be17T1cABOeK5AD2965d47","soundButtonClicked","0",1]],5],[78,9,74,74,-59,[0,"7a92k8OBFBKL4RO0IAoCN7"]]],[1,"d5aK5i5aBMkpSmg7nNXDCL",1,0]],[40,"Tekst",512,33554432,1,[[2,-60,[0,"9f2xiMf7VE7Z6WG4yJ2MH2"],[5,2800,800]],[171,"Школарци! У решавању мистерија које вас чекају учествују и деца из вртића. Али, она још нису учила математику. Хајде да им помогнемо! \nРеши загонетке, пронађи тајанствене предмете и кликни на њих да урадиш математичке задатке које крију.\n",0,85,86,100,2,false,2,-61,[0,"30WF3jXQpE76/yl52Z2k0A"],0],[80,18,49.29199999999999,56.833,-62,[0,"79is2N2LVFuqWJ0fmqWIxe"],1]],[1,"44jBgm/7ZKpqyGqZA/01PM",1,0],[1,0,56.833,0],[1,0.25,0.25,1]],[75,"Label",512,false,33554432,2,[[2,-63,[0,"bbbHPxF51AjrU5XMgFYmsq"],[5,200,60]],[53,"Odgovori",33,33,1,false,false,-64,[0,"470xTZp/hCNYZ+7vpKW0mT"],1]],[1,"50EaZ7FjVNQrUP4eCxeA6y",1,0]],[21,"TEXT_LABEL",33554432,3,[[60,-65,[0,"c6kxdBvHlLUauWAW6jAmxr"],[5,1200,240],[0,0,1]],[69,"",120,120,90,1,false,-66,[0,"2bnT4mQuJIK4Q9cUaiz9CB"]]],[1,"edWskM/E9HipnzNWFVE0cN",1,0],[1,-148,30,0],[1,0.25,0.25,0.25]],[64,"PLACEHOLDER_LABEL",false,33554432,3,[[60,-67,[0,"ac3lLQyWNOAKbP6he61TD0"],[5,1200,240],[0,0,1]],[172,"Upisi tacan odgovor... ",0,120,120,60,1,false,-68,[0,"5d5NHhDh9C9oG5HSUirx6O"],[4,4290493371]]],[1,"5f193dSxBOXb17cF/rqxk7",1,0],[1,-148,30,0],[1,0.25,0.25,0.25]],[21,"Result",33554432,3,[[60,-69,[0,"c6kxdBvHlLUauWAW6jAmxr"],[5,1200,240],[0,0,1]],[69,"",120,120,60,1,false,-70,[0,"21pNKKRu5LT5hBp2K0lzNU"]]],[1,"85SAjAAhBAVZlp124iqUBh",1,0],[1,-148,30,0],[1,0.25,0.25,0.25]],[146,"TEXT_LABEL",33554432,4,[[[60,-71,[0,"4ddOpv5exMkLAEDJ7WxUqx"],[5,1314,360],[0,0,1]],-72],4,1],[1,"e0NtTLI/ZDZYpsXCc0kr4v",1,0],[1,-656,180,0]],[147,"Result",false,33554432,4,[[[60,-73,[0,"4ddOpv5exMkLAEDJ7WxUqx"],[5,1314,360],[0,0,1]],-74],4,1],[1,"d9+7srBw1CSI6eJYB8b/sZ",1,0],[1,-656,180,0]],[41,"Oktaceno",false,33554432,1,[[2,-75,[0,"aaU4tKEfNBJYR4yAbMKfvd"],[5,66,66]],[68,0,-76,[0,"8eeNH1fjNMArPb7sT73cbT"],[4,16777215],11]],[1,"d2AXwcZxlDpqupWoueqVgX",1,0],[1,122.609,-135.42,0]],[137,"Next",512,33554432,5,[[2,-77,[0,"33q5iaVs5PI5xG9AQed1gl"],[5,100,40]],[103,"NEXT",20,20,1,false,-78,[0,"37EZsZJnZCNoHyklRPPMWK"],[4,4278190080]]],[1,"72jTy2xLVHJL0sGW3vSfzZ",1,0]],[69,"",120,120,360,1,false,14,[0,"045VkOOjlHMJw8jbwZo3Oj"]],[69,"",120,120,360,1,false,15,[0,"045VkOOjlHMJw8jbwZo3Oj"]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,20,8,0,21,9,0,0,1,0,0,1,0,-1,9,0,-2,6,0,-3,2,0,-4,7,0,-5,3,0,-6,4,0,-7,16,0,-8,5,0,0,2,0,0,2,0,7,2,0,0,2,0,0,2,0,-1,10,0,0,3,0,0,3,0,0,3,0,-1,11,0,-2,12,0,-3,13,0,0,4,0,0,4,0,49,18,0,50,19,0,0,4,0,0,4,0,-1,14,0,-2,15,0,0,5,0,0,5,0,7,5,0,0,5,0,0,5,0,-1,17,0,0,6,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,-2,18,0,0,15,0,-2,19,0,0,16,0,0,16,0,0,17,0,0,17,0,11,1,78],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,13,1,5,1,5,1,5,1,1,51,1,1,5,15,16,17,1,-1,-2,-3,12],[2,2,64,64,11,11,9,9,25,25,25,21,0,0,0,4,5,14,22,65,250,22]],[[[115,[{}],[{}]]],0,0,[0],[10],[1]],[[[6,".bin",1757323940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.010204548947513103,0.0000015714671235400601,-0.009956910274922848],"maxPosition",8,[1,0.009748633950948715,0.0006218045018613338,0.00995690282434225]]],-1],0,0,[],[],[]],[[{"name":"ProgressFill","rect":{"x":0,"y":0,"width":429,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":429,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[251]],[[{"name":"7","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[252]],[[[23,"LoadingPanel"],[50,"LoadingPanel",33554432,[-5,-6,-7],[[2,-2,[0,"dcwORN/fVHJ5kKyvnVoTtd"],[5,2000,1500]],[31,-3,[0,"47IhZuPSlFDJ4IF0rS//tR"]],[33,0,-4,[0,"8aiR/CcolMG47O1Ub6nEwm"]]],[1,"f6VGb22FVCIIE43GrTTgcc",-1,0],[1,5.764,13.706,0]],[56,"LoadingCircle",33554432,1,[[2,-8,[0,"fea7uuXnFMrJuGdO7BjkqE"],[5,60,60]],[8,0,-9,[0,"18/vLgMGlNT6faAeg7I9Nz"],1],[54,true,-10,[0,"50i6m8EetHSZhZB0X5LOQQ"],[2],3]],[1,"3b7MCd/jpMMoYz7JtreqK5",1,0]],[58,"CrniBackground",false,33554432,1,[[2,-11,[0,"3f0OKiQUNKrobY6rGfuLb+"],[5,4000,3000]],[68,0,-12,[0,"451EhrWSZPYIcWsh+ZdCVy"],[4,2013265919],0]],[1,"8bAcABonRN9K/HECuQLgTU",1,0]],[138,"Counter",false,33554432,1,[[2,-13,[0,"23grPcGypIPIJO5D2mmZo0"],[5,165.12,240]],[173,"0",240,240,240,false,2,-14,[0,"2enfyTYkRPaoiB6v0LRmRb"],4]],[1,"440IdNbjlA3IYLRLtjAqpb",1,0],[1,0.25,0.25,0.25]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,2,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,11,1,14],[0,0,0,0,0],[1,1,-1,12,13],[253,254,66,66,255]],[[[23,"GenericUI"],[66,"GenericUI",false,33554432,[-11,-12,-13],[[2,-2,[0,"13GRExacNEPoA0ZsMSyo9s"],[5,815,506.129]],[9,1,0,-3,[0,"58JPiRR2hNwrDxET9SNsqy"],8],[225,-6,[0,"705sv32S9CCZeVXiO2aI5c"],-5,-4],[33,0,-7,[0,"4e0bqd8o9MUqbdoPgTwOkH"]],[31,-8,[0,"24x6dAP7tGcLDQaCVxskFH"]],[61,5,11.93549999999999,81.93549999999999,500,-9,[0,"04uhuANJNBSKvWrp4Wr90c"]],[90,false,-10,[0,"14qlXxJ+tBurEafhl5O4Ip"]]],[1,"b4+vvl3pxAlJnTi89jX8bm",-1,0],[1,0,35,0]],[26,"GenericButton",33554432,1,[-19],[[2,-14,[0,"c7gSvTqm5Jf6GIfJRTR1XO"],[5,120,120]],[9,1,0,-15,[0,"1bVjCi15NGab6k21874QRO"],2],[55,-17,[0,"15LwYrpYlK07B20/A4/2Rs"],[[29,"27b26tXhJpAmqyX0ZVyBte1","turnOffGenericTask",1]],[4,4292269782],-16,3],[62,4,19.44399999999999,-18,[0,"0cY6+JowlEt6zllYD63mn1"],1]],[1,"a9PyvFg35DTJS2Nj8GOMcz",1,0],[1,0,-173.62050000000002,0]],[26,"SoundButtons",33554432,1,[-24],[[2,-20,[0,"e0J1uB5FRH4Zay+ui224zz"],[5,74,74]],[8,0,-21,[0,"45qmSmE2xEI6fGX2knK45X"],6],[67,12,23.699000000000012,857.1700000000001,403.562,17.590000000000003,320,-205,74,74,-22,[0,"74NPErInZDGYb4T3tWM93d"]],[32,-23,[0,"e3zdNjHxpEiZvih0/m6Lr6"],[[10,"27b26tXhJpAmqyX0ZVyBte1","soundButtonClicked","3",1]],7]],[1,"549hHWfxBCi5l9RaHHxDu9",1,0],[1,-346.801,-198.4745,0]],[58,"SoundButtonOff",false,33554432,3,[[2,-25,[0,"fawxFZWQpM7bI5YRxBvc3O"],[5,74,74]],[8,0,-26,[0,"d3cfSUFQdJZqpHi+2K9VTJ"],4],[32,-27,[0,"34Vs7lk/VJb6CxZjM47AxA"],[[10,"27b26tXhJpAmqyX0ZVyBte1","soundButtonClicked","3",1]],5],[78,9,74,74,-28,[0,"bb3iAJWVtNN6vYsrtKj+FL"]]],[1,"16uwvyandPSZxtsaSNQ/EG",1,0]],[40,"Tekst",512,33554432,1,[[2,-29,[0,"c7Zbrf0TVH0o7Q+hFKd6OS"],[5,2860.05,1300]],[83,"Одлично! Иза тебе је много трагова и успешно решених задатака. Ево још једног за крај. \n Свака машна поклон скрива, \n рођенданом се открива. \n Неки већи, неки мањи, \n ти пронађи најмањи!",86,86,100,2,false,2,-30,[0,"c3y23yk9BOP6T/nZou9Ilo"],0],[80,18,49.29199999999999,63.839,-31,[0,"666OsEaCJAS6w6dj7coKXD"],1]],[1,"09U/V5U7pH2qmPVF7ECSgZ",1,0],[1,0,63.839,0],[1,0.25,0.25,0.25]],[75,"Label",512,false,33554432,2,[[2,-32,[0,"25+uG8o9lMDrf08DeEGcMW"],[5,100,60]],[53,"KRENI",33,33,1,false,false,-33,[0,"e95pqV6MBOd4iepV4eW4kt"],1]],[1,"f4Jlbn5w1GULg1VTs3cTUa",1,0]]],0,[0,6,1,0,0,1,0,0,1,0,20,4,0,21,5,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,3,0,0,2,0,0,2,0,7,2,0,0,2,0,0,2,0,-1,6,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,11,1,33],[0,0,0,0,0,0,0,0,0],[13,13,1,5,1,5,1,5,1],[2,2,20,20,11,11,9,9,14]],[[[49,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[19,10],[256,1]],[[[23,"GenericUI-ABC"],[66,"GenericUI-ABC",false,33554432,[-15,-16,-17,-18,-19,-20,-21,-22,-23],[[2,-2,[0,"13GRExacNEPoA0ZsMSyo9s"],[5,815,506.129]],[9,1,0,-3,[0,"93huI8qg5LhYJtpODC9NXb"],23],[33,0,-4,[0,"46vX5103VCvLaCzYcivu8k"]],[31,-5,[0,"0e0vA+TDpLDaQPPFCq0TgJ"]],[61,5,11.935499999999998,81.93550000000002,500,-6,[0,"04uhuANJNBSKvWrp4Wr90c"]],[228,-12,[0,"640qasn9tJprkjiBbJq3TF"],-11,-10,-9,-8,-7],[90,false,-13,[0,"504NqX0pVFU4u8jFURh4ss"]],[71,-14,[0,"7a/6gHTq5Exoh9KXKmKli3"],[24,25,26,27,28],29]],[1,"92X+fL2EtL56hsWYSdqLWJ",-1,0],[1,0,35.00000000000003,0]],[26,"A",33554432,1,[-29,-30],[[2,-24,[0,"c43sXe5fxBNb06o6PoVwSN"],[5,120,120]],[9,1,0,-25,[0,"d3SSe65dZHwZ76q20PejCX"],5],[55,-27,[0,"87BjQVZYtIiqJy1cxQR2Y0"],[[10,"8b0d18LctJAWqNwBufmwTVF","answered","0",1]],[4,4292269782],-26,6],[62,4,19.444000000000017,-28,[0,"22dUTzReJMj7aZ9ky+Bg2U"],1]],[1,"d31TcwE1xFPJ7TavQUYVJq",1,0],[1,-229.555,-173.6205,0]],[26,"B",33554432,1,[-36,-37],[[2,-31,[0,"feHMe9yFJE87cL4e95HQNE"],[5,120,120]],[9,1,0,-32,[0,"c1wlrQwZNAloPrZ0DjYPUy"],10],[55,-34,[0,"78pRWBEj5I2r2wixNK41+C"],[[10,"8b0d18LctJAWqNwBufmwTVF","answered","1",1]],[4,4292269782],-33,11],[62,4,19.444000000000017,-35,[0,"4fc3KG8I5BcISZJ+I1wDZ9"],1]],[1,"e5tjm/jttNPIzAVmNRR3Ev",1,0],[1,0,-173.6205,0]],[26,"C",33554432,1,[-43,-44],[[2,-38,[0,"06sQ0A/AtLSJsDo1sjt+iv"],[5,120,120]],[9,1,0,-39,[0,"afhDid1LFBtYeSQSdDZGkz"],15],[55,-41,[0,"161XPrjR1FELoAPm6u4zIr"],[[10,"8b0d18LctJAWqNwBufmwTVF","answered","2",1]],[4,4292269782],-40,16],[62,4,19.444000000000017,-42,[0,"f5CtJunglAaL6eCpRZ25ao"],1]],[1,"82J2v+zelL8Y71VXvO5ums",1,0],[1,251.532,-173.6205,0]],[139,"Wrong",512,33554432,1,[[2,-45,[0,"c0d+fZ27ZFsI7vJceZ+6+O"],[5,699.55,55.44]],[174,"Pokušaj ponovo!",36,36,44,3,false,false,-46,[0,"f3arLZz2FJv62UTBUrv1Zx"],[4,4278190335],1],[101,20,49.29199999999999,253.545,-57.557,-47,[0,"5fUQrNkvpLVLKat4zb6i1K"],1],[31,-48,[0,"61PHQjynBAxIFOHnspeTj5"]],[33,0,-49,[0,"3016OeQslL6qoHBZ8klR9W"]]],[1,"02RJJy7UxKqrR/+cX2sEuK",1,0],[1,0,28.200499999999977,0]],[26,"QuestionAudio",33554432,1,[-54],[[2,-50,[0,"36qTXn7RNED7TN6rxZH8G9"],[5,74,74]],[8,0,-51,[0,"34tNBsaXxKFp7NNMKKnYPZ"],19],[159,12,23.699000000000012,694.1700000000001,400.562,17.590000000000003,80,80,-52,[0,"2dcatLAfdLA6RuuoJdcf2Y"]],[32,-53,[0,"f3SfsiOFxKFJXc7fmbptri"],[[10,"8b0d18LctJAWqNwBufmwTVF","soundButtonClicked","3",1]],20]],[1,"e7MzJ7QltOi4cZwN0KOGAF",1,0],[1,-346.801,-198.4745,0]],[58,"SoundButtonOff",false,33554432,6,[[2,-55,[0,"81Q2nmk1hIKbaodyCkIg0d"],[5,74,74]],[8,0,-56,[0,"f5A6gvPvNEIqtPsSm/4bOq"],18],[67,9,3,857.1700000000001,3,483.313,320,-205,74,74,-57,[0,"4ceIlVVh9GD73xKkaZUncS"]],[180,-58,[0,"f3SfsiOFxKFJXc7fmbptri"],[[10,"8b0d18LctJAWqNwBufmwTVF","soundButtonClicked","3",1]]]],[1,"98guwFOmNBYImrVQL+nFi4",1,0]],[40,"Tekst",512,33554432,1,[[2,-59,[0,"97tW2IuWJCAZ7TEH2bNesS"],[5,2800,1200]],[83,"Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. Čestitam! Stigao si do časovničara. ",86,86,100,2,false,2,-60,[0,"61DRHf125Jx4nFOrhmU30O"],0],[79,18,49.29199999999999,-0.02449999999999708,59.24799999999999,-61,[0,"53TXh8QTNGBrD4g+GrMb0W"],1]],[1,"43EcuZSQVKJb38HQJ6u+y+",1,0],[1,-0.02449999999999708,59.24799999999999,0],[1,0.25,0.25,1]],[41,"Aaudio",false,33554432,2,[[2,-62,[0,"d4LPzs5RdJ8Z6jKh7+Crl2"],[5,74,73]],[15,-63,[0,"a88MZ58yVLbo2uZy4SaHLE"],3],[42,4,-1.5,-64,[0,"05BBYpXVFIyZUvaCzAYYh0"]],[32,-65,[0,"79OuLWSqpEhYgrbvInCokT"],[[10,"8b0d18LctJAWqNwBufmwTVF","soundButtonClicked","0",1]],4]],[1,"71zRq92plDm4lru9ujYk9J",1,0],[1,-226.879,-108.89400000000003,0]],[41,"Baudio",false,33554432,3,[[2,-66,[0,"5c48jCkoFPRJQlbUcWbszF"],[5,74,73]],[15,-67,[0,"63fZ4pPpdDXq9xj/zzVE0Q"],7],[42,4,-1.5,-68,[0,"17aKGlWLVCPasqY70Y1v9F"]],[32,-69,[0,"f74ntzGKJBqaNhyaR5Rmii"],[[10,"8b0d18LctJAWqNwBufmwTVF","soundButtonClicked","1",1]],8]],[1,"30F9z24rBMv6TreQ+8utMm",1,0],[1,-1.339,-108.89400000000003,0]],[41,"Caudio",false,33554432,4,[[2,-70,[0,"18lnAiI9RBlYy9jvTw6Jyq"],[5,74,73]],[15,-71,[0,"224fIUZfJMio9nolZ3PiFs"],13],[42,4,-1.5,-72,[0,"e5QnsCP6lGnIXl/ffLOvEO"]],[32,-73,[0,"0eLcq+mp1Jeb6AuEyFjN2+"],[[10,"8b0d18LctJAWqNwBufmwTVF","soundButtonClicked","2",1]],14]],[1,"8aMCTQNntOtbsoXXLY6vMI",1,0],[1,248.068,-108.89400000000003,0]],[76,"Label",512,33554432,2,[[2,-74,[0,"bf5BL6FbxPiKDJGw8i1J+S"],[5,310,150]],[53,"A",120,120,2,false,false,-75,[0,"a5EslZ44dLHYOYhIQb88Gu"],2]],[1,"0cYWCeqElAlL9xPHkigWrl",1,0],[1,0.25,0.25,0.25]],[76,"Label",512,33554432,3,[[2,-76,[0,"bf5BL6FbxPiKDJGw8i1J+S"],[5,310,150]],[53,"B",120,120,2,false,false,-77,[0,"e3LdHc9f1Kx4LWb8Sp3AUm"],9]],[1,"6a8vVQUTFJI5GPGtovfcya",1,0],[1,0.25,0.25,0.25]],[76,"Label",512,33554432,4,[[2,-78,[0,"bf5BL6FbxPiKDJGw8i1J+S"],[5,310,150]],[53,"C",120,120,2,false,false,-79,[0,"60CmIwAQRCcomji0rU6g8g"],12]],[1,"ddLVDrq6xOyo93evzeX3EH",1,0],[1,0.25,0.25,0.25]],[41,"Oktaceno",false,33554432,1,[[2,-80,[0,"c6R9wOAUpE2bMbcU5XJv5W"],[5,66,66]],[8,0,-81,[0,"39ObIMwaJG4KATUK3tCJZI"],17]],[1,"60mS+/76lJy6+CiCBlp1/t",1,0],[1,-140.87,-146.087,0]],[41,"Oktaceno-001",false,33554432,1,[[2,-82,[0,"e1i1tAifRD7KcCpbCHK3pR"],[5,66,66]],[8,0,-83,[0,"32nEK3AChG9qGUsNCE57Pw"],21]],[1,"c6C1RC6qBCZ4nr+AvFcLu/",1,0],[1,88.696,-146.087,0]],[41,"Oktaceno-002",false,33554432,1,[[2,-84,[0,"9fg8AlYR9GIJud52ghXP3N"],[5,66,66]],[8,0,-85,[0,"1bA8mAhlJCXqB5XATLzvKp"],22]],[1,"73NVUKZ25KCI8UpudHvAox",1,0],[1,340.435,-146.087,0]]],0,[0,6,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,20,7,0,52,14,0,53,13,0,54,12,0,21,8,0,0,1,0,0,1,0,0,1,0,-1,8,0,-2,5,0,-3,2,0,-4,3,0,-5,4,0,-6,15,0,-7,6,0,-8,16,0,-9,17,0,0,2,0,0,2,0,7,2,0,0,2,0,0,2,0,-1,12,0,-2,9,0,0,3,0,0,3,0,7,3,0,0,3,0,0,3,0,-1,10,0,-2,13,0,0,4,0,0,4,0,7,4,0,0,4,0,0,4,0,-1,14,0,-2,11,0,0,5,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,7,0,0,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,11,1,85],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,13,13,1,5,1,5,1,5,13,1,5,13,1,5,1,5,1,1,1,5,1,1,1,-1,-2,-3,-4,-5,12],[2,257,2,12,12,13,13,12,12,2,13,13,2,12,12,13,13,21,11,9,9,21,21,14,22,65,258,259,260,22]],[[{"name":"9","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[261]],[[{"name":"MouseClick","rect":{"x":0,"y":0,"width":56,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":84},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[262]],[[{"name":"2","rect":{"x":0,"y":0,"width":80,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[263]],[[{"name":"PunoDugme","rect":{"x":0,"y":0,"width":56,"height":56},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":56},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[264]],[[{"name":"MouseMove white 3","rect":{"x":16,"y":17,"width":124,"height":194},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":155,"height":227},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[2],[265]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[86,"Montserrat-Regular","Montserrat-Regular.ttf"],-1],0,0,[],[],[]]]]
