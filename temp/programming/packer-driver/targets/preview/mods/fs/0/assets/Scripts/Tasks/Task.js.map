{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/Scripts/Tasks/Task.ts"],"names":["_decorator","Component","Node","GenericUI","Consequence","GameManager","ccclass","property","Task","Boolean","onLoad","taskManager","node","parent","getComponent","console","log","name","orderNumber","checkReadienes","startScheduling","getNeeded","getInstance","jsonLoader","undefined","schedule","isItOkToExecute","checkpointLock","children","indexOf","progressStarted","requirementForTaskCompleted","executed","repeatToogle","reportToUser","genericUI","turnOnGenericTask","loadingBlocker","loadingHandler","turnOnLoading","showTask","taskCompleted","checkReadinesForTasks","resolveConsequnces","executeNextTasksByForce","taskQuestionCompleted","refreshCheckpoint","consequencesToResolve","length","forEach","element","resolve","taskToExecuteByForce","dependencies","weHaveUnresolvedDependency"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, director, Collider, macro, Game } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nimport { TaskManager } from \"./TaskManager\";\r\nimport { ScriptEffects } from \"../Utilities/ScriptEffects\";\r\nimport { GenericUI } from \"../Utilities/GenericUI\";\r\nimport { Consequence } from '../Consequences/Consequence';\r\nimport { GameManager } from '../GameManager';\r\n\r\n@ccclass('Task')\r\nexport class Task extends Component {\r\n\r\n    requirementForTaskCompleted = false;\r\n    executed = false;\r\n\r\n    downloadStarted = false;\r\n\r\n    orderNumber = 0;\r\n\r\n    @property([Node])\r\n    dependencies: Node[] = [];\r\n\r\n    @property(Boolean)\r\n    uvodniTask: Boolean = false;\r\n\r\n\r\n    @property(Boolean)\r\n    repeatToogle: Boolean = false;\r\n\r\n    @property(Boolean)\r\n    reportToUser: Boolean = false;\r\n\r\n    @property([Node])\r\n    taskToExecuteByForce: Node[] = [];\r\n\r\n    @property([Consequence])\r\n    consequencesToResolve: Consequence[] = [];\r\n\r\n    @property(Boolean)\r\n    checkpointLock: Boolean = false;\r\n\r\n    taskManager!: TaskManager;\r\n\r\n    onLoad() {\r\n\r\n        \r\n        this.taskManager = this.node.parent?.parent?.getComponent(\"TaskManager\") as TaskManager;; //  GameManager.getInstance().TaskManager?.getComponent(\"TaskManager\") as TaskManager;\r\n\r\n        console.log(\"My name: + \" + this.name + \"  My Checkpoint \" + this.orderNumber);\r\n        //this.schedule(this.getNeeded(), 0.1 );\r\n        //console.log(\"Canvas !!!!! + \" + GameManager.getInstance().jsonLoader?.name);\r\n\r\n        this.checkReadienes();\r\n    }\r\n\r\n    startScheduling() {}\r\n\r\n    getNeeded(){\r\n  \r\n        if(GameManager.getInstance().jsonLoader == undefined)\r\n            this.schedule(this.getNeeded(), 1 );\r\n        \r\n    }\r\n\r\n    isItOkToExecute(){\r\n\r\n        if(this.checkpointLock)\r\n            if( this.taskManager.node.children.indexOf(this.node.parent!) != GameManager.getInstance().progressStarted )\r\n                return;\r\n\r\n\r\n        if(this.requirementForTaskCompleted) {\r\n            if(!this.executed)\r\n                return true;\r\n            else {\r\n                if(this.repeatToogle)\r\n                    return true;\r\n                else {\r\n                    if(this.reportToUser)\r\n                        this.taskManager.genericUI!.getComponent(GenericUI)!.turnOnGenericTask(\"VeÄ‡ si obavio ovaj zadatak.\");\r\n                    return false;\r\n                    }\r\n                }\r\n        }\r\n        else {\r\n            if(this.reportToUser)\r\n                this.taskManager.genericUI!.getComponent(GenericUI)!.turnOnGenericTask(\"Ovo nije objekat koji trazis.\"); //  genericUIgeneABC!.getComponent(\r\n            return false;\r\n        }\r\n    }\r\n\r\n    loadingBlocker() {\r\n        GameManager.getInstance().loadingHandler?.turnOnLoading();        \r\n    }\r\n\r\n    showTask() {\r\n \r\n\r\n        //this.taskManager.refreshExecutedTasks(this.node.parent!);\r\n    }\r\n\r\n    \r\n\r\n    taskCompleted () {\r\n\r\n        this.executed = true;\r\n        \r\n        this.taskManager.checkReadinesForTasks();\r\n        \r\n        this.resolveConsequnces();\r\n        this.executeNextTasksByForce();\r\n\r\n        //this.taskManager.refreshCheckpoint(this.node.parent!);\r\n    }\r\n\r\n    taskQuestionCompleted() {\r\n        this.taskCompleted();\r\n\r\n        \r\n        this.taskManager.refreshCheckpoint(this.node.parent!);\r\n    }\r\n\r\n    resolveConsequnces() {\r\n        if(this.consequencesToResolve.length == 0) {\r\n            return;\r\n        }\r\n    \r\n        this.consequencesToResolve.forEach(element => {\r\n            element.resolve();\r\n        });\r\n    }\r\n\r\n    executeNextTasksByForce() {\r\n        if(this.taskToExecuteByForce.length == 0) {\r\n            return;\r\n        }\r\n    \r\n        this.taskToExecuteByForce.forEach(element => {\r\n            element.getComponent(Task)!.showTask();\r\n        });\r\n    }\r\n\r\n    checkReadienes() {\r\n        if(this.dependencies.length == 0) {\r\n            this.requirementForTaskCompleted = true;\r\n            return;\r\n        }\r\n\r\n        var weHaveUnresolvedDependency = false;\r\n        \r\n        this.dependencies.forEach(element => {\r\n            if( element.getComponent(Task)!.executed == false) {\r\n                this.requirementForTaskCompleted = false;\r\n                weHaveUnresolvedDependency = true;\r\n            }\r\n        });\r\n\r\n        \r\n        if( !weHaveUnresolvedDependency )\r\n            this.requirementForTaskCompleted = true;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * [1] Class member could be defined like this.\r\n * [2] Use `property` decorator if your want the member to be serializable.\r\n * [3] Your initialization goes here.\r\n * [4] Your update function goes here.\r\n *\r\n * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/\r\n * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html\r\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html\r\n */\r\n"]}