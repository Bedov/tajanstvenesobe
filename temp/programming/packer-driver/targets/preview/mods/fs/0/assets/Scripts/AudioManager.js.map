{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/Scripts/AudioManager.ts"],"names":["_decorator","Component","AudioClip","AudioSource","assert","clamp01","GlobalManager","ccclass","property","AudioManager","getInstance","instance","onLoad","audioSource","node","getComponent","start","playMusic","setVolume","volume","loop","positiveSoundPlay","playOneShot","positiveSound","winSoundPlay","winSound","negativeSoundPlay","negativeSound","clickSoundPlay","clickSound","setMusicVolume","flag"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,O,OAAAA,O;;AAC7DC,MAAAA,a,iBAAAA,a;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;8BAGaS,Y,WADZF,OAAO,CAAC,cAAD,C,UAKHC,QAAQ,CAACN,SAAD,C,UAGRM,QAAQ,CAACN,SAAD,C,UAGRM,QAAQ,CAACN,SAAD,C,UAGRM,QAAQ,CAACN,SAAD,C,UAGRM,QAAQ,CAACN,SAAD,C,8CAjBb,MACaO,YADb,SACkCR,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,+CAmBL,IAnBK;AAAA;;AAqBf,eAAXS,WAAW,GAAiB;AACtC,cAAI,CAAC,KAAKC,QAAV,EAAoB;AAChBF,YAAAA,YAAY,CAACE,QAAb,GAAwB,IAAIF,YAAJ,EAAxB;AAEH;;AACD,iBAAOA,YAAY,CAACE,QAApB;AACH;;AAIDC,QAAAA,MAAM,GAAG;AACLH,UAAAA,YAAY,CAACE,QAAb,GAAwB,IAAxB;AACA,eAAKE,WAAL,GAAmB,KAAKC,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,CAAnB;AACH;;AAEDa,QAAAA,KAAK,GAAI;AACL,eAAKC,SAAL,CAAe,IAAf;AAEA;AAAA;AAAA,8CAAcP,WAAd,GAA4BQ,SAA5B,CAAsC;AAAA;AAAA,8CAAcC,MAApD;AACH;;AAEDF,QAAAA,SAAS,CAAEG,IAAF,EAAiB;AACtB,cAAMP,WAAW,GAAG,KAAKA,WAAzB;AACAT,UAAAA,MAAM,CAACS,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACO,IAAZ,GAAmBA,IAAnB,CAJsB,CAKtB;AACA;AACA;AACH;;AAEDC,QAAAA,iBAAiB,GAAG;AAChB;AACA,eAAKR,WAAL,CAAiBS,WAAjB,CAA6B,KAAKC,aAAlC,EAAkD,KAAKV,WAAL,CAAiBM,MAAnE;AACH;;AAEDK,QAAAA,YAAY,GAAG;AACX,eAAKX,WAAL,CAAiBS,WAAjB,CAA6B,KAAKG,QAAlC,EAA6C,KAAKZ,WAAL,CAAiBM,MAA9D;AACH;;AAEDO,QAAAA,iBAAiB,GAAG;AAChB,eAAKb,WAAL,CAAiBS,WAAjB,CAA6B,KAAKK,aAAlC,EAAkD,KAAKd,WAAL,CAAiBM,MAAnE;AACH;;AAEDS,QAAAA,cAAc,GAAG;AACb,eAAKf,WAAL,CAAiBS,WAAjB,CAA6B,KAAKO,UAAlC,EAA+C,KAAKhB,WAAL,CAAiBM,MAAhE;AACH;;AAEDW,QAAAA,cAAc,CAAEC,IAAF,EAAgB;AAE1B,cAAMlB,WAAW,GAAG,KAAKA,WAAzB;AACAT,UAAAA,MAAM,CAACS,WAAD,EAAc,0BAAd,CAAN;AAEAkB,UAAAA,IAAI,GAAG1B,OAAO,CAAC0B,IAAD,CAAd;AACAlB,UAAAA,WAAW,CAACM,MAAZ,GAAqBY,IAArB;AAEH;;AA7EuC,O;;;;;;;;;;;;;;;;;;;;;;;;;;AAiF5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport { _decorator, Component, Node, AudioClip, AudioSource, assert, clamp01 } from 'cc';\nimport { GlobalManager } from './GlobalManager';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = AudioManager\n * DateTime = Thu Apr 28 2022 16:20:08 GMT+0200 (Central European Summer Time)\n * Author = stickandrope\n * FileBasename = AudioManager.ts\n * FileBasenameNoExtension = AudioManager\n * URL = db://assets/Scripts/AudioManager.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n \n@ccclass('AudioManager')\nexport class AudioManager extends Component {\n    \n    \n    \n    @property(AudioClip)\n    winSound?: AudioClip;\n\n    @property(AudioClip)\n    positiveSound?: AudioClip;\n\n    @property(AudioClip)\n    negativeSound?: AudioClip;\n\n    @property(AudioClip)\n    clickSound?: AudioClip;\n\n    @property(AudioClip)\n    music?: AudioClip;\n    \n    private audioSource: AudioSource = null!;\n\n    public static getInstance(): AudioManager {\n        if (!this.instance) {\n            AudioManager.instance = new AudioManager();\n            \n        }\n        return AudioManager.instance;\n    }\n\n    static instance: AudioManager;\n\n    onLoad() {\n        AudioManager.instance = this;\n        this.audioSource = this.node.getComponent(AudioSource)!;\n    }\n\n    start () {\n        this.playMusic(true);\n\n        GlobalManager.getInstance().setVolume(GlobalManager.volume);\n    }\n\n    playMusic (loop: boolean) {\n        const audioSource = this.audioSource!;\n        assert(audioSource, 'AudioManager not inited!');\n\n        audioSource.loop = loop;\n        //if (!audioSource.playing) {\n        ///    audioSource.playing();\n        //}\n    }\n\n    positiveSoundPlay() {\n        //this.audioSource.play()\n        this.audioSource.playOneShot(this.positiveSound!, this.audioSource.volume);\n    }\n\n    winSoundPlay() {\n        this.audioSource.playOneShot(this.winSound!, this.audioSource.volume);\n    }\n\n    negativeSoundPlay() {\n        this.audioSource.playOneShot(this.negativeSound!, this.audioSource.volume);\n    }\n\n    clickSoundPlay() {\n        this.audioSource.playOneShot(this.clickSound!, this.audioSource.volume);\n    }\n\n    setMusicVolume (flag: number) {\n        \n        const audioSource = this.audioSource!;\n        assert(audioSource, 'AudioManager not inited!');\n\n        flag = clamp01(flag);\n        audioSource.volume = flag;\n        \n    }\n\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/decorator.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html\n */\n"]}