{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/resources/qfw/components/PlayerCtrl.ts"],"names":["_decorator","Component","SkeletalAnimationComponent","SkinningModelComponent","v4","ccclass","property","PlayerCtrl","type","inst","_inst","start","_anim","node","getComponent","i","clips","length","clip","defaultClip","_curentAnimIndex","rimLightColor","_rimColor","rimLightEnabled","enable","_rimEnabled","rimColor","value","x","y","z","w","body","sharedMaterial","setProperty","weapon","isLoop","v","_isLoop","animState","getAnimationState","curAnimName","repeatCount","Infinity","playNext","playAnim","playPrev","animName","cb","play","name"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, systemEvent, SystemEvent, EventKeyboard, macro, Vec3, Quat, quat, v3, tween, geometry, director, SkeletalAnimationComponent, Terrain, find, AnimationState, AnimationClip, SkinningModelComponent, v4, Vec4 } from 'cc';\nimport { FollowCamera } from './FollowCamera';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PlayerCtrl')\nexport class PlayerCtrl extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    @property({ type: SkinningModelComponent })\n    body: SkinningModelComponent = null;\n\n    @property({ type: SkinningModelComponent })\n    weapon: SkinningModelComponent = null;\n\n    private static _inst: PlayerCtrl;\n    public static get inst(): PlayerCtrl {\n        return this._inst;\n    }\n\n    private _isLoop: boolean = true;\n    private _anim: SkeletalAnimationComponent;\n    private _curentAnimIndex: number = 0;\n\n    start() {\n        PlayerCtrl._inst = this;\n        this._anim = this.node.getComponent(SkeletalAnimationComponent);\n\n        for (let i = 0; i < this._anim.clips.length; ++i) {\n            let clip = this._anim[i];\n            if (clip == this._anim.defaultClip) {\n                this._curentAnimIndex = i;\n            }\n        }\n        this.rimLightColor = this._rimColor;\n    }\n\n    private _rimColor = v4(0, 0, 0, 0);\n    private _rimEnabled = false;\n    public set rimLightEnabled(enable: boolean) {\n        this._rimEnabled = enable;\n        this.rimLightColor = this._rimColor;\n    }\n\n    public get rimLightEnabled(): boolean {\n        return this._rimEnabled;\n    }\n\n    set rimLightColor(rimColor: Vec4) {\n        this._rimColor = rimColor;\n        let value = v4(rimColor.x, rimColor.y, rimColor.z, this._rimEnabled? rimColor.w : 0);\n        this.body.sharedMaterial.setProperty('rimColor', value);\n        this.weapon.sharedMaterial.setProperty('rimColor', value)\n    }\n\n    get rimLightColor(): Vec4 {\n        return this._rimColor;\n    }\n\n    public set isLoop(v: boolean) {\n        this._isLoop = v;\n        let animState = this._anim.getAnimationState(this.curAnimName);\n        animState.repeatCount = v ? Infinity : 1;\n    }\n\n    public get isLoop(): boolean {\n        return this._isLoop;\n    }\n\n    playNext() {\n        this._curentAnimIndex = (this._curentAnimIndex + 1) % this._anim.clips.length;\n        this.playAnim(this.curAnimName, this._isLoop);\n    }\n\n    playPrev() {\n        this._curentAnimIndex = (this._curentAnimIndex - 1 + this._anim.clips.length) % this._anim.clips.length;\n        this.playAnim(this.curAnimName, this._isLoop);\n    }\n\n    playAnim(animName, isLoop?: boolean, cb?: Function) {\n        let animState = this._anim.getAnimationState(animName);\n        animState.repeatCount = isLoop ? Infinity : 1;\n        this._anim.play(animName);\n    }\n\n    public get curAnimName(): string {\n        let clip = this._anim.clips[this._curentAnimIndex];\n        return clip.name;\n    }\n}\n"]}