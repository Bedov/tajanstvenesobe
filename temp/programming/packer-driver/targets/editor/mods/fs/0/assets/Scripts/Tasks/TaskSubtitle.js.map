{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/Scripts/Tasks/TaskSubtitle.ts"],"names":["_decorator","Collider","GenericUI","Task","ccclass","property","TaskSubtitle","String","start","trigger","getComponent","on","taskReached","event","otherCollider","node","name","requirementForTaskCompleted","execute","taskManager","genericUI","active","turnOnGenericTask","tekst","refreshExecutedTasks","parent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAuCC,MAAAA,Q,OAAAA,Q;;AAKvCC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,I,iBAAAA,I;;;;;;;OALH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;8BAQjBM,Y,WADZF,OAAO,CAAC,cAAD,C,UAGHC,QAAQ,CAACE,MAAD,C,oCAHb,MACaD,YADb;AAAA;AAAA,wBACuC;AAAA;AAAA;;AAAA;AAAA;;AAKnCE,QAAAA,KAAK,GAAI;AACL,cAAIC,OAAO,GAAG,KAAKC,YAAL,CAAkBT,QAAlB,CAAd;;AACA,cAAIQ,OAAJ,EAAa;AACTA,YAAAA,OAAO,CAACE,EAAR,CAAY,gBAAZ,EAA8B,KAAKC,WAAnC,EAAgD,IAAhD;AACH;AACJ;;AAEDA,QAAAA,WAAW,CAAEC,KAAF,EAAc;AACrB,cAAGA,KAAK,CAACC,aAAN,CAAoBC,IAApB,CAAyBC,IAAzB,IAAiC,QAApC,EAAgD;AAC5C,gBAAG,KAAKC,2BAAR,EACI,KAAKC,OAAL;AAEP;AAGJ;;AAEDA,QAAAA,OAAO,GAAI;AAEP,eAAKC,WAAL,CAAiBC,SAAjB,CAA4BC,MAA5B,GAAqC,IAArC;AACA,eAAKF,WAAL,CAAiBC,SAAjB,CAA4BV,YAA5B;AAAA;AAAA,sCAAqDY,iBAArD,CAAuEf,MAAM,CAAE,KAAKgB,KAAP,CAA7E,EAHO,CAGuF;;AAG9F,eAAKJ,WAAL,CAAiBK,oBAAjB,CAAsC,KAAKT,IAAL,CAAUU,MAAhD;AACH;;AA7BkC,O;;;;;;AAkCvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport { _decorator, Component, Node, director, Collider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nimport { TaskManager } from \"./TaskManager\";\r\nimport { ScriptEffects } from \"../Utilities/ScriptEffects\";\r\nimport { GenericUI } from \"../Utilities/GenericUI\";\r\nimport { Task } from './Task';\r\n\r\n@ccclass('TaskSubtitle')\r\nexport class TaskSubtitle extends Task {\r\n\r\n    @property(String)\r\n    tekst!: String;\r\n\r\n    start () {\r\n        let trigger = this.getComponent(Collider);\r\n        if (trigger) { \r\n            trigger.on( \"onTriggerEnter\", this.taskReached, this);\r\n        }\r\n    }\r\n\r\n    taskReached (event: any) {\r\n        if(event.otherCollider.node.name == \"Player\" )  {\r\n            if(this.requirementForTaskCompleted) \r\n                this.execute();\r\n                \r\n        }\r\n            \r\n            \r\n    }\r\n\r\n    execute () {\r\n        \r\n        this.taskManager.genericUI!.active = true;\r\n        this.taskManager.genericUI!.getComponent(GenericUI)!.turnOnGenericTask(String( this.tekst) ); //Čestitam! Stigao si do časovničara.\r\n        \r\n    \r\n        this.taskManager.refreshExecutedTasks(this.node.parent!);\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * [1] Class member could be defined like this.\r\n * [2] Use `property` decorator if your want the member to be serializable.\r\n * [3] Your initialization goes here.\r\n * [4] Your update function goes here.\r\n *\r\n * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/\r\n * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html\r\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html\r\n */\r\n"]}