{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/Scripts/Tasks/TaskABCquestion.ts"],"names":["_decorator","AudioSource","randomRangeInt","GenericUIABC","Task","GameManager","ccclass","property","TaskABCquestion","String","Number","Array","start","getQuestions","audioSource","node","getComponent","scheduleOnce","fillQuestionsShownFalse","orderNumber","questionsTempArray","forEach","element","questionsShown","push","remoteName","getInstance","jsonLoader","fetchQuestions","expectedQuestions","logQuestionsFetched","console","log","length","getRandomTask","imamoNekoriscene","nasaoNekoriscenog","randomIndex","showTask","isItOkToExecute","taskManager","genericUIABC","active","turnOnGenericTask"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, AudioSource, director, Collider, Animation, random, randomRangeInt } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nimport { TaskManager } from \"./TaskManager\";\r\nimport { ScriptEffects } from \"../Utilities/ScriptEffects\";\r\nimport { GenericUI } from \"../Utilities/GenericUI\";\r\nimport { GenericUIABC } from \"../Utilities/GenericUI-ABC\";\r\nimport { Task } from './Task';\r\n\r\nimport { JSONloader } from \"../RemoteScripts/JSONloader\";\r\nimport { JSONtask1 } from \"../RemoteScripts/JSONloader\";\r\nimport { GameManager } from '../GameManager';\r\n@ccclass('TaskABCquestion')\r\nexport class TaskABCquestion extends Task {\r\n\r\n    @property(String)\r\n    remoteName!: String;\r\n\r\n    @property(Number)\r\n    expectedQuestions!: Number;\r\n\r\n    \r\n\r\n    questionsTempArray : Array<JSONtask1> = new Array<JSONtask1>();\r\n\r\n    questionsShown : Array<boolean> = new Array<boolean>();\r\n    questionShownFilled = false;\r\n\r\n    private audioSource: AudioSource = null!;\r\n   \r\n\r\n    start () {\r\n       // this.scheduleOnce(this.getQuestions, this.orderNumber * 0.05);\r\n        this.getQuestions();\r\n\r\n        this.audioSource = this.node.getComponent(AudioSource)!;\r\n\r\n        \r\n        this.scheduleOnce(this.fillQuestionsShownFalse, this.orderNumber * 0.05 + 2);\r\n    }\r\n\r\n    fillQuestionsShownFalse() {\r\n        this.questionsTempArray.forEach(element => {\r\n            this.questionsShown.push(false);\r\n             \r\n        });\r\n    }\r\n\r\n    getQuestions() {\r\n        if(this.remoteName != \"\") {\r\n            GameManager.getInstance().jsonLoader?.fetchQuestions(this.remoteName, this.questionsTempArray, this.expectedQuestions)!;\r\n            //this.scheduleOnce(this.logQuestionsFetched, 4);\r\n            \r\n            \r\n            //JSONloader.getInstance().returnTask1(this.remoteName, this.taskTemp)!;\r\n            //this.JSONloader.returnTask1(this.remoteName, this.taskTemp)!;\r\n        }\r\n    }\r\n\r\n    logQuestionsFetched() {\r\n        //this.questionsTempArray.forEach(element => {\r\n        //    console.log(\"QUESTION + \" + element.question );\r\n            \r\n            \r\n        //});\r\n        console.log(\"QUESTION ARRAY LENGHT \" + this.questionsTempArray.length);\r\n    }\r\n\r\n    getRandomTask() {\r\n        var imamoNekoriscene = false;\r\n        var nasaoNekoriscenog = false;\r\n        var randomIndex = randomRangeInt(0, this.questionsShown.length);\r\n        \r\n\r\n        this.questionsShown.forEach(element => {\r\n            if(element == false)\r\n                imamoNekoriscene = true;\r\n        });\r\n\r\n        console.log(\"imamoNekoriscene: \" + imamoNekoriscene);\r\n        \r\n        if(imamoNekoriscene) {\r\n            while(!nasaoNekoriscenog) {\r\n                randomIndex = randomRangeInt(0, this.questionsShown.length);\r\n                if( !this.questionsShown[randomIndex])\r\n                    nasaoNekoriscenog = true;\r\n            }\r\n            \r\n        }\r\n        console.log(\"QUESTION ARRAY LENGHT\" +  this.questionsShown.length);\r\n        console.log(\"randomIndex: \" + randomIndex);\r\n\r\n        this.questionsShown[randomIndex] = true;\r\n\r\n        return this.questionsTempArray[randomIndex];\r\n    }\r\n\r\n    showTask () {\r\n        \r\n        if(this.isItOkToExecute()) {\r\n            this.taskManager.genericUIABC!.active = true;\r\n            this.taskManager.genericUIABC!.getComponent(GenericUIABC)!.turnOnGenericTask(this.node); //Čestitam! Stigao si do časovničara.\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * [1] Class member could be defined like this.\r\n * [2] Use `property` decorator if your want the member to be serializable.\r\n * [3] Your initialization goes here.\r\n * [4] Your update function goes here.\r\n *\r\n * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/\r\n * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html\r\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html\r\n */\r\n"]}