{"version":3,"sources":["file:///Users/aleksandarbedov/Documents/CocosCreator/tajanstvenesobe2/assets/resources/qfw/components/NodeFloatingAnim.ts"],"names":["_decorator","Component","v3","ccclass","property","NodeFloatingAnim","Math","random","start","_angles","node","eulerAngles","clone","getPosition","_pos","update","deltaTime","rotateSpeed","y","updownSpeed","_lifeTime","sin","setPosition"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAuBC,MAAAA,E,OAAAA,E;;;;;;;OACtC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;kCAGjBK,gB,WADZF,OAAO,CAAC,kBAAD,C,oCAAR,MACaE,gBADb,SACsCJ,SADtC,CACgD;AAAA;AAAA;;AAAA,2CAOrBC,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPmB;;AAAA,wCAQxBA,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARsB;;AAAA,6CASxBI,IAAI,CAACC,MAAL,EATwB;;AAAA;;AAAA;AAAA;;AAiB5CC,QAAAA,KAAK,GAAI;AACL;AACA,eAAKC,OAAL,GAAe,KAAKC,IAAL,CAAUC,WAAV,CAAsBC,KAAtB,EAAf;AACA,eAAKF,IAAL,CAAUG,WAAV,CAAsB,KAAKC,IAA3B;AACH;;AAEDC,QAAAA,MAAM,CAAEC,SAAF,EAAqB;AACtB,cAAG,KAAKC,WAAR,EAAoB;AACjB,iBAAKR,OAAL,CAAaS,CAAb,IAAkBF,SAAS,GAAG,KAAKC,WAAnC;AACA,iBAAKP,IAAL,CAAUC,WAAV,GAAwB,KAAKF,OAA7B;AACF;;AAED,cAAG,KAAKU,WAAR,EAAoB;AACjB,iBAAKC,SAAL,IAAkBJ,SAAlB;AAEA,iBAAKN,IAAL,CAAUG,WAAV,CAAsB,KAAKC,IAA3B;AACA,iBAAKA,IAAL,CAAUI,CAAV,GAAcZ,IAAI,CAACe,GAAL,CAAS,KAAKD,SAAL,GAAiB,KAAKD,WAA/B,CAAd;AACA,iBAAKT,IAAL,CAAUY,WAAV,CAAsB,KAAKR,IAA3B;AACF;AACL;;AApC2C,O,sFAW3CV,Q;;;;;iBACoB,E;;sFAEpBA,Q;;;;;iBACoB,C","sourcesContent":["import { _decorator, Component, Node, Vec3, v3, CameraComponent, Terrain } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('NodeFloatingAnim')\nexport class NodeFloatingAnim extends Component {\n    /* class member could be defined like this */\n    // dummy = '';\n\n    /* use `property` decorator if your want the member to be serializable */\n    // @property\n    // serializableDummy = 0;\n    private _angles:Vec3 = v3(0,0,0);\n    private _pos:Vec3 = v3(0,0,0);\n    private _lifeTime = Math.random();\n\n    @property\n    rotateSpeed:number = 10;\n\n    @property\n    updownSpeed:number = 1;\n\n    start () {\n        // Your initialization goes here.\n        this._angles = this.node.eulerAngles.clone();\n        this.node.getPosition(this._pos);\n    }\n\n    update (deltaTime: number) {\n         if(this.rotateSpeed){\n            this._angles.y += deltaTime * this.rotateSpeed;\n            this.node.eulerAngles = this._angles;\n         }\n\n         if(this.updownSpeed){\n            this._lifeTime += deltaTime;\n         \n            this.node.getPosition(this._pos);\n            this._pos.y = Math.sin(this._lifeTime * this.updownSpeed);\n            this.node.setPosition(this._pos);\n         }\n    }\n}\n"]}